<?php

/**
 * Terminate apache process after this request.
 **/

function apache_child_terminate() {

  /**
   * apache_child_terminate will register the Apache process
   * executing the current PHP request for termination once
   * execution of PHP code is completed. It may be used to
   * terminate a process after a script with high memory
   * consumption has been run as memory will usually only be freed
   * internally but not given back to the operating system.
   *
   * Works in the Apache, and FastCGI webservers.
   **/
}

/**
 * Get a list of loaded Apache modules.
 **/

function apache_get_modules() {

  /**
   * Get a list of loaded Apache modules.
   **/
}

/**
 * Fetch Apache version.
 **/

function apache_get_version() {

  /**
   * Fetch the Apache version.
   **/
}

/**
 * Get an Apache subprocess_env variable.
 **/

function apache_getenv( string $variable,  bool $walk_to_top = false) {

  /**
   * Retrieve an Apache environment variable specified by
   * variable.
   **/
}

/**
 * Perform a partial request for the specified URI and return all.
 * info about it.
 **/

function apache_lookup_uri( string $filename) {

  /**
   * This performs a partial request for a URI. It goes just far
   * enough to obtain all the important information about the given
   * resource.
   **/
}

/**
 * Get and set apache request notes.
 **/

function apache_note( string $note_name, $note_value = null) {

  /**
   * This function is a wrapper for Apache's table_get and
   * table_set. It edits the table of notes that exists during a
   * request. The table's purpose is to allow Apache modules to
   * communicate.
   *
   * The main use for apache_note is to pass information from one
   * module to another within the same request.
   **/
}

/**
 * Fetch all HTTP request headers.
 **/

function apache_request_headers() {

  /**
   * Fetches all HTTP request headers from the current request.
   * Works in the Apache, FastCGI, CLI, and FPM webservers.
   **/
}

/**
 * Fetch all HTTP response headers.
 **/

function apache_response_headers() {

  /**
   * Fetch all HTTP response headers. Works in the Apache,
   * FastCGI, CLI, and FPM webservers.
   **/
}

/**
 * Set an Apache subprocess_env variable.
 **/

function apache_setenv(
     string $variable
  ,  string $value
  ,  bool $walk_to_top = false
  ) {

  /**
   * apache_setenv sets the value of the Apache environment
   * variable specified by variable.
   *
   * When setting an Apache environment variable, the
   * corresponding $_SERVER variable is not changed.
   **/
}

/**
 * Fetch all HTTP request headers.
 **/

function getallheaders() {

  /**
   * Fetches all HTTP headers from the current request.
   *
   * This function is an alias for apache_request_headers. Please
   * read the apache_request_headers documentation for more
   * information on how this function works.
   **/
}

/**
 * Perform an Apache sub-request.
 **/

function virtual( string $uri) {

  /**
   * virtual is an Apache-specific function which is similar to
   * <!--#include virtual...--> in mod_include. It performs an
   * Apache sub-request. It is useful for including CGI scripts or
   * .shtml files, or anything else that you would parse through
   * Apache. Note that for a CGI script, the script must generate
   * valid CGI headers. At the minimum that means it must generate
   * a Content-Type header.
   *
   * To run the sub-request, all buffers are terminated and
   * flushed to the browser, pending headers are sent too.
   **/
}

/**
 * Cache a new variable in the data store.
 **/

function apcu_add( string $key,  mixed $var,  int $ttl = 0) {

  /**
   * Caches a variable in the data store, only if it's not already
   * stored.
   **/
}

/**
 * Retrieves cached information from APCu's data store.
 **/

function apcu_cache_info( bool $limited = false) {

  /**
   * Retrieves cached information and meta-data from APC's data
   * store.
   **/
}

/**
 * Updates an old value with a new value.
 **/

function apcu_cas( string $key,  int $old,  int $new) {

  /**
   * apcu_cas updates an already existing integer value if the old
   * parameter matches the currently stored value with the value of
   * the new parameter.
   **/
}

/**
 * Clears the APCu cache.
 **/

function apcu_clear_cache() {

  /**
   * Clears the cache.
   **/
}

/**
 * Decrease a stored number.
 **/

function apcu_dec(
     string $key
  ,  int $step = 1
  ,  bool &$success
  ,  int $ttl = 0
  ) {

  /**
   * Decreases a stored integer value.
   **/
}

/**
 * Removes a stored variable from the cache.
 **/

function apcu_delete( mixed $key) {

  /**
   * Removes a stored variable from the cache.
   **/
}

/**
 * Whether APCu is usable in the current environment.
 **/

function apcu_enabled() {

  /**
   * Returns whether APCu is usable in the current environment.
   **/
}

/**
 * Atomically fetch or generate a cache entry.
 **/

function apcu_entry(
     string $key
  ,  callable $generator
  ,  int $ttl = 0
  ) {

  /**
   * Atomically attempts to find key in the cache, if it cannot be
   * found generator is called, passing key as the only argument.
   * The return value of the call is then cached with the
   * optionally specified ttl, and returned.
   **/
}

/**
 * Checks if entry exists.
 **/

function apcu_exists($keys) {

  /**
   * Checks if one or more APCu entries exist.
   **/
}

/**
 * Fetch a stored variable from the cache.
 **/

function apcu_fetch( mixed $key,  bool &$success) {

  /**
   * Fetches an entry from the cache.
   **/
}

/**
 * Increase a stored number.
 **/

function apcu_inc(
     string $key
  ,  int $step = 1
  ,  bool &$success
  ,  int $ttl = 0
  ) {

  /**
   * Increases a stored number.
   **/
}

/**
 * Get detailed information about the cache key.
 **/

function apcu_key_info( string $key) {

  /**
   * Get detailed information about the cache key
   **/
}

/**
 * Retrieves APCu Shared Memory Allocation information.
 **/

function apcu_sma_info( bool $limited = false) {

  /**
   * Retrieves APCu Shared Memory Allocation information.
   **/
}

/**
 * Cache a variable in the data store.
 **/

function apcu_store( string $key,  mixed $var,  int $ttl = 0) {

  /**
   * Cache a variable in the data store.
   **/
}

/**
 * Changes the case of all keys in an array.
 **/

function array_change_key_case(
     array $array
  ,  int $case = CASE_LOWER
  ) {

  /**
   * Returns an array with all keys from array lowercased or
   * uppercased. Numbered indices are left as is.
   **/
}

/**
 * Split an array into chunks.
 **/

function array_chunk(
     array $array
  ,  int $length
  ,  bool $preserve_keys = false
  ) {

  /**
   * Chunks an array into arrays with length elements. The last
   * chunk may contain less than length elements.
   **/
}

/**
 * Return the values from a single column in the input array.
 **/

function array_column( array $array, $column_key, $index_key = null) {

  /**
   * array_column returns the values from a single column of the
   * array, identified by the column_key. Optionally, an index_key
   * may be provided to index the values in the returned array by
   * the values from the index_key column of the input array.
   **/
}

/**
 * Creates an array by using one array for keys and another for.
 * its values.
 **/

function array_combine( array $keys,  array $values) {

  /**
   * Creates an array by using the values from the keys array as
   * keys and the values from the values array as the corresponding
   * values.
   **/
}

/**
 * Counts the occurrences of each distinct value in an array.
 **/

function array_count_values( array $array) {

  /**
   * array_count_values returns an array using the values of array
   * (which must be &integer;s or &string;s) as keys and their
   * frequency in array as values.
   **/
}

/**
 * Computes the difference of arrays with additional index check.
 **/

function array_diff_assoc( array $array,  array $arrays) {

  /**
   * Compares array against arrays and returns the difference.
   * Unlike array_diff the array keys are also used in the
   * comparison.
   **/
}

/**
 * Computes the difference of arrays using keys for comparison.
 **/

function array_diff_key( array $array,  array $arrays) {

  /**
   * Compares the keys from array against the keys from arrays and
   * returns the difference. This function is like array_diff
   * except the comparison is done on the keys instead of the
   * values.
   **/
}

/**
 * Computes the difference of arrays with additional index check.
 * which is performed by a user supplied callback function.
 **/

function array_diff_uassoc(
     array $array
  ,  array $arrays
  ,  callable $key_compare_func
  ) {

  /**
   * Compares array against arrays and returns the difference.
   * Unlike array_diff the array keys are used in the comparison.
   *
   * Unlike array_diff_assoc a user supplied callback function is
   * used for the indices comparison, not internal function.
   **/
}

/**
 * Computes the difference of arrays using a callback function on.
 * the keys for comparison.
 **/

function array_diff_ukey(
     array $array
  ,  array $arrays
  ,  callable $key_compare_func
  ) {

  /**
   * Compares the keys from array against the keys from arrays and
   * returns the difference. This function is like array_diff
   * except the comparison is done on the keys instead of the
   * values.
   *
   * Unlike array_diff_key a user supplied callback function is
   * used for the indices comparison, not internal function.
   **/
}

/**
 * Computes the difference of arrays.
 **/

function array_diff( array $array,  array $arrays) {

  /**
   * Compares array against one or more other arrays and returns
   * the values in array that are not present in any of the other
   * arrays.
   **/
}

/**
 * Fill an array with values, specifying keys.
 **/

function array_fill_keys( array $keys,  mixed $value) {

  /**
   * Fills an array with the value of the value parameter, using
   * the values of the keys array as keys.
   **/
}

/**
 * Fill an array with values.
 **/

function array_fill( int $start_index,  int $count,  mixed $value) {

  /**
   * Fills an array with count entries of the value of the value
   * parameter, keys starting at the start_index parameter.
   **/
}

/**
 * Filters elements of an array using a callback function.
 **/

function array_filter(
     array $array
  , $callback = null
  ,  int $mode = 0
  ) {

  /**
   * Iterates over each value in the array passing them to the
   * callback function. If the callback function returns &true;,
   * the current value from array is returned into the result
   * &array;.
   *
   * Array keys are preserved, and may result in gaps if the array
   * was indexed. The result &array; can be reindexed using the
   * array_values function.
   **/
}

/**
 * Exchanges all keys with their associated values in an array.
 **/

function array_flip( array $array) {

  /**
   * array_flip returns an array in flip order, i.e. keys from
   * array become values and values from array become keys.
   *
   * Note that the values of array need to be valid keys, i.e.
   * they need to be either int or string. A warning will be
   * emitted if a value has the wrong type, and the key/value pair
   * in question will not be included in the result.
   *
   * If a value has several occurrences, the latest key will be
   * used as its value, and all others will be lost.
   **/
}

/**
 * Computes the intersection of arrays with additional index.
 * check.
 **/

function array_intersect_assoc( array $array,  array $arrays) {

  /**
   **/
}

/**
 * Computes the intersection of arrays using keys for comparison.
 **/

function array_intersect_key( array $array,  array $arrays) {

  /**
   * array_intersect_key returns an array containing all the
   * entries of array which have keys that are present in all the
   * arguments.
   **/
}

/**
 * Computes the intersection of arrays with additional index.
 * check, compares indexes by a callback function.
 **/

function array_intersect_uassoc(
     array $array
  ,  array $arrays
  ,  callable $key_compare_func
  ) {

  /**
   * array_intersect_uassoc returns an array containing all the
   * values of array that are present in all the arguments. Note
   * that the keys are used in the comparison unlike in
   * array_intersect.
   **/
}

/**
 * Computes the intersection of arrays using a callback function.
 * on the keys for comparison.
 **/

function array_intersect_ukey(
     array $array
  ,  array $arrays
  ,  callable $key_compare_func
  ) {

  /**
   * array_intersect_ukey returns an array containing all the
   * values of array which have matching keys that are present in
   * all the arguments.
   **/
}

/**
 * Computes the intersection of arrays.
 **/

function array_intersect( array $array,  array $arrays) {

  /**
   * array_intersect returns an array containing all the values of
   * array that are present in all the arguments. Note that keys
   * are preserved.
   **/
}

/**
 * Checks whether a given array is a list.
 **/

function array_is_list( array $array) {

  /**
   * Determines if the given array is a list. An &array; is
   * considered a list if its keys consist of consecutive numbers
   * from 0 to count($array)-1.
   **/
}

/**
 * Checks if the given key or index exists in the array.
 **/

function array_key_exists($key,  array $array) {

  /**
   * array_key_exists returns &true; if the given key is set in
   * the array. key can be any value possible for an array index.
   **/
}

/**
 * Gets the first key of an array.
 **/

function array_key_first( array $array) {

  /**
   * Get the first key of the given array without affecting the
   * internal array pointer.
   **/
}

/**
 * Gets the last key of an array.
 **/

function array_key_last( array $array) {

  /**
   * Get the last key of the given array without affecting the
   * internal array pointer.
   **/
}

/**
 * Return all the keys or a subset of the keys of an array.
 **/

function array_keys( array $array) {

  /**
   * array_keys returns the keys, numeric and string, from the
   * array.
   *
   * If a filter_value is specified, then only the keys for that
   * value are returned. Otherwise, all the keys from the array are
   * returned.
   **/
}

/**
 * Applies the callback to the elements of the given arrays.
 **/

function array_map($callback,  array $array,  array $arrays) {

  /**
   * array_map returns an &array; containing the results of
   * applying the callback to the corresponding value of array (and
   * arrays if more arrays are provided) used as arguments for the
   * callback. The number of parameters that the callback function
   * accepts should match the number of arrays passed to array_map.
   * Excess input arrays are ignored. An ArgumentCountError is
   * thrown if an insufficient number of arguments is provided.
   **/
}

/**
 * Merge one or more arrays recursively.
 **/

function array_merge_recursive( array $arrays) {

  /**
   * array_merge_recursive merges the elements of one or more
   * arrays together so that the values of one are appended to the
   * end of the previous one. It returns the resulting array.
   *
   * If the input arrays have the same string keys, then the
   * values for these keys are merged together into an array, and
   * this is done recursively, so that if one of the values is an
   * array itself, the function will merge it with a corresponding
   * entry in another array too. If, however, the arrays have the
   * same numeric key, the later value will not overwrite the
   * original value, but will be appended.
   **/
}

/**
 * Merge one or more arrays.
 **/

function array_merge( array $arrays) {

  /**
   * Merges the elements of one or more arrays together so that
   * the values of one are appended to the end of the previous one.
   * It returns the resulting array.
   *
   * If the input arrays have the same string keys, then the later
   * value for that key will overwrite the previous one. If,
   * however, the arrays contain numeric keys, the later value will
   * not overwrite the original value, but will be appended.
   *
   * Values in the input arrays with numeric keys will be
   * renumbered with incrementing keys starting from zero in the
   * result array.
   **/
}

/**
 * Sort multiple or multi-dimensional arrays.
 **/

function array_multisort(
     array &$array1
  ,  mixed $array1_sort_order = SORT_ASC
  ,  mixed $array1_sort_flags = SORT_REGULAR
  ,  mixed $rest
  ) {

  /**
   * array_multisort can be used to sort several arrays at once,
   * or a multi-dimensional array by one or more dimensions.
   *
   * Associative (string) keys will be maintained, but numeric
   * keys will be re-indexed.
   **/
}

/**
 * Pad array to the specified length with a value.
 **/

function array_pad( array $array,  int $length,  mixed $value) {

  /**
   * array_pad returns a copy of the array padded to size
   * specified by length with value value. If length is positive
   * then the array is padded on the right, if it's negative then
   * on the left. If the absolute value of length is less than or
   * equal to the length of the array then no padding takes place.
   **/
}

/**
 * Pop the element off the end of array.
 **/

function array_pop( array &$array) {

  /**
   * array_pop pops and returns the value of the last element of
   * array, shortening the array by one element.
   **/
}

/**
 * Calculate the product of values in an array.
 **/

function array_product( array $array) {

  /**
   * array_product returns the product of values in an array.
   **/
}

/**
 * Push one or more elements onto the end of array.
 **/

function array_push( array &$array,  mixed $values) {

  /**
   * array_push treats array as a stack, and pushes the passed
   * variables onto the end of array. The length of array increases
   * by the number of variables pushed. Has the same effect as: ]]>
   * repeated for each passed value.
   **/
}

/**
 * Pick one or more random keys out of an array.
 **/

function array_rand( array $array,  int $num = 1) {

  /**
   * Picks one or more random entries out of an array, and returns
   * the key (or keys) of the random entries.
   **/
}

/**
 * Iteratively reduce the array to a single value using a.
 * callback function.
 **/

function array_reduce(
     array $array
  ,  callable $callback
  ,  mixed $initial = null
  ) {

  /**
   * array_reduce applies iteratively the callback function to the
   * elements of the array, so as to reduce the array to a single
   * value.
   **/
}

/**
 * Replaces elements from passed arrays into the first array.
 * recursively.
 **/

function array_replace_recursive( array $array,  array $replacements) {

  /**
   * array_replace_recursive replaces the values of array with the
   * same values from all the following arrays. If a key from the
   * first array exists in the second array, its value will be
   * replaced by the value from the second array. If the key exists
   * in the second array, and not the first, it will be created in
   * the first array. If a key only exists in the first array, it
   * will be left as is. If several arrays are passed for
   * replacement, they will be processed in order, the later array
   * overwriting the previous values.
   *
   * array_replace_recursive is recursive : it will recurse into
   * arrays and apply the same process to the inner value.
   *
   * When the value in the first array is scalar, it will be
   * replaced by the value in the second array, may it be scalar or
   * array. When the value in the first array and the second array
   * are both arrays, array_replace_recursive will replace their
   * respective value recursively.
   **/
}

/**
 * Replaces elements from passed arrays into the first array.
 **/

function array_replace( array $array,  array $replacements) {

  /**
   * array_replace replaces the values of array with values having
   * the same keys in each of the following arrays. If a key from
   * the first array exists in the second array, its value will be
   * replaced by the value from the second array. If the key exists
   * in the second array, and not the first, it will be created in
   * the first array. If a key only exists in the first array, it
   * will be left as is. If several arrays are passed for
   * replacement, they will be processed in order, the later arrays
   * overwriting the previous values.
   *
   * array_replace is not recursive : it will replace values in
   * the first array by whatever type is in the second array.
   **/
}

/**
 * Return an array with elements in reverse order.
 **/

function array_reverse( array $array,  bool $preserve_keys = false) {

  /**
   * Takes an input array and returns a new array with the order
   * of the elements reversed.
   **/
}

/**
 * Searches the array for a given value and returns the first.
 * corresponding key if successful.
 **/

function array_search(
     mixed $needle
  ,  array $haystack
  ,  bool $strict = false
  ) {

  /**
   * Searches for needle in haystack.
   **/
}

/**
 * Shift an element off the beginning of array.
 **/

function array_shift( array &$array) {

  /**
   * array_shift shifts the first value of the array off and
   * returns it, shortening the array by one element and moving
   * everything down. All numerical array keys will be modified to
   * start counting from zero while literal keys won't be affected.
   **/
}

/**
 * Extract a slice of the array.
 **/

function array_slice(
     array $array
  ,  int $offset
  , $length = null
  ,  bool $preserve_keys = false
  ) {

  /**
   * array_slice returns the sequence of elements from the array
   * array as specified by the offset and length parameters.
   **/
}

/**
 * Remove a portion of the array and replace it with something.
 * else.
 **/

function array_splice(
     array &$array
  ,  int $offset
  , $length = null
  ,  mixed $replacement = []
  ) {

  /**
   * Removes the elements designated by offset and length from the
   * array array, and replaces them with the elements of the
   * replacement array, if supplied.
   *
   * Numerical keys in array are not preserved.
   **/
}

/**
 * Calculate the sum of values in an array.
 **/

function array_sum( array $array) {

  /**
   * array_sum returns the sum of values in an array.
   **/
}

/**
 * Computes the difference of arrays with additional index check,.
 * compares data by a callback function.
 **/

function array_udiff_assoc(
     array $array
  ,  array $arrays
  ,  callable $value_compare_func
  ) {

  /**
   * Computes the difference of arrays with additional index
   * check, compares data by a callback function.
   **/
}

/**
 * Computes the difference of arrays with additional index check,.
 * compares data and indexes by a callback function.
 **/

function array_udiff_uassoc(
     array $array
  ,  array $arrays
  ,  callable $value_compare_func
  ,  callable $key_compare_func
  ) {

  /**
   * Computes the difference of arrays with additional index
   * check, compares data and indexes by a callback function.
   *
   * Note that the keys are used in the comparison unlike
   * array_diff and array_udiff.
   **/
}

/**
 * Computes the difference of arrays by using a callback function.
 * for data comparison.
 **/

function array_udiff(
     array $array
  ,  array $arrays
  ,  callable $value_compare_func
  ) {

  /**
   * Computes the difference of arrays by using a callback
   * function for data comparison. This is unlike array_diff which
   * uses an internal function for comparing the data.
   **/
}

/**
 * Computes the intersection of arrays with additional index.
 * check, compares data by a callback function.
 **/

function array_uintersect_assoc(
     array $array
  ,  array $arrays
  ,  callable $value_compare_func
  ) {

  /**
   * Computes the intersection of arrays with additional index
   * check, compares data by a callback function.
   *
   * Note that the keys are used in the comparison unlike in
   * array_uintersect. The data is compared by using a callback
   * function.
   **/
}

/**
 * Computes the intersection of arrays with additional index.
 * check, compares data and indexes by separate callback.
 * functions.
 **/

function array_uintersect_uassoc(
     array $array1
  ,  array $arrays
  ,  callable $value_compare_func
  ,  callable $key_compare_func
  ) {

  /**
   * Computes the intersection of arrays with additional index
   * check, compares data and indexes by separate callback
   * functions.
   **/
}

/**
 * Computes the intersection of arrays, compares data by a.
 * callback function.
 **/

function array_uintersect(
     array $array
  ,  array $arrays
  ,  callable $value_compare_func
  ) {

  /**
   * Computes the intersection of arrays, compares data by a
   * callback function.
   **/
}

/**
 * Removes duplicate values from an array.
 **/

function array_unique( array $array,  int $flags = SORT_STRING) {

  /**
   * Takes an input array and returns a new array without
   * duplicate values.
   *
   * Note that keys are preserved. If multiple elements compare
   * equal under the given flags, then the key and value of the
   * first equal element will be retained.
   **/
}

/**
 * Prepend one or more elements to the beginning of an array.
 **/

function array_unshift( array &$array,  mixed $values) {

  /**
   * array_unshift prepends passed elements to the front of the
   * array. Note that the list of elements is prepended as a whole,
   * so that the prepended elements stay in the same order. All
   * numerical array keys will be modified to start counting from
   * zero while literal keys won't be changed.
   **/
}

/**
 * Return all the values of an array.
 **/

function array_values( array $array) {

  /**
   * array_values returns all the values from the array and
   * indexes the array numerically.
   **/
}

/**
 * Apply a user function recursively to every member of an array.
 **/

function array_walk_recursive(
    &$array
  ,  callable $callback
  ,  mixed $arg = null
  ) {

  /**
   * Applies the user-defined callback function to each element of
   * the array. This function will recurse into deeper arrays.
   **/
}

/**
 * Apply a user supplied function to every member of an array.
 **/

function array_walk(&$array,  callable $callback,  mixed $arg = null) {

  /**
   * array_walk is not affected by the internal array pointer of
   * array. array_walk will walk through the entire array
   * regardless of pointer position.
   **/
}

/**
 * Create an array.
 **/

function array( mixed $values) {

  /**
   * Creates an array. Read the section on the array type for more
   * information on what an array is.
   **/
}

/**
 * Sort an array in descending order and maintain index.
 * association.
 **/

function arsort( array &$array,  int $flags = SORT_REGULAR) {

  /**
   * Sorts array in place in descending order, such that its keys
   * maintain their correlation with the values they are associated
   * with.
   *
   * This is used mainly when sorting associative arrays where the
   * actual element order is significant.
   **/
}

/**
 * Sort an array in ascending order and maintain index.
 * association.
 **/

function asort( array &$array,  int $flags = SORT_REGULAR) {

  /**
   * Sorts array in place in ascending order, such that its keys
   * maintain their correlation with the values they are associated
   * with.
   *
   * This is used mainly when sorting associative arrays where the
   * actual element order is significant.
   **/
}

/**
 * Create array containing variables and their values.
 **/

function compact($var_name, $var_names) {

  /**
   * Creates an array containing variables and their values.
   *
   * For each of these, compact looks for a variable with that
   * name in the current symbol table and adds it to the output
   * array such that the variable name becomes the key and the
   * contents of the variable become the value for that key. In
   * short, it does the opposite of extract.
   *
   * Before PHP 7.3, any strings that are not set will silently be
   * skipped.
   **/
}

/**
 * Counts all elements in an array or in a Countable object.
 **/

function count($value,  int $mode = COUNT_NORMAL) {

  /**
   * Counts all elements in an array when used with an array. When
   * used with an object that implements the Countable interface,
   * it returns the return value of the method Countable::count.
   **/
}

/**
 * Return the current element in an array.
 **/

function current($array) {

  /**
   * Every array has an internal pointer to its "current" element,
   * which is initialized to the first element inserted into the
   * array.
   **/
}

/**
 * Return the current key and value pair from an array and.
 * advance the array cursor.
 **/

function each(&$array) {

  /**
   * Return the current key and value pair from an array and
   * advance the array cursor.
   *
   * After each has executed, the array cursor will be left on the
   * next element of the array, or past the last element if it hits
   * the end of the array. You have to use reset if you want to
   * traverse the array again using each.
   **/
}

/**
 * Set the internal pointer of an array to its last element.
 **/

function end(&$array) {

  /**
   * end advances array's internal pointer to the last element,
   * and returns its value.
   **/
}

/**
 * Import variables into the current symbol table from an array.
 **/

function extract(
     array &$array
  ,  int $flags = EXTR_OVERWRITE
  ,  string $prefix = ""
  ) {

  /**
   * Import variables from an array into the current symbol table.
   *
   * Checks each key to see whether it has a valid variable name.
   * It also checks for collisions with existing variables in the
   * symbol table.
   *
   * Do not use extract on untrusted data, like user input (e.g.
   * $_GET, $_FILES).
   **/
}

/**
 * Checks if a value exists in an array.
 **/

function in_array(
     mixed $needle
  ,  array $haystack
  ,  bool $strict = false
  ) {

  /**
   * Searches for needle in haystack using loose comparison unless
   * strict is set.
   **/
}

/**
 * &Alias; array_key_exists.
 **/

function () {

  /**
   **/
}

/**
 * Fetch a key from an array.
 **/

function key($array) {

  /**
   * key returns the index element of the current array position.
   **/
}

/**
 * Sort an array by key in descending order.
 **/

function krsort( array &$array,  int $flags = SORT_REGULAR) {

  /**
   * Sorts array in place by keys in descending order.
   **/
}

/**
 * Sort an array by key in ascending order.
 **/

function ksort( array &$array,  int $flags = SORT_REGULAR) {

  /**
   * Sorts array in place by keys in ascending order.
   **/
}

/**
 * Assign variables as if they were an array.
 **/

function list( mixed $var,  mixed $vars) {

  /**
   * Like array, this is not really a function, but a language
   * construct. list is used to assign a list of variables in one
   * operation. Strings can not be unpacked and list expressions
   * can not be completely empty.
   *
   * Before PHP 7.1.0, list only worked on numerical arrays and
   * assumes the numerical indices start at 0.
   **/
}

/**
 * Sort an array using a case insensitive "natural order".
 * algorithm.
 **/

function natcasesort( array &$array) {

  /**
   * natcasesort is a case insensitive version of natsort.
   *
   * This function implements a sort algorithm that orders
   * alphanumeric strings in the way a human being would while
   * maintaining key/value associations. This is described as a
   * "natural ordering".
   **/
}

/**
 * Sort an array using a "natural order" algorithm.
 **/

function natsort( array &$array) {

  /**
   * This function implements a sort algorithm that orders
   * alphanumeric strings in the way a human being would while
   * maintaining key/value associations. This is described as a
   * "natural ordering". An example of the difference between this
   * algorithm and the regular computer string sorting algorithms
   * (used in sort) can be seen in the example below.
   **/
}

/**
 * Advance the internal pointer of an array.
 **/

function next(&$array) {

  /**
   * next behaves like current, with one difference. It advances
   * the internal array pointer one place forward before returning
   * the element value. That means it returns the next array value
   * and advances the internal array pointer by one.
   **/
}

/**
 * &Alias; current.
 **/

function () {

  /**
   **/
}

/**
 * Rewind the internal array pointer.
 **/

function prev(&$array) {

  /**
   * Rewind the internal array pointer.
   *
   * prev behaves just like next, except it rewinds the internal
   * array pointer one place instead of advancing it.
   **/
}

/**
 * Create an array containing a range of elements.
 **/

function range($start, $end, $step = 1) {

  /**
   * Create an array containing a range of elements.
   *
   * If both start and end are strings, and step is int the
   * produced array will be a sequence of bytes. Otherwise, the
   * produced array will be a sequence of numbers.
   *
   * The sequence is increasing if start is less than equal to
   * end. Otherwise, the sequence is decreasing.
   **/
}

/**
 * Set the internal pointer of an array to its first element.
 **/

function reset(&$array) {

  /**
   * reset rewinds array's internal pointer to the first element
   * and returns the value of the first array element.
   **/
}

/**
 * Sort an array in descending order.
 **/

function rsort( array &$array,  int $flags = SORT_REGULAR) {

  /**
   * Sorts array in place by values in descending order.
   **/
}

/**
 * Shuffle an array.
 **/

function shuffle( array &$array) {

  /**
   * This function shuffles (randomizes the order of the elements
   * in) an array.
   **/
}

/**
 * &Alias; count.
 **/

function () {

  /**
   **/
}

/**
 * Sort an array in ascending order.
 **/

function sort( array &$array,  int $flags = SORT_REGULAR) {

  /**
   * Sorts array in place by values in ascending order.
   **/
}

/**
 * Sort an array with a user-defined comparison function and.
 * maintain index association.
 **/

function uasort( array &$array,  callable $callback) {

  /**
   * Sorts array in place such that its keys maintain their
   * correlation with the values they are associated with, using a
   * user-defined comparison function.
   *
   * This is used mainly when sorting associative arrays where the
   * actual element order is significant.
   **/
}

/**
 * Sort an array by keys using a user-defined comparison function.
 **/

function uksort( array &$array,  callable $callback) {

  /**
   * Sorts array in place by keys using a user-supplied comparison
   * function to determine the order.
   **/
}

/**
 * Sort an array by values using a user-defined comparison.
 * function.
 **/

function usort( array &$array,  callable $callback) {

  /**
   * Sorts array in place by values using a user-supplied
   * comparison function to determine the order.
   **/
}

/**
 * Add two arbitrary precision numbers.
 **/

function bcadd( string $num1,  string $num2, $scale = null) {

  /**
   * Sums num1 and num2.
   **/
}

/**
 * Compare two arbitrary precision numbers.
 **/

function bccomp( string $num1,  string $num2, $scale = null) {

  /**
   * Compares the num1 to the num2 and returns the result as an
   * integer.
   **/
}

/**
 * Divide two arbitrary precision numbers.
 **/

function bcdiv( string $num1,  string $num2, $scale = null) {

  /**
   * Divides the num1 by the num2.
   **/
}

/**
 * Get modulus of an arbitrary precision number.
 **/

function bcmod( string $num1,  string $num2, $scale = null) {

  /**
   * Get the remainder of dividing num1 by num2. Unless num2 is
   * zero, the result has the same sign as num1.
   **/
}

/**
 * Multiply two arbitrary precision numbers.
 **/

function bcmul( string $num1,  string $num2, $scale = null) {

  /**
   * Multiply the num1 by the num2.
   **/
}

/**
 * Raise an arbitrary precision number to another.
 **/

function bcpow( string $num,  string $exponent, $scale = null) {

  /**
   * Raise num to the power exponent.
   **/
}

/**
 * Raise an arbitrary precision number to another, reduced by a.
 * specified modulus.
 **/

function bcpowmod(
     string $num
  ,  string $exponent
  ,  string $modulus
  , $scale = null
  ) {

  /**
   * Use the fast-exponentiation method to raise num to the power
   * exponent with respect to the modulus modulus.
   **/
}

/**
 * Set or get default scale parameter for all bc math functions.
 **/

function bcscale( int $scale) {

  /**
   * Sets the default scale parameter for all subsequent calls to
   * bc math functions that do not explicitly specify a scale
   * parameter.
   *
   * Gets the current scale factor.
   **/
}

/**
 * Get the square root of an arbitrary precision number.
 **/

function bcsqrt( string $num, $scale = null) {

  /**
   * Return the square root of the num.
   **/
}

/**
 * Subtract one arbitrary precision number from another.
 **/

function bcsub( string $num1,  string $num2, $scale = null) {

  /**
   * Subtracts the num2 from the num1.
   **/
}

/**
 * Close a bzip2 file.
 **/

function bzclose( resource $bz) {

  /**
   * Closes the given bzip2 file pointer.
   **/
}

/**
 * Compress a string into bzip2 encoded data.
 **/

function bzcompress(
     string $data
  ,  int $block_size = 4
  ,  int $work_factor = 0
  ) {

  /**
   * bzcompress compresses the given string and returns it as
   * bzip2 encoded data.
   **/
}

/**
 * Decompresses bzip2 encoded data.
 **/

function bzdecompress( string $data,  bool $use_less_memory = false) {

  /**
   * bzdecompress decompresses the given string containing bzip2
   * encoded data.
   **/
}

/**
 * Returns a bzip2 error number.
 **/

function bzerrno( resource $bz) {

  /**
   * Returns the error number of any bzip2 error returned by the
   * given file pointer.
   **/
}

/**
 * Returns the bzip2 error number and error string in an array.
 **/

function bzerror( resource $bz) {

  /**
   * Returns the error number and error string of any bzip2 error
   * returned by the given file pointer.
   **/
}

/**
 * Returns a bzip2 error string.
 **/

function bzerrstr( resource $bz) {

  /**
   * Gets the error string of any bzip2 error returned by the
   * given file pointer.
   **/
}

/**
 * Do nothing.
 **/

function bzflush( resource $bz) {

  /**
   * This function is supposed to force a write of all buffered
   * bzip2 data for the file pointer bz, but is implemented as null
   * function in libbz2, and as such does nothing.
   **/
}

/**
 * Opens a bzip2 compressed file.
 **/

function bzopen($file,  string $mode) {

  /**
   * bzopen opens a bzip2 (.bz2) file for reading or writing.
   **/
}

/**
 * Binary safe bzip2 file read.
 **/

function bzread( resource $bz,  int $length = 1024) {

  /**
   * bzread reads from the given bzip2 file pointer.
   *
   * Reading stops when length (uncompressed) bytes have been read
   * or EOF is reached, whichever comes first.
   **/
}

/**
 * Binary safe bzip2 file write.
 **/

function bzwrite( resource $bz,  string $data, $length = null) {

  /**
   * bzwrite writes a string into the given bzip2 file stream.
   **/
}

/**
 * Return the number of days in a month for a given year and.
 * calendar.
 **/

function cal_days_in_month( int $calendar,  int $month,  int $year) {

  /**
   * This function will return the number of days in the month of
   * year for the specified calendar.
   **/
}

/**
 * Converts from Julian Day Count to a supported calendar.
 **/

function cal_from_jd( int $julian_day,  int $calendar) {

  /**
   * cal_from_jd converts the Julian day given in julian_day into
   * a date of the specified calendar. Supported calendar values
   * are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
   **/
}

/**
 * Returns information about a particular calendar.
 **/

function cal_info( int $calendar = -1) {

  /**
   * cal_info returns information on the specified calendar.
   *
   * Calendar information is returned as an array containing the
   * elements calname, calsymbol, month, abbrevmonth and
   * maxdaysinmonth. The names of the different calendars which can
   * be used as calendar are as follows: 0 or CAL_GREGORIAN -
   * Gregorian Calendar 1 or CAL_JULIAN - Julian Calendar 2 or
   * CAL_JEWISH - Jewish Calendar 3 or CAL_FRENCH - French
   * Revolutionary Calendar
   *
   * If no calendar is specified information on all supported
   * calendars is returned as an array.
   **/
}

/**
 * Converts from a supported calendar to Julian Day Count.
 **/

function cal_to_jd(
     int $calendar
  ,  int $month
  ,  int $day
  ,  int $year
  ) {

  /**
   * cal_to_jd calculates the Julian day count for a date in the
   * specified calendar. Supported calendars are CAL_GREGORIAN,
   * CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
   **/
}

/**
 * Get Unix timestamp for midnight on Easter of a given year.
 **/

function easter_date($year = null,  int $mode = CAL_EASTER_DEFAULT) {

  /**
   * Returns the Unix timestamp corresponding to midnight on
   * Easter of the given year.
   *
   * The date of Easter Day was defined by the Council of Nicaea
   * in AD325 as the Sunday after the first full moon which falls
   * on or after the Spring Equinox. The Equinox is assumed to
   * always fall on 21st March, so the calculation reduces to
   * determining the date of the full moon and the date of the
   * following Sunday. The algorithm used here was introduced
   * around the year 532 by Dionysius Exiguus. Under the Julian
   * Calendar (for years before 1753) a simple 19-year cycle is
   * used to track the phases of the Moon. Under the Gregorian
   * Calendar (for years after 1753 - devised by Clavius and
   * Lilius, and introduced by Pope Gregory XIII in October 1582,
   * and into Britain and its then colonies in September 1752) two
   * correction factors are added to make the cycle more accurate.
   **/
}

/**
 * Get number of days after March 21 on which Easter falls for a.
 * given year.
 **/

function easter_days($year = null,  int $mode = CAL_EASTER_DEFAULT) {

  /**
   * Returns the number of days after March 21 on which Easter
   * falls for a given year. If no year is specified, the current
   * year is assumed.
   *
   * This function can be used instead of easter_date to calculate
   * Easter for years which fall outside the range of Unix
   * timestamps (i.e. before 1970 or after 2037).
   *
   * The date of Easter Day was defined by the Council of Nicaea
   * in AD325 as the Sunday after the first full moon which falls
   * on or after the Spring Equinox. The Equinox is assumed to
   * always fall on 21st March, so the calculation reduces to
   * determining the date of the full moon and the date of the
   * following Sunday. The algorithm used here was introduced
   * around the year 532 by Dionysius Exiguus. Under the Julian
   * Calendar (for years before 1753) a simple 19-year cycle is
   * used to track the phases of the Moon. Under the Gregorian
   * Calendar (for years after 1753 - devised by Clavius and
   * Lilius, and introduced by Pope Gregory XIII in October 1582,
   * and into Britain and its then colonies in September 1752) two
   * correction factors are added to make the cycle more accurate.
   **/
}

/**
 * Converts a date from the French Republican Calendar to a.
 * Julian Day Count.
 **/

function frenchtojd( int $month,  int $day,  int $year) {

  /**
   * Converts a date from the French Republican Calendar to a
   * Julian Day Count.
   *
   * These routines only convert dates in years 1 through 14
   * (Gregorian dates 22 September 1792 through 22 September 1806).
   * This more than covers the period when the calendar was in use.
   **/
}

/**
 * Converts a Gregorian date to Julian Day Count.
 **/

function gregoriantojd( int $month,  int $day,  int $year) {

  /**
   * The valid range for the Gregorian calendar is from November
   * 25, 4714 B.C. to at least December 31, 9999 A.D.
   *
   * Although this function can handle dates all the way back to
   * 4714 B.C., such use may not be meaningful. The Gregorian
   * calendar was not instituted until October 15, 1582 (or October
   * 5, 1582 in the Julian calendar). Some countries did not accept
   * it until much later. For example, Britain converted in 1752,
   * The USSR in 1918 and Greece in 1923. Most European countries
   * used the Julian calendar prior to the Gregorian.
   **/
}

/**
 * Returns the day of the week.
 **/

function jddayofweek( int $julian_day,  int $mode = CAL_DOW_DAYNO) {

  /**
   * Returns the day of the week. Can return a string or an
   * integer depending on the mode.
   **/
}

/**
 * Returns a month name.
 **/

function jdmonthname( int $julian_day,  int $mode) {

  /**
   * Returns a string containing a month name. mode tells this
   * function which calendar to convert the Julian Day Count to,
   * and what type of month names are to be returned. Calendar
   * modes Mode Meaning Values CAL_MONTH_GREGORIAN_SHORT Gregorian
   * - abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
   * Oct, Nov, Dec CAL_MONTH_GREGORIAN_LONG Gregorian January,
   * February, March, April, May, June, July, August, September,
   * October, November, December CAL_MONTH_JULIAN_SHORT Julian -
   * abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct,
   * Nov, Dec CAL_MONTH_JULIAN_LONG Julian January, February,
   * March, April, May, June, July, August, September, October,
   * November, December CAL_MONTH_JEWISH Jewish Tishri, Heshvan,
   * Kislev, Tevet, Shevat, Adar, Adar I, Adar II, Nisan, Iyyar,
   * Sivan, Tammuz, Av, Elul CAL_MONTH_FRENCH French Republican
   * Vendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose,
   * Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor,
   * Extra
   **/
}

/**
 * Converts a Julian Day Count to the French Republican Calendar.
 **/

function jdtofrench( int $julian_day) {

  /**
   * Converts a Julian Day Count to the French Republican
   * Calendar.
   **/
}

/**
 * Converts Julian Day Count to Gregorian date.
 **/

function jdtogregorian( int $julian_day) {

  /**
   * Converts Julian Day Count to a string containing the
   * Gregorian date in the format of "month/day/year".
   **/
}

/**
 * Converts a Julian day count to a Jewish calendar date.
 **/

function jdtojewish(
     int $julian_day
  ,  bool $hebrew = false
  ,  int $flags = 0
  ) {

  /**
   * Converts a Julian Day Count to the Jewish Calendar.
   **/
}

/**
 * Converts a Julian Day Count to a Julian Calendar Date.
 **/

function jdtojulian( int $julian_day) {

  /**
   * Converts Julian Day Count to a string containing the Julian
   * Calendar Date in the format of "month/day/year".
   **/
}

/**
 * Convert Julian Day to Unix timestamp.
 **/

function jdtounix( int $julian_day) {

  /**
   * This function will return a Unix timestamp corresponding to
   * the Julian Day given in julian_day. The time returned is UTC.
   **/
}

/**
 * Converts a date in the Jewish Calendar to Julian Day Count.
 **/

function jewishtojd( int $month,  int $day,  int $year) {

  /**
   * Although this function can handle dates all the way back to
   * the year 1 (3761 B.C.), such use may not be meaningful. The
   * Jewish calendar has been in use for several thousand years,
   * but in the early days there was no formula to determine the
   * start of a month. A new month was started when the new moon
   * was first observed.
   **/
}

/**
 * Converts a Julian Calendar date to Julian Day Count.
 **/

function juliantojd( int $month,  int $day,  int $year) {

  /**
   * Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.
   *
   * Although this function can handle dates all the way back to
   * 4713 B.C., such use may not be meaningful. The calendar was
   * created in 46 B.C., but the details did not stabilize until at
   * least 8 A.D., and perhaps as late at the 4th century. Also,
   * the beginning of a year varied from one culture to another -
   * not all accepted January as the first month.
   *
   * Remember, the current calendar system being used worldwide is
   * the Gregorian calendar. gregoriantojd can be used to convert
   * such dates to their Julian Day count.
   **/
}

/**
 * Convert Unix timestamp to Julian Day.
 **/

function unixtojd($timestamp = null) {

  /**
   * Return the Julian Day for a Unix timestamp (seconds since
   * 1.1.1970), or for the current day if no timestamp is given.
   * Either way, the time is regarded as local time (not UTC).
   **/
}

/**
 * Attempt to load undefined class.
 **/

function __autoload( string $class) {

  /**
   * You can define this function to enable classes autoloading.
   **/
}

/**
 * Creates an alias for a class.
 **/

function class_alias(
     string $class
  ,  string $alias
  ,  bool $autoload = true
  ) {

  /**
   * Creates an alias named alias based on the user defined class
   * class. The aliased class is exactly the same as the original
   * class.
   **/
}

/**
 * Checks if the class has been defined.
 **/

function class_exists( string $class,  bool $autoload = true) {

  /**
   * This function checks whether or not the given class has been
   * defined.
   **/
}

/**
 * Checks if the enum has been defined.
 **/

function enum_exists( string $enum,  bool $autoload = true) {

  /**
   * This function checks whether or not the given enum has been
   * defined.
   **/
}

/**
 * The "Late Static Binding" class name.
 **/

function get_called_class() {

  /**
   * Gets the name of the class the static method is called in.
   **/
}

/**
 * Gets the class methods' names.
 **/

function get_class_methods($object_or_class) {

  /**
   * Gets the class methods names.
   **/
}

/**
 * Get the default properties of the class.
 **/

function get_class_vars( string $class) {

  /**
   * Get the default properties of the given class.
   **/
}

/**
 * Returns the name of the class of an object.
 **/

function get_class( object $object) {

  /**
   * Gets the name of the class of the given object.
   **/
}

/**
 * Returns an array with the name of the defined classes.
 **/

function get_declared_classes() {

  /**
   * Gets the declared classes.
   **/
}

/**
 * Returns an array of all declared interfaces.
 **/

function get_declared_interfaces() {

  /**
   * Gets the declared interfaces.
   **/
}

/**
 * Returns an array of all declared traits.
 **/

function get_declared_traits() {

  /**
   **/
}

/**
 * Returns an array of mangled object properties.
 **/

function get_mangled_object_vars( object $object) {

  /**
   * Returns an &array; whose elements are the object's
   * properties. The keys are the member variable names, with a few
   * notable exceptions: private variables have the class name
   * prepended to the variable name, and protected variables have a
   * * prepended to the variable name. These prepended values have
   * NUL bytes on either side. Uninitialized typed properties are
   * silently discarded.
   **/
}

/**
 * Gets the properties of the given object.
 **/

function get_object_vars( object $object) {

  /**
   * Gets the accessible non-static properties of the given object
   * according to scope.
   **/
}

/**
 * Retrieves the parent class name for object or class.
 **/

function get_parent_class($object_or_class) {

  /**
   * Retrieves the parent class name for object or class.
   **/
}

/**
 * Checks if the interface has been defined.
 **/

function interface_exists( string $interface,  bool $autoload = true) {

  /**
   * Checks if the given interface has been defined.
   **/
}

/**
 * Checks whether the object is of a given type or subtype.
 **/

function is_a(
     mixed $object_or_class
  ,  string $class
  ,  bool $allow_string = false
  ) {

  /**
   * Determines if the given object_or_class is the class object
   * type, or has class as one of its supertypes.
   **/
}

/**
 * Checks if the object has this class as one of its parents or.
 * implements it.
 **/

function is_subclass_of(
     mixed $object_or_class
  ,  string $class
  ,  bool $allow_string = true
  ) {

  /**
   * Checks if the given object_or_class has the class class as
   * one of its parents or implements it.
   **/
}

/**
 * Checks if the class method exists.
 **/

function method_exists($object_or_class,  string $method) {

  /**
   * Checks if the class method exists in the given
   * object_or_class.
   **/
}

/**
 * Checks if the object or class has a property.
 **/

function property_exists($object_or_class,  string $property) {

  /**
   * This function checks if the given property exists in the
   * specified class.
   *
   * As opposed with isset, property_exists returns &true; even if
   * the property has the value &null;.
   **/
}

/**
 * Checks if the trait exists.
 **/

function trait_exists( string $trait,  bool $autoload = true) {

  /**
   **/
}

/**
 * Parsing.
 **/

function CommonMark\Parse( string $content,  int $options) {

  /**
   * Shall parse content
   **/
}

/**
 * Rendering.
 **/

function CommonMark\Render\HTML(
     CommonMark\Node $node
  ,  int $options
  ) {

  /**
   **/
}

/**
 * Rendering.
 **/

function CommonMark\Render\Latex(
     CommonMark\Node $node
  ,  int $options
  ,  int $width
  ) {

  /**
   **/
}

/**
 * Rendering.
 **/

function CommonMark\Render\Man(
     CommonMark\Node $node
  ,  int $options
  ,  int $width
  ) {

  /**
   **/
}

/**
 * Rendering.
 **/

function CommonMark\Render(
     CommonMark\Node $node
  ,  int $options
  ,  int $width
  ) {

  /**
   **/
}

/**
 * Rendering.
 **/

function CommonMark\Render\XML( CommonMark\Node $node,  int $options) {

  /**
   **/
}

/**
 * Generate a globally unique identifier (GUID).
 **/

function com_create_guid() {

  /**
   * Generates a Globally Unique Identifier (GUID).
   *
   * A GUID is generated in the same way as DCE UUID's, except
   * that the Microsoft convention is to enclose a GUID in curly
   * braces.
   **/
}

/**
 * Connect events from a COM object to a PHP object.
 **/

function com_event_sink(
     variant $variant
  ,  object $sink_object
  , $sink_interface = null
  ) {

  /**
   * Instructs COM to sink events generated by variant into the
   * PHP object sink_object.
   *
   * Be careful how you use this feature; if you are doing
   * something similar to the example below, then it doesn't really
   * make sense to run it in a web server context.
   **/
}

/**
 * Returns a handle to an already running instance of a COM.
 * object.
 **/

function com_get_active_object( string $prog_id, $codepage = null) {

  /**
   * com_get_active_object is similar to creating a new instance
   * of a object, except that it will only return an object to your
   * script if the object is already running. OLE applications use
   * something known as the "Running Object Table" to allow
   * well-known applications to be launched only once; this
   * function exposes the COM library function GetActiveObject() to
   * get a handle on a running instance.
   **/
}

/**
 * Loads a Typelib.
 **/

function com_load_typelib(
     string $typelib
  ,  bool $case_insensitive = true
  ) {

  /**
   * Loads a type-library and registers its constants in the
   * engine, as though they were defined using define.
   *
   * Note that it is much more efficient to use the
   * com.typelib-file &php.ini; setting to pre-load and register
   * the constants, although not so flexible.
   *
   * If com.autoregister-typelib is turned on, then PHP will
   * attempt to automatically register the constants associated
   * with a COM object when you instantiate it. This depends on the
   * interfaces provided by the COM object itself, and may not
   * always be possible.
   **/
}

/**
 * Process COM messages, sleeping for up to timeoutms.
 * milliseconds.
 **/

function com_message_pump( int $timeout_milliseconds = 0) {

  /**
   * This function will sleep for up to timeout_milliseconds
   * milliseconds, or until a message arrives in the queue.
   *
   * The purpose of this function is to route COM calls between
   * apartments and handle various synchronization issues. This
   * allows your script to wait efficiently for events to be
   * triggered, while still handling other events or running other
   * code in the background. You should use it in a loop, as
   * demonstrated by the example in the com_event_sink function,
   * until you are finished using event bound COM objects.
   **/
}

/**
 * Print out a PHP class definition for a dispatchable interface.
 **/

function com_print_typeinfo(
    $variant
  , $dispatch_interface = null
  ,  bool $display_sink = false
  ) {

  /**
   * The purpose of this function is to help generate a skeleton
   * class for use as an event sink. You may also use it to
   * generate a dump of any COM object, provided that it supports
   * enough of the introspection interfaces, and that you know the
   * name of the interface you want to display.
   **/
}

/**
 * Returns the absolute value of a variant.
 **/

function variant_abs( mixed $value) {

  /**
   * Returns the absolute value of a variant.
   **/
}

/**
 * "Adds" two variant values together and returns the result.
 **/

function variant_add( mixed $left,  mixed $right) {

  /**
   * Adds left to right using the following rules (taken from the
   * MSDN library), which correspond to those of Visual Basic:
   * Variant Addition Rules If Then Both expressions are of the
   * string type Concatenation One expression is a string type and
   * the other a character Addition One expression is numeric and
   * the other is a string Addition Both expressions are numeric
   * Addition Either expression is NULL NULL is returned Both
   * expressions are empty Integer subtype is returned
   **/
}

/**
 * Performs a bitwise AND operation between two variants.
 **/

function variant_and( mixed $left,  mixed $right) {

  /**
   * Performs a bitwise AND operation. Note that this is slightly
   * different from a regular AND operation.
   **/
}

/**
 * Convert a variant into a new variant object of another type.
 **/

function variant_cast( variant $variant,  int $type) {

  /**
   * This function makes a copy of variant and then performs a
   * variant cast operation to force the copy to have the type
   * given by type.
   *
   * This function wraps VariantChangeType() in the COM library;
   * consult MSDN for more information.
   **/
}

/**
 * Concatenates two variant values together and returns the.
 * result.
 **/

function variant_cat( mixed $left,  mixed $right) {

  /**
   * Concatenates left with right and returns the result.
   *
   * This function is notionally equivalent to $left . $right.
   **/
}

/**
 * Compares two variants.
 **/

function variant_cmp(
     mixed $left
  ,  mixed $right
  ,  int $locale_id = LOCALE_SYSTEM_DEFAULT
  ,  int $flags = 0
  ) {

  /**
   * Compares left with right.
   *
   * This function will only compare scalar values, not arrays or
   * variant records.
   **/
}

/**
 * Returns a variant date representation of a Unix timestamp.
 **/

function variant_date_from_timestamp( int $timestamp) {

  /**
   * Converts timestamp from a unix timestamp value into a variant
   * of type VT_DATE. This allows easier interopability between the
   * unix-ish parts of PHP and COM.
   **/
}

/**
 * Converts a variant date/time value to Unix timestamp.
 **/

function variant_date_to_timestamp( variant $variant) {

  /**
   * Converts variant from a VT_DATE (or similar) value into a
   * Unix timestamp. This allows easier interopability between the
   * Unix-ish parts of PHP and COM.
   **/
}

/**
 * Returns the result from dividing two variants.
 **/

function variant_div( mixed $left,  mixed $right) {

  /**
   * Divides left by right and returns the result.
   **/
}

/**
 * Performs a bitwise equivalence on two variants.
 **/

function variant_eqv( mixed $left,  mixed $right) {

  /**
   * Performs a bitwise equivalence on two variants.
   **/
}

/**
 * Returns the integer portion of a variant.
 **/

function variant_fix( mixed $value) {

  /**
   * Gets the integer portion of a variant.
   **/
}

/**
 * Returns the type of a variant object.
 **/

function variant_get_type( variant $variant) {

  /**
   * Returns the type of a variant object.
   **/
}

/**
 * Converts variants to integers and then returns the result from.
 * dividing them.
 **/

function variant_idiv( mixed $left,  mixed $right) {

  /**
   * Converts left and right to integer values, and then performs
   * integer division.
   **/
}

/**
 * Performs a bitwise implication on two variants.
 **/

function variant_imp( mixed $left,  mixed $right) {

  /**
   * Performs a bitwise implication operation.
   **/
}

/**
 * Returns the integer portion of a variant.
 **/

function variant_int( mixed $value) {

  /**
   * Gets the integer portion of a variant.
   **/
}

/**
 * Divides two variants and returns only the remainder.
 **/

function variant_mod( mixed $left,  mixed $right) {

  /**
   * Divides left by right and returns the remainder.
   **/
}

/**
 * Multiplies the values of the two variants.
 **/

function variant_mul( mixed $left,  mixed $right) {

  /**
   * Multiplies left by right.
   **/
}

/**
 * Performs logical negation on a variant.
 **/

function variant_neg( mixed $value) {

  /**
   * Performs logical negation of value.
   **/
}

/**
 * Performs bitwise not negation on a variant.
 **/

function variant_not( mixed $value) {

  /**
   * Performs bitwise not negation on value and returns the
   * result.
   **/
}

/**
 * Performs a logical disjunction on two variants.
 **/

function variant_or( mixed $left,  mixed $right) {

  /**
   * Performs a bitwise OR operation. Note that this is slightly
   * different from a regular OR operation.
   **/
}

/**
 * Returns the result of performing the power function with two.
 * variants.
 **/

function variant_pow( mixed $left,  mixed $right) {

  /**
   * Returns the result of left to the power of right.
   **/
}

/**
 * Rounds a variant to the specified number of decimal places.
 **/

function variant_round( mixed $value,  int $decimals) {

  /**
   * Returns the value of value rounded to decimals decimal
   * places.
   **/
}

/**
 * Convert a variant into another type "in-place".
 **/

function variant_set_type( variant $variant,  int $type) {

  /**
   * This function is similar to variant_cast except that the
   * variant is modified "in-place"; no new variant is created. The
   * parameters for this function have identical meaning to those
   * of variant_cast.
   **/
}

/**
 * Assigns a new value for a variant object.
 **/

function variant_set( variant $variant,  mixed $value) {

  /**
   * Converts value to a variant and assigns it to the variant
   * object; no new variant object is created, and the old value of
   * variant is freed/released.
   **/
}

/**
 * Subtracts the value of the right variant from the left variant.
 * value.
 **/

function variant_sub( mixed $left,  mixed $right) {

  /**
   * Subtracts right from left.
   **/
}

/**
 * Performs a logical exclusion on two variants.
 **/

function variant_xor( mixed $left,  mixed $right) {

  /**
   * Performs a logical exclusion.
   **/
}

/**
 * Casting.
 **/

function Componere\cast( Type $type, $object) {

  /**
   **/
}

/**
 * Casting.
 **/

function Componere\cast_by_ref( Type $type, $object) {

  /**
   **/
}

/**
 * Check for alphanumeric character(s).
 **/

function ctype_alnum( mixed $text) {

  /**
   * Checks if all of the characters in the provided string, text,
   * are alphanumeric.
   **/
}

/**
 * Check for alphabetic character(s).
 **/

function ctype_alpha( mixed $text) {

  /**
   * Checks if all of the characters in the provided string, text,
   * are alphabetic. In the standard C locale letters are just
   * [A-Za-z] and ctype_alpha is equivalent to (ctype_upper($text)
   * || ctype_lower($text)) if $text is just a single character,
   * but other languages have letters that are considered neither
   * upper nor lower case.
   **/
}

/**
 * Check for control character(s).
 **/

function ctype_cntrl( mixed $text) {

  /**
   * Checks if all of the characters in the provided string, text,
   * are control characters. Control characters are e.g. line feed,
   * tab, escape.
   **/
}

/**
 * Check for numeric character(s).
 **/

function ctype_digit( mixed $text) {

  /**
   * Checks if all of the characters in the provided string, text,
   * are numerical.
   **/
}

/**
 * Check for any printable character(s) except space.
 **/

function ctype_graph( mixed $text) {

  /**
   * Checks if all of the characters in the provided string, text,
   * creates visible output.
   **/
}

/**
 * Check for lowercase character(s).
 **/

function ctype_lower( mixed $text) {

  /**
   * Checks if all of the characters in the provided string, text,
   * are lowercase letters.
   **/
}

/**
 * Check for printable character(s).
 **/

function ctype_print( mixed $text) {

  /**
   * Checks if all of the characters in the provided string, text,
   * are printable.
   **/
}

/**
 * Check for any printable character which is not whitespace or.
 * an alphanumeric character.
 **/

function ctype_punct( mixed $text) {

  /**
   * Checks if all of the characters in the provided string, text,
   * are punctuation character.
   **/
}

/**
 * Check for whitespace character(s).
 **/

function ctype_space( mixed $text) {

  /**
   * Checks if all of the characters in the provided string, text,
   * creates whitespace.
   **/
}

/**
 * Check for uppercase character(s).
 **/

function ctype_upper( mixed $text) {

  /**
   * Checks if all of the characters in the provided string, text,
   * are uppercase characters.
   **/
}

/**
 * Check for character(s) representing a hexadecimal digit.
 **/

function ctype_xdigit( mixed $text) {

  /**
   * Checks if all of the characters in the provided string, text,
   * are hexadecimal 'digits'.
   **/
}

/**
 * Bind variables to a prepared statement as parameters.
 **/

function cubrid_bind(
     resource $req_identifier
  ,  int $bind_index
  ,  mixed $bind_value
  ,  string $bind_value_type
  ) {

  /**
   * The cubrid_bind function is used to bind values to a
   * corresponding named or question mark placeholder in the SQL
   * statement that was passed to cubrid_prepare. If
   * bind_value_type is not given, string will be the default.
   *
   * If the type of data to be bound is BLOB/CLOB, CUBRID will try
   * to map the data as a PHP stream. If the actually bind value
   * type is not stream, CUBRID will convert it to string, and use
   * it as the full path and file name of a file on the client
   * filesystem.
   *
   * If the type of data to be bound explicitly is ENUM, the
   * bind_value argument should be the enum element which is in
   * string format.
   *
   * In CUBRID shard envrioment, the bind_value_type must be
   * included in the cubrid_bind function.
   *
   * The following table shows the types of substitute values.
   *
   * CUBRID Bind Date Types Support Bind Type Corresponding SQL
   * Type Supported STRING CHAR, VARCHAR NCHAR NCHAR, NVARCHAR BIT
   * BIT, VARBIT NUMERIC or NUMBER SHORT, INT, NUMERIC FLOAT FLOAT
   * DOUBLE DOUBLE TIME TIME DATE DATE TIMESTAMP TIMESTAMP OBJECT
   * OBJECT ENUM ENUM BLOB BLOB CLOB CLOB NULL NULL Not supported
   * SET SET MULTISET MULTISET SEQUENCE SEQUENCE
   **/
}

/**
 * Close the request handle.
 **/

function cubrid_close_prepare( resource $req_identifier) {

  /**
   * The cubrid_close_prepare function closes the request handle
   * given by the req_identifier argument, and releases the memory
   * region related to the handle. It is an alias of
   * cubrid_close_request.
   **/
}

/**
 * Close the request handle.
 **/

function cubrid_close_request( resource $req_identifier) {

  /**
   * The cubrid_close_request function closes the request handle
   * given by the req_identifier argument, and releases the memory
   * region related to the handle. It is an alias of
   * cubrid_close_prepare.
   **/
}

/**
 * Get contents of collection type column using OID.
 **/

function cubrid_col_get(
     resource $conn_identifier
  ,  string $oid
  ,  string $attr_name
  ) {

  /**
   * The cubrid_col_get function is used to get contents of the
   * elements of the collection type (set, multiset, sequence)
   * attribute you requested as an array.
   **/
}

/**
 * Get the number of elements in collection type column using OID.
 **/

function cubrid_col_size(
     resource $conn_identifier
  ,  string $oid
  ,  string $attr_name
  ) {

  /**
   * The cubrid_col_size function is used to get the number of
   * elements in a collection type (set, multiset, sequence)
   * attribute.
   **/
}

/**
 * Get the column names in result.
 **/

function cubrid_column_names( resource $req_identifier) {

  /**
   * The cubrid_column_names function is used to get the column
   * names of the query result by using req_identifier.
   **/
}

/**
 * Get column types in result.
 **/

function cubrid_column_types( resource $req_identifier) {

  /**
   * The cubrid_column_types function gets column types of query
   * results by using req_identifier.
   **/
}

/**
 * Commit a transaction.
 **/

function cubrid_commit( resource $conn_identifier) {

  /**
   * The cubrid_commit function is used to execute commit on the
   * transaction pointed by conn_identifier, currently in progress.
   * Connection to the server is closed after the cubrid_commit
   * function is called; However, the connection handle is still
   * valid.
   *
   * In CUBRID PHP, auto-commit mode is disabled by default for
   * transaction management. You can set it by using
   * cubrid_set_autocommit. You can get its status by using
   * cubrid_get_autocommit. Before you start a transaction,
   * remember to disable the auto-commit mode.
   **/
}

/**
 * Establish the environment for connecting to CUBRID server.
 **/

function cubrid_connect_with_url(
     string $conn_url
  ,  string $userid
  ,  string $passwd
  ,  bool $new_link = false
  ) {

  /**
   * The cubrid_connect_with_url function is used to establish the
   * environment for connecting to your server by using connection
   * information passed with an url string argument. If the HA
   * feature is enabled in CUBRID, you must specify the connection
   * information of the standby server, which is used for failover
   * when failure occurs, in the url string argument of this
   * function. If the user name and password is not given, then the
   * "PUBLIC" connection will be made by default.
   *
   * <url> ::=
   * CUBRID:<host>:<db_name>:<db_user>:<db_password>:[?<properties>]
   *
   * <properties> ::= <property> [&<property>]
   *
   * <properties> ::= alhosts=<alternative_hosts>[ &rctime=<time>]
   *
   * <properties> ::= login_timeout=<milli_sec>
   *
   * <properties> ::= query_timeout=<milli_sec>
   *
   * <properties> ::= disconnect_on_query_timeout=true|false
   *
   * <alternative_hosts> ::= <standby_broker1_host>:<port>
   * [,<standby_broker2_host>:<port>]
   *
   * <host> := HOSTNAME | IP_ADDR
   *
   * <time> := SECOND
   *
   * <milli_sec> := MILLI SECOND
   *
   * host : A host name or IP address of the master database
   * db_name : A name of the database db_user : A name of the
   * database user db_password : A database user password alhosts :
   * Specifies the broker information of the standby server, which
   * is used for failover when it is impossible to connect to the
   * active server. You can specify multiple brokers for failover,
   * and the connection to the brokers is attempted in the order
   * listed in alhosts rctime : An interval between the attempts to
   * connect to the active broker in which failure occurred. After
   * a failure occurs, the system connects to the broker specified
   * by althosts (failover), terminates the transaction, and then
   * attempts to connect to the active broker of the master
   * database at every rctime. The default value is 600 seconds.
   * login_timeout : Timeout value (unit: msec.) for database
   * login. The default value is 0, which means infinite
   * postponement. query_timeout : Timeout value (unit: msec.) for
   * query request. Upon timeout, a message to cancel requesting a
   * query transferred to server is sent. The return value can
   * depend on the disconnect_on_query_timeout configuration; even
   * though the message to cancel a request is sent to server, that
   * request may succeed. disconnect_on_query_timeout : Configures
   * a value whether to immediately return an error of function
   * being executed upon timeout. The default value is false.
   *
   * ? and : that are used as identifiers in PHP connection URL
   * can't be included in the password. The following is an example
   * of a password that is invalid to use as connection URL because
   * it contains "?:".
   *
   * $url =
   * "CUBRID:localhost:33000:tdb:dba:12?:?login_timeout=100";
   *
   * Passwords that contain ? or : may be passed as a separate
   * parameter.
   *
   * $url = "CUBRID:localhost:33000:tbd:::?login_timeout=100";
   *
   * $conn = cubrid_connect_with_url($url, "dba", "12?");
   *
   * If user or password is empty,you can't delete ":",the
   * following is an example.
   *
   * $url = "CUBRID:localhost:33000:demodb:::";
   **/
}

/**
 * Open a connection to a CUBRID Server.
 **/

function cubrid_connect(
     string $host
  ,  int $port
  ,  string $dbname
  ,  string $userid
  ,  string $passwd
  ,  bool $new_link = false
  ) {

  /**
   * The cubrid_connect function is used to establish the
   * environment for connecting to your server by using your server
   * address, port number, database name, user name, and password.
   * If the user name and password is not given, then the "PUBLIC"
   * connection will be made by default.
   **/
}

/**
 * Get OID of the current cursor location.
 **/

function cubrid_current_oid( resource $req_identifier) {

  /**
   * The cubrid_current_oid function is used to get the oid of the
   * current cursor location from the query result. To use
   * cubrid_current_oid, the query executed must be a updatable
   * query, and the CUBRID_INCLUDE_OID option must be included
   * during the query execution.
   **/
}

/**
 * Close a database connection.
 **/

function cubrid_disconnect( resource $conn_identifier) {

  /**
   * The cubrid_disconnect function closes the connection handle
   * and disconnects from server. If any request handle is not
   * closed at this point, it will be closed. It is similar to the
   * CUBRID MySQL compatible function cubrid_close.
   **/
}

/**
 * Delete an instance using OID.
 **/

function cubrid_drop( resource $conn_identifier,  string $oid) {

  /**
   * The cubrid_drop function is used to delete an instance from
   * database by using the oid of the instance.
   **/
}

/**
 * Get the facility code of error.
 **/

function cubrid_error_code_facility() {

  /**
   * The cubrid_error_code_facility function is used to get the
   * facility code (level in which the error occurred) from the
   * error code of the error that occurred during the API
   * execution. Usually, you can get the error code when API
   * returns false as its return value.
   **/
}

/**
 * Get error code for the most recent function call.
 **/

function cubrid_error_code() {

  /**
   * The cubrid_error_code function is used to get the error code
   * of the error that occurred during the API execution. Usually,
   * it gets the error code when API returns false as its return
   * value.
   **/
}

/**
 * Get last error message for the most recent function call.
 **/

function cubrid_error_msg() {

  /**
   * The cubrid_error_msg function is used to get the error
   * message that occurred during the use of CUBRID API. Usually,
   * it gets error message when API returns false as its return
   * value.
   **/
}

/**
 * Execute a prepared SQL statement.
 **/

function cubrid_execute(
     resource $conn_identifier
  ,  string $sql
  ,  int $option = 0
  ) {

  /**
   * The cubrid_execute function is used to execute the given SQL
   * statement. It executes the query by using conn_identifier and
   * SQL, and then returns the request identifier created. It is
   * used for simple execution of query, where the parameter
   * binding is not needed. In addition, the cubrid_execute
   * function is used to execute the prepared statement by means of
   * cubrid_prepare and cubrid_bind. At this time, you need to
   * specify arguments of request_identifier and option.
   *
   * The option is used to determine whether to get OID after
   * query execution and whether to execute the query in
   * synchronous or asynchronous mode. CUBRID_INCLUDE_OID and
   * CUBRID_ASYNC (or CUBRID_EXEC_QUERY_ALL if you want to execute
   * multiple SQL statements) can be specified by using a bitwise
   * OR operator. If not specified, neither of them isselected. If
   * the flag CUBRID_EXEC_QUERY_ALL is set, a synchronous mode
   * (sync_mode) is used to retrieve query results, and in such
   * cases the following rules are applied:
   *
   * The return value is the result of the first query. If an
   * error occurs in any query, the execution is processed as a
   * failure. In a query composed of q1 q2 q3, if an error occurs
   * in q2 after q1 succeeds the execution, the result of q1
   * remains valid. That is, the previous successful query
   * executions are not rolled back when an error occurs. If a
   * query is executed successfully, the result of the second query
   * can be obtained using cubrid_next_result.
   *
   * If the first argument is request_identifier to execute the
   * cubrid_prepare function, you can specify an option,
   * CUBRID_ASYNC only.
   **/
}

/**
 * Fetch the next row from a result set.
 **/

function cubrid_fetch( resource $result,  int $type = CUBRID_BOTH) {

  /**
   * The cubrid_fetch function is used to get a single row from
   * the query result. The cursor automatically moves to the next
   * row after getting the result.
   **/
}

/**
 * Free the memory occupied by the result data.
 **/

function cubrid_free_result( resource $req_identifier) {

  /**
   * This function frees the memory occupied by the result data.
   * It returns &true; on success or &false; on failure. Note that
   * it can only frees the client fetch buffer now, and if you want
   * free all memory, use function cubrid_close_request.
   **/
}

/**
 * Get auto-commit mode of the connection.
 **/

function cubrid_get_autocommit( resource $conn_identifier) {

  /**
   * The cubrid_get_autocommit function is used to get the status
   * of CUBRID database connection auto-commit mode.
   *
   * For CUBRID 8.4.0, auto-commit mode is disabled by default for
   * transaction management.
   *
   * For CUBRID 8.4.1, auto-commit mode is enabled by default for
   * transaction management.
   **/
}

/**
 * Return the current CUBRID connection charset.
 **/

function cubrid_get_charset( resource $conn_identifier) {

  /**
   * This function returns the current CUBRID connection charset
   * and is similar to the CUBRID MySQL compatible function
   * cubrid_client_encoding.
   **/
}

/**
 * Get the class name using OID.
 **/

function cubrid_get_class_name(
     resource $conn_identifier
  ,  string $oid
  ) {

  /**
   * The cubrid_get_class_name function is used to get the class
   * name from oid. It doesn't work when selecting data from the
   * system tables, for example db_class.
   **/
}

/**
 * Return the client library version.
 **/

function cubrid_get_client_info() {

  /**
   * This function returns a string that represents the client
   * library version.
   **/
}

/**
 * Returns the CUBRID database parameters.
 **/

function cubrid_get_db_parameter( resource $conn_identifier) {

  /**
   * This function returns the CUBRID database
   * parameters,&return.falseforfailure;. It returns an associative
   * array with the values for the following parameters:
   *
   * PARAM_ISOLATION_LEVEL PARAM_LOCK_TIMEOUT
   * PARAM_MAX_STRING_LENGTH PARAM_AUTO_COMMIT
   *
   * Database parameters Parameter Description
   * PARAM_ISOLATION_LEVEL The transaction isolation level.
   * LOCK_TIMEOUT CUBRID provides the lock timeout feature, which
   * sets the waiting time (in seconds) for the lock until the
   * transaction lock setting is allowed. The default value of the
   * lock_timeout_in_secs parameter is -1, which means the
   * application client will wait indefinitely until the
   * transaction lock is allowed. PARAM_AUTO_COMMIT In CUBRID PHP,
   * auto-commit mode is disabled by default for transaction
   * management. It can be set by using cubrid_set_autocommit.
   *
   * The following table shows the isolation levels from 1 to 6.
   * It consists of table schema (row) and isolation level: Levels
   * of Isolation Supported by CUBRID Name Description SERIALIZABLE
   * (6) In this isolation level, problems concerning concurrency
   * (e.g. dirty read, non-repeatable read, phantom read, etc.) do
   * not occur. REPEATABLE READ CLASS with REPEATABLE READ
   * INSTANCES (5) Another transaction T2 cannot update the schema
   * of table A while transaction T1 is viewing table A.
   * Transaction T1 may experience phantom read for the record R
   * that was inserted by another transaction T2 when it is
   * repeatedly retrieving a specific record. REPEATABLE READ CLASS
   * with READ COMMITTED INSTANCES (or CURSOR STABILITY) (4)
   * Another transaction T2 cannot update the schema of table A
   * while transaction T1 is viewing table A. Transaction T1 may
   * experience R read (non-repeatable read) that was updated and
   * committed by another transaction T2 when it is repeatedly
   * retrieving the record R. REPEATABLE READ CLASS with READ
   * UNCOMMITTED INSTANCES (3) Default isolation level. Another
   * transaction T2 cannot update the schema of table A while
   * transaction T1 is viewing table A. Transaction T1 may
   * experience R' read (dirty read) for the record that was
   * updated but not committed by another transaction T2. READ
   * COMMITTED CLASS with READ COMMITTED INSTANCES (2) Transaction
   * T1 may experience A' read (non-repeatable read) for the table
   * that was updated and committed by another transaction T2 while
   * it is viewing table A repeatedly. Transaction T1 may
   * experience R' read (non-repeatable read) for the record that
   * was updated and committed by another transaction T2 while it
   * is retrieving the record R repeatedly. READ COMMITTED CLASS
   * with READ UNCOMMITTED INSTANCES (1) Transaction T1 may
   * experience A' read (non-repeatable read) for the table that
   * was updated and committed by another transaction T2 while it
   * is repeatedly viewing table A. Transaction T1 may experience
   * R' read (dirty read) for the record that was updated but not
   * committed by another transaction T2.
   **/
}

/**
 * Get the query timeout value of the request.
 **/

function cubrid_get_query_timeout( resource $req_identifier) {

  /**
   * The cubrid_get_query_timeout function is used to get the
   * query timeout of the request.
   **/
}

/**
 * Return the CUBRID server version.
 **/

function cubrid_get_server_info( resource $conn_identifier) {

  /**
   * This function returns a string that represents the CUBRID
   * server version.
   **/
}

/**
 * Get a column using OID.
 **/

function cubrid_get(
     resource $conn_identifier
  ,  string $oid
  ,  mixed $attr
  ) {

  /**
   * The cubrid_get function is used to get the attribute of the
   * instance of the given oid. You can get single attribute by
   * using string data type for the attr argument, or many
   * attributes by using array data type for the attr argument.
   **/
}

/**
 * Return the ID generated for the last updated AUTO_INCREMENT.
 * column.
 **/

function cubrid_insert_id( resource $conn_identifier) {

  /**
   * The cubrid_insert_id function retrieves the ID generated for
   * the AUTO_INCREMENT column which is updated by the previous
   * INSERT query. It returns 0 if the previous query does not
   * generate new rows, or FALSE on failure.
   *
   * CUBRID supports AUTO_INCREMENT for more than one columns in a
   * table. In most cases, there will be a single AUTO_INCREMENT
   * column in a table. If there are multiple AUTO_INCREMENT
   * columns, this function should not be used even if it will
   * return a value.
   **/
}

/**
 * Check whether the instance pointed by OID exists.
 **/

function cubrid_is_instance( resource $conn_identifier,  string $oid) {

  /**
   * The cubrid_is_instance function is used to check whether the
   * instance pointed by the given oid exists or not.
   **/
}

/**
 * Close BLOB/CLOB data.
 **/

function cubrid_lob_close( array $lob_identifier_array) {

  /**
   * cubrid_lob_close is used to close all BLOB/CLOB returned from
   * cubrid_lob_get.
   **/
}

/**
 * Export BLOB/CLOB data to file.
 **/

function cubrid_lob_export(
     resource $conn_identifier
  ,  resource $lob_identifier
  ,  string $path_name
  ) {

  /**
   * cubrid_lob_export is used to get BLOB/CLOB data from CUBRID
   * database, and saves its contents to a file. To use this
   * function, you must use cubrid_lob_get first to get BLOB/CLOB
   * info from CUBRID.
   **/
}

/**
 * Get BLOB/CLOB data.
 **/

function cubrid_lob_get( resource $conn_identifier,  string $sql) {

  /**
   * cubrid_lob_get is used to get BLOB/CLOB meta info from CUBRID
   * database, CUBRID gets BLOB/CLOB by executing the SQL
   * statement, and returns all LOBs as a resource array. Be sure
   * that the SQL retrieves only one column and its data type is
   * BLOB or CLOB.
   *
   * Remember to use cubrid_lob_close to release the LOBs if you
   * don't need it any more.
   **/
}

/**
 * Read BLOB/CLOB data and send straight to browser.
 **/

function cubrid_lob_send(
     resource $conn_identifier
  ,  resource $lob_identifier
  ) {

  /**
   * cubrid_lob_send reads BLOB/CLOB data and passes it straight
   * through to the browser. To use this function, you must use
   * cubrid_lob_get first to get BLOB/CLOB info from CUBRID.
   **/
}

/**
 * Get BLOB/CLOB data size.
 **/

function cubrid_lob_size( resource $lob_identifier) {

  /**
   * cubrid_lob_size is used to get BLOB/CLOB data size.
   **/
}

/**
 * Bind a lob object or a string as a lob object to a prepared.
 * statement as parameters.
 **/

function cubrid_lob2_bind(
     resource $req_identifier
  ,  int $bind_index
  ,  mixed $bind_value
  ,  string $bind_value_type
  ) {

  /**
   * The cubrid_lob2_bind function is used to bind BLOB/CLOB datas
   * to a corresponding question mark placeholder in the SQL
   * statement that was passed to cubrid_prepare. If
   * bind_value_type is not given, string will be "BLOB" as the
   * default. But if you use cubrid_lob2_new before,
   * bind_value_type will be consistent with type in
   * cubrid_lob2_new as the default.
   **/
}

/**
 * Close LOB object.
 **/

function cubrid_lob2_close( resource $lob_identifier) {

  /**
   * The cubrid_lob2_close function is used to close LOB object
   * returned from cubrid_lob2_new or got from the result set.
   **/
}

/**
 * Export the lob object to a file.
 **/

function cubrid_lob2_export(
     resource $lob_identifier
  ,  string $file_name
  ) {

  /**
   * The cubrid_lob2_export function is used to save the contents
   * of BLOB/CLOB data to a file. To use this function, you must
   * use cubrid_lob2_new or fetch a lob object from CUBRID database
   * first. If the file already exists, the operation will fail.
   * This function will not influence the cursor position of the
   * lob object. It operates the entire lob object.
   **/
}

/**
 * Import BLOB/CLOB data from a file.
 **/

function cubrid_lob2_import(
     resource $lob_identifier
  ,  string $file_name
  ) {

  /**
   * The cubrid_lob2_import function is used to save the contents
   * of BLOB/CLOB data from a file. To use this function, you must
   * use cubrid_lob2_new or fetch a lob object from CUBRID database
   * first. If the file already exists, the operation will fail.
   * This function will not influence the cursor position of the
   * lob object. It operates the entire lob object.
   **/
}

/**
 * Create a lob object.
 **/

function cubrid_lob2_new(
     resource $conn_identifier
  ,  string $type = "BLOB"
  ) {

  /**
   * The cubrid_lob2_new function is used to create a lob object
   * (both BLOB and CLOB). This function should be used before you
   * bind a lob object.
   **/
}

/**
 * Read from BLOB/CLOB data.
 **/

function cubrid_lob2_read( resource $lob_identifier,  int $len) {

  /**
   * The cubrid_lob2_read function reads len bytes from the LOB
   * data and returns the bytes read.
   **/
}

/**
 * Move the cursor of a lob object.
 **/

function cubrid_lob2_seek(
     resource $lob_identifier
  ,  int $offset
  ,  int $origin = CUBRID_CURSOR_CURRENT
  ) {

  /**
   * The cubrid_lob2_seek function is used to move the cursor
   * position of a lob object by the value set in the offset
   * argument, to the direction set in the origin argument.
   *
   * To set the origin argument, you can use CUBRID_CURSOR_FIRST
   * to set the cursor position moving forward offset units from
   * the first beginning. In this case, offset must be a positive
   * value.
   *
   * If you use CUBRID_CURSOR_CURRENT for origin, you can move
   * forward or backward. and offset can be positive or negative.
   *
   * If you use CUBRID_CURSOR_LAST for origin, you can move
   * backward offset units from the end of LOB object and offset
   * only can be positive.
   **/
}

/**
 * Move the cursor of a lob object.
 **/

function cubrid_lob2_seek64(
     resource $lob_identifier
  ,  string $offset
  ,  int $origin = CUBRID_CURSOR_CURRENT
  ) {

  /**
   * The cubrid_lob2_seek64 function is used to move the cursor
   * position of a lob object by the value set in the offset
   * argument, to the direction set in the origin argument. If the
   * offset you want to move is larger than an integer data can be
   * stored, you can use this function.
   *
   * To set the origin argument, you can use CUBRID_CURSOR_FIRST
   * to set the cursor position moving forward offset units from
   * the first beginning. In this case, offset must be a positive
   * value.
   *
   * If you use CUBRID_CURSOR_CURRENT for origin, you can move
   * forward or backward. and offset can be positive or negative.
   *
   * If you use CUBRID_CURSOR_LAST for origin, you can move
   * backward offset units from the end of LOB object and offset
   * only can be positive.
   *
   * If you use this function to move the cursor position of the
   * lob object, you should pass offset as a string.
   **/
}

/**
 * Get a lob object's size.
 **/

function cubrid_lob2_size( resource $lob_identifier) {

  /**
   * The cubrid_lob2_size function is used to get the size of a
   * lob object.
   **/
}

/**
 * Get a lob object's size.
 **/

function cubrid_lob2_size64( resource $lob_identifier) {

  /**
   * The cubrid_lob2_size64 function is used to get the size of a
   * lob object. If the size of a lob object is larger than an
   * integer data can be stored, you can use this function and it
   * will return the size as a string.
   **/
}

/**
 * Tell the cursor position of the LOB object.
 **/

function cubrid_lob2_tell( resource $lob_identifier) {

  /**
   * The cubrid_lob2_tell function is used to tell the cursor
   * position of the LOB object.
   **/
}

/**
 * Tell the cursor position of the LOB object.
 **/

function cubrid_lob2_tell64( resource $lob_identifier) {

  /**
   * The cubrid_lob2_tell64 function is used to tell the cursor
   * position of the LOB object. If the size of a lob object is
   * larger than an integer data can be stored, you can use this
   * function and it will return the position information as a
   * string.
   **/
}

/**
 * Write to a lob object.
 **/

function cubrid_lob2_write( resource $lob_identifier,  string $buf) {

  /**
   * The cubrid_lob2_write function reads as much as data from buf
   * and stores it to the LOB object. Note that this function can
   * only append characters now.
   **/
}

/**
 * Set a read lock on the given OID.
 **/

function cubrid_lock_read( resource $conn_identifier,  string $oid) {

  /**
   * The cubrid_lock_read function is used to put read lock on the
   * instance pointed by given oid.
   **/
}

/**
 * Set a write lock on the given OID.
 **/

function cubrid_lock_write( resource $conn_identifier,  string $oid) {

  /**
   * The cubrid_lock_write function is used to put write lock on
   * the instance pointed by the given oid.
   **/
}

/**
 * Move the cursor in the result.
 **/

function cubrid_move_cursor(
     resource $req_identifier
  ,  int $offset
  ,  int $origin = CUBRID_CURSOR_CURRENT
  ) {

  /**
   * The cubrid_move_cursor function is used to move the current
   * cursor location of req_identifier by the value set in the
   * offset argument, to the direction set in the origin argument.
   * To set the origin argument, you can use CUBRID_CURSOR_FIRST
   * for the first part of the result, CUBRID_CURSOR_CURRENT for
   * the current location of the result, or CUBRID_CURSOR_LAST for
   * the last part of the result. If origin argument is not
   * explicitly designated, then the function uses
   * CUBRID_CURSOR_CURRENT as its default value.
   *
   * If the value of cursor movement range goes over the valid
   * limit, then the cursor moves to the next location after the
   * valid range for the cursor. For example, if you move 20 units
   * in the result with the size of 10, then the cursor will move
   * to 11th place and return CUBRID_NO_MORE_DATA.
   **/
}

/**
 * Get result of next query when executing multiple SQL.
 * statements.
 **/

function cubrid_next_result( resource $result) {

  /**
   * The cubrid_next_result function is used to get results of
   * next query if multiple SQL statements are executed and
   * CUBRID_EXEC_QUERY_ALL flag is set upon cubrid_execute.
   **/
}

/**
 * Return the number of columns in the result set.
 **/

function cubrid_num_cols( resource $result) {

  /**
   * The cubrid_num_cols function is used to get the number of
   * columns from the query result. It can only be used when the
   * query executed is a SELECT statement.
   **/
}

/**
 * Get the number of rows in the result set.
 **/

function cubrid_num_rows( resource $result) {

  /**
   * The cubrid_num_rows function is used to get the number of
   * rows from the query result. It can be used for SELECT
   * statements. For INSERT, UPDATE, or DELETE queries, use the
   * cubrid_affected_rows function.
   *
   * Note: The cubrid_num_rows function can only be used for
   * synchronous query; it returns 0 when it is used for
   * asynchronous query.
   **/
}

/**
 * Open a persistent connection to CUBRID server.
 **/

function cubrid_pconnect_with_url(
     string $conn_url
  ,  string $userid
  ,  string $passwd
  ) {

  /**
   * Establishes a persistent connection to a CUBRID server.
   *
   * cubrid_pconnect_with_url acts very much like
   * cubrid_connect_with_url with two major differences.
   *
   * First, when connecting, the function would first try to find
   * a (persistent) link that's already open with the same host,
   * port, dbname and userid. If one is found, an identifier for it
   * will be returned instead of opening a new connection.
   *
   * Second, the connection to the SQL server will not be closed
   * when the execution of the script ends. Instead, the link will
   * remain open for future use (cubrid_close or cubrid_disconnect
   * will not close links established by cubrid_pconnect_with_url).
   *
   * This type of link is therefore called 'persistent'.
   *
   * <url> ::=
   * CUBRID:<host>:<db_name>:<db_user>:<db_password>:[?<properties>]
   *
   * <properties> ::= <property> [&<property>]
   *
   * <properties> ::= alhosts=<alternative_hosts>[ &rctime=<time>]
   *
   * <properties> ::= login_timeout=<milli_sec>
   *
   * <properties> ::= query_timeout=<milli_sec>
   *
   * <properties> ::= disconnect_on_query_timeout=true|false
   *
   * <alternative_hosts> ::= <standby_broker1_host>:<port>
   * [,<standby_broker2_host>:<port>]
   *
   * <host> := HOSTNAME | IP_ADDR
   *
   * <time> := SECOND
   *
   * <milli_sec> := MILLI SECOND
   *
   * host : A host name or IP address of the master database
   * db_name : A name of the database db_user : A name of the
   * database user db_password : A database user password alhosts :
   * Specifies the broker information of the standby server, which
   * is used for failover when it is impossible to connect to the
   * active server. You can specify multiple brokers for failover,
   * and the connection to the brokers is attempted in the order
   * listed in alhosts rctime : An interval between the attempts to
   * connect to the active broker in which failure occurred. After
   * a failure occurs, the system connects to the broker specified
   * by althosts (failover), terminates the transaction, and then
   * attempts to connect to the active broker of the master
   * database at every rctime. The default value is 600 seconds.
   * login_timeout : Timeout value (unit: msec.) for database
   * login. The default value is 0, which means infinite
   * postponement. query_timeout : Timeout value (unit: msec.) for
   * query request. Upon timeout, a message to cancel requesting a
   * query transferred to server is sent. The return value can
   * depend on the disconnect_on_query_timeout configuration; even
   * though the message to cancel a request is sent to server, that
   * request may succeed. disconnect_on_query_timeout : Configures
   * a value whether to immediately return an error of function
   * being executed upon timeout. The default value is false.
   *
   * ? and : that are used as identifiers in PHP connection URL
   * can't be included in the password. The following is an example
   * of a password that is invalid to use as connection URL because
   * it contains "?:".
   *
   * $url =
   * "CUBRID:localhost:33000:tdb:dba:12?:?login_timeout=100";
   *
   * Passwords that contain ? or : may be passed as a separate
   * parameter.
   *
   * $url = "CUBRID:localhost:33000:tbd:::?login_timeout=100";
   *
   * $conn = cubrid_pconnect_with_url ($url, "dba", "12?");
   *
   * If user or password is empty,you can't delete ":",the
   * following is an example.
   *
   * $url = "CUBRID:localhost:33000:demodb:::";
   **/
}

/**
 * Open a persistent connection to a CUBRID server.
 **/

function cubrid_pconnect(
     string $host
  ,  int $port
  ,  string $dbname
  ,  string $userid
  ,  string $passwd
  ) {

  /**
   * Establishes a persistent connection to a CUBRID server.
   *
   * cubrid_pconnect acts very much like cubrid_connect with two
   * major differences.
   *
   * First, when connecting, the function would first try to find
   * a (persistent) link that's already open with the same host,
   * port, dbname and userid. If one is found, an identifier for it
   * will be returned instead of opening a new connection.
   *
   * Second, the connection to the SQL server will not be closed
   * when the execution of the script ends. Instead, the link will
   * remain open for future use (cubrid_close or cubrid_disconnect
   * will not close links established by cubrid_pconnect).
   *
   * This type of link is therefore called 'persistent'.
   **/
}

/**
 * Prepare a SQL statement for execution.
 **/

function cubrid_prepare(
     resource $conn_identifier
  ,  string $prepare_stmt
  ,  int $option = 0
  ) {

  /**
   * The cubrid_prepare function is a sort of API which represents
   * SQL statements compiled previously to a given connection
   * handle. This pre-compiled SQL statement will be included in
   * the cubrid_prepare.
   *
   * Accordingly, you can use this statement effectively to
   * execute several times repeatedly or to process long data. Only
   * a single statement can be used and a parameter may put a
   * question mark (?) to appropriate area in the SQL statement.
   * Add a parameter when you bind a value in the VALUES clause of
   * INSERT statement or in the WHERE clause. Note that it is
   * allowed to bind a value to a MARK(?) by using the cubrid_bind
   * function only.
   **/
}

/**
 * Update a column using OID.
 **/

function cubrid_put(
     resource $conn_identifier
  ,  string $oid
  ,  string $attr
  ,  mixed $value
  ) {

  /**
   * The cubrid_put function is used to update an attribute of the
   * instance of the given oid.
   *
   * You can update single attribute by using string data type to
   * set attr. In such case, you can use integer, floating point or
   * string type data for the value argument. To update multiple
   * number of attributes, you can disregard the attr argument, and
   * set value argument with associative array data type.
   **/
}

/**
 * Roll back a transaction.
 **/

function cubrid_rollback( resource $conn_identifier) {

  /**
   * The cubrid_rollback function executes rollback on the
   * transaction pointed by conn_identifier, currently in progress.
   *
   * Connection to server is closed after calling cubrid_rollback.
   * Connection handle, however, is still valid.
   **/
}

/**
 * Get the requested schema information.
 **/

function cubrid_schema(
     resource $conn_identifier
  ,  int $schema_type
  ,  string $class_name
  ,  string $attr_name
  ) {

  /**
   * The cubrid_schema function is used to get the requested
   * schema information from database. To get information about
   * specific class, set the class_name, to get information about
   * specific attribute (can be used only with
   * CUBRID_SCH_ATTR_PRIVILEGE), set the attr_name.
   *
   * The result of the cubrid_schema function is returned as a
   * two-dimensional array (column (associative array) * row
   * (numeric array)). The following tables shows types of schema
   * and the column structure of the result array to be returned
   * based on the schema type.
   *
   * Result Composition of Each Type Schema Column Number Column
   * Name Value CUBRID_SCH_CLASS 1 NAME 2 TYPE 0:system class
   * 1:vclass 2:class CUBRID_SCH_VCLASS 1 NAME 2 TYPE 1:vclass
   * CUBRID_SCH_QUERY_SPEC 1 QUERY_SPEC CUBRID_SCH_ATTRIBUTE /
   * CUBRID_SCH_CLASS_ATTRIBUTE 1 ATTR_NAME 2 DOMAIN 3 SCALE 4
   * PRECISION 5 INDEXED 1:indexed 6 NOT NULL 1:not null 7 SHARED
   * 1:shared 8 UNIQUE 1:unique 9 DEFAULT 10 ATTR_ORDER base:1 11
   * CLASS_NAME 12 SOURCE_CLASS 13 IS_KEY 1:key CUBRID_SCH_METHOD /
   * CUBRID_SCH_CLASS_METHOD 1 NAME 2 RET_DOMAIN 3 ARG_DOMAIN
   * CUBRID_SCH_METHOD_FILE 1 METHOD_FILE CUBRID_SCH_SUPERCLASS /
   * CUBRID_SCH_DIRECT_SUPER_CLASS / CUBRID_SCH_SUBCLASS 1
   * CLASS_NAME 2 TYPE 0:system class 1:vclass 2:class
   * CUBRID_SCH_CONSTRAINT 1 TYPE 0:unique 1:index 2:reverse unique
   * 3:reverse index 2 NAME 3 ATTR_NAME 4 NUM_PAGES 5 NUM_KEYS 6
   * PRIMARY_KEY 1:primary key 7 KEY_ORDER base:1
   * CUBRID_SCH_TRIGGER 1 NAME 2 STATUS 3 EVENT 4 TARGET_CLASS 5
   * TARGET_ATTR 6 ACTION_TIME 7 ACTION 8 PRIORITY 9 CONDITION_TIME
   * 10 CONDITION CUBRID_SCH_CLASS_PRIVILEGE /
   * CUBRID_SCH_ATTR_PRIVILEGE 1 CLASS_NAME / ATTR_NAME 2 PRIVILEGE
   * 3 GRANTABLE CUBRID_SCH_PRIMARY_KEY 1 CLASS_NAME 2 ATTR_NAME 3
   * KEY_SEQ base:1 4 KEY_NAME CUBRID_SCH_IMPORTED_KEYS /
   * CUBRID_SCH_EXPORTED_KEYS / CUBRID_SCH_CROSS_REFERENCE 1
   * PKTABLE_NAME 2 PKCOLUMN_NAME 3 FKTABLE_NAME base:1 4
   * FKCOLUMN_NAME 5 KEY_SEQ base:1 6 UPDATE_ACTION 0:cascade
   * 1:restrict 2:no action 3:set null 7 DELETE_ACTION 0:cascade
   * 1:restrict 2:no action 3:set null 8 FK_NAME 9 PK_NAME
   **/
}

/**
 * Delete an element from sequence type column using OID.
 **/

function cubrid_seq_drop(
     resource $conn_identifier
  ,  string $oid
  ,  string $attr_name
  ,  int $index
  ) {

  /**
   * The cubrid_seq_drop function is used to delete an element you
   * request from the given sequence type attribute in the
   * database.
   **/
}

/**
 * Insert an element to a sequence type column using OID.
 **/

function cubrid_seq_insert(
     resource $conn_identifier
  ,  string $oid
  ,  string $attr_name
  ,  int $index
  ,  string $seq_element
  ) {

  /**
   * The cubrid_col_insert function is used to insert an element
   * to a sequence type attribute in a requested location.
   **/
}

/**
 * Update the element value of sequence type column using OID.
 **/

function cubrid_seq_put(
     resource $conn_identifier
  ,  string $oid
  ,  string $attr_name
  ,  int $index
  ,  string $seq_element
  ) {

  /**
   * The cubrid_seq_put function is used to update the content of
   * the requested element in a sequent type attribute using OID.
   **/
}

/**
 * Insert a single element to set type column using OID.
 **/

function cubrid_set_add(
     resource $conn_identifier
  ,  string $oid
  ,  string $attr_name
  ,  string $set_element
  ) {

  /**
   * The cubrid_set_add function is used to insert a single
   * element to a set type attribute (set, multiset, sequence) you
   * requested.
   **/
}

/**
 * Set autocommit mode of the connection.
 **/

function cubrid_set_autocommit(
     resource $conn_identifier
  ,  bool $mode
  ) {

  /**
   * The cubrid_set_autocommit function is used to set the CUBRID
   * database auto-commit mode of the current database connection.
   *
   * In CUBRID PHP, auto-commit mode is disabled by default for
   * transaction management. When auto-commit mode is truned from
   * off to on, any pending work is automatically committed.
   **/
}

/**
 * Sets the CUBRID database parameters.
 **/

function cubrid_set_db_parameter(
     resource $conn_identifier
  ,  int $param_type
  ,  int $param_value
  ) {

  /**
   * The cubrid_set_db_parameter function is used to set the
   * CUBRID database parameters. It can set the following CUBRID
   * database parameters:
   *
   * PARAM_ISOLATION_LEVEL PARAM_LOCK_TIMEOUT
   *
   * The auto-commit mode can be set by using
   * cubrid_set_autocommit.
   **/
}

/**
 * Delete an element from set type column using OID.
 **/

function cubrid_set_drop(
     resource $conn_identifier
  ,  string $oid
  ,  string $attr_name
  ,  string $set_element
  ) {

  /**
   * The cubrid_set_drop function is used to delete an element
   * that you request from the given set type (set, multiset)
   * attribute of the database.
   **/
}

/**
 * Set the timeout time of query execution.
 **/

function cubrid_set_query_timeout(
     resource $req_identifier
  ,  int $timeout
  ) {

  /**
   * The cubrid_set_query_timeout function is used to set the
   * timeout time of query execution.
   **/
}

/**
 * Get the CUBRID PHP module's version.
 **/

function cubrid_version() {

  /**
   * The cubrid_version function is used to get the CUBRID PHP
   * module's version.
   **/
}

/**
 * Close a cURL session.
 **/

function curl_close( CurlHandle $handle) {

  /**
   * Closes a cURL session and frees all resources. The cURL
   * handle, handle, is also deleted.
   **/
}

/**
 * Copy a cURL handle along with all of its preferences.
 **/

function curl_copy_handle( CurlHandle $handle) {

  /**
   * Copies a cURL handle keeping the same preferences.
   **/
}

/**
 * Return the last error number.
 **/

function curl_errno( CurlHandle $handle) {

  /**
   * Returns the error number for the last cURL operation.
   **/
}

/**
 * Return a string containing the last error for the current.
 * session.
 **/

function curl_error( CurlHandle $handle) {

  /**
   * Returns a clear text error message for the last cURL
   * operation.
   **/
}

/**
 * URL encodes the given string.
 **/

function curl_escape( CurlHandle $handle,  string $string) {

  /**
   * This function URL encodes the given string according to RFC
   * 3986.
   **/
}

/**
 * Perform a cURL session.
 **/

function curl_exec( CurlHandle $handle) {

  /**
   * Execute the given cURL session.
   *
   * This function should be called after initializing a cURL
   * session and all the options for the session are set.
   **/
}

/**
 * Get information regarding a specific transfer.
 **/

function curl_getinfo( CurlHandle $handle, $option = null) {

  /**
   * Gets information about the last transfer.
   **/
}

/**
 * Initialize a cURL session.
 **/

function curl_init($url = null) {

  /**
   * Initializes a new session and return a cURL handle for use
   * with the curl_setopt, curl_exec, and curl_close functions.
   **/
}

/**
 * Add a normal cURL handle to a cURL multi handle.
 **/

function curl_multi_add_handle(
     CurlMultiHandle $multi_handle
  ,  CurlHandle $handle
  ) {

  /**
   * Adds the handle handle to the multi handle multi_handle
   **/
}

/**
 * Close a set of cURL handles.
 **/

function curl_multi_close( CurlMultiHandle $multi_handle) {

  /**
   * Closes a set of cURL handles.
   **/
}

/**
 * Return the last multi curl error number.
 **/

function curl_multi_errno() {

  /**
   * Return an integer containing the last multi curl error
   * number.
   **/
}

/**
 * Run the sub-connections of the current cURL handle.
 **/

function curl_multi_exec(
     CurlMultiHandle $multi_handle
  ,  int &$still_running
  ) {

  /**
   * Processes each of the handles in the stack. This method can
   * be called whether or not a handle needs to read or write data.
   **/
}

/**
 * Return the content of a cURL handle if CURLOPT_RETURNTRANSFER.
 * is set.
 **/

function curl_multi_getcontent( CurlHandle $handle) {

  /**
   * If CURLOPT_RETURNTRANSFER is an option that is set for a
   * specific handle, then this function will return the content of
   * that cURL handle in the form of a string.
   **/
}

/**
 * Get information about the current transfers.
 **/

function curl_multi_info_read(
     CurlMultiHandle $multi_handle
  ,  int &$queued_messages = null
  ) {

  /**
   * Ask the multi handle if there are any messages or information
   * from the individual transfers. Messages may include
   * information such as an error code from the transfer or just
   * the fact that a transfer is completed.
   *
   * Repeated calls to this function will return a new result each
   * time, until a &false; is returned as a signal that there is no
   * more to get at this point. The integer pointed to with
   * queued_messages will contain the number of remaining messages
   * after this function was called.
   *
   * The data the returned resource points to will not survive
   * calling curl_multi_remove_handle.
   **/
}

/**
 * Returns a new cURL multi handle.
 **/

function curl_multi_init() {

  /**
   * Allows the processing of multiple cURL handles
   * asynchronously.
   **/
}

/**
 * Remove a multi handle from a set of cURL handles.
 **/

function curl_multi_remove_handle(
     CurlMultiHandle $multi_handle
  ,  CurlHandle $handle
  ) {

  /**
   * Removes a given handle handle from the given multi_handle
   * handle. When the handle handle has been removed, it is again
   * perfectly legal to run curl_exec on this handle. Removing the
   * handle handle while being used, will effectively halt the
   * transfer in progress involving that handle.
   **/
}

/**
 * Wait for activity on any curl_multi connection.
 **/

function curl_multi_select(
     CurlMultiHandle $multi_handle
  ,  float $timeout = 1.0
  ) {

  /**
   * Blocks until there is activity on any of the curl_multi
   * connections.
   **/
}

/**
 * Set a cURL multi option.
 **/

function curl_multi_setopt(
     CurlMultiHandle $multi_handle
  ,  int $option
  ,  mixed $value
  ) {

  /**
   * Sets an option on the given cURL multi handle.
   **/
}

/**
 * Return string describing error code.
 **/

function curl_multi_strerror( int $error_code) {

  /**
   * Returns a text error message describing the given CURLM error
   * code.
   **/
}

/**
 * Pause and unpause a connection.
 **/

function curl_pause( CurlHandle $handle,  int $flags) {

  /**
   * Pause or unpause a cURL session. A session can be paused
   * while a transfer is in progress, in either the read, write or
   * both directions, by calling this function from a callback
   * registered with curl_setopt.
   **/
}

/**
 * Reset all options of a libcurl session handle.
 **/

function curl_reset( CurlHandle $handle) {

  /**
   * This function re-initializes all options set on the given
   * cURL handle to the default values.
   **/
}

/**
 * Set multiple options for a cURL transfer.
 **/

function curl_setopt_array( CurlHandle $handle,  array $options) {

  /**
   * Sets multiple options for a cURL session. This function is
   * useful for setting a large number of cURL options without
   * repetitively calling curl_setopt.
   **/
}

/**
 * Set an option for a cURL transfer.
 **/

function curl_setopt(
     CurlHandle $handle
  ,  int $option
  ,  mixed $value
  ) {

  /**
   * Sets an option on the given cURL session handle.
   **/
}

/**
 * Close a cURL share handle.
 **/

function curl_share_close( CurlShareHandle $share_handle) {

  /**
   * Closes a cURL share handle and frees all resources.
   **/
}

/**
 * Return the last share curl error number.
 **/

function curl_share_errno() {

  /**
   * Return an integer containing the last share curl error
   * number.
   **/
}

/**
 * Initialize a cURL share handle.
 **/

function curl_share_init() {

  /**
   * Allows to share data between cURL handles.
   **/
}

/**
 * Set an option for a cURL share handle.
 **/

function curl_share_setopt(
     CurlShareHandle $share_handle
  ,  int $option
  ,  mixed $value
  ) {

  /**
   * Sets an option on the given cURL share handle.
   **/
}

/**
 * Return string describing the given error code.
 **/

function curl_share_strerror() {

  /**
   * Returns a text error message describing the given error code.
   **/
}

/**
 * Return string describing the given error code.
 **/

function curl_strerror( int $error_code) {

  /**
   * Returns a text error message describing the given error code.
   **/
}

/**
 * Decodes the given URL encoded string.
 **/

function curl_unescape( CurlHandle $handle,  string $string) {

  /**
   * This function decodes the given URL encoded string.
   **/
}

/**
 * Performs any connection upkeep checks.
 **/

function curl_upkeep( CurlHandle $handle) {

  /**
   * Available if built against libcurl >= 7.62.0.
   *
   * Some protocols have "connection upkeep" mechanisms. These
   * mechanisms usually send some traffic on existing connections
   * in order to keep them alive; this can prevent connections from
   * being closed due to overzealous firewalls, for example.
   *
   * Connection upkeep is currently available only for HTTP/2
   * connections. A small amount of traffic is usually sent to keep
   * a connection alive. HTTP/2 maintains its connection by sending
   * a HTTP/2 PING frame.
   **/
}

/**
 * Gets cURL version information.
 **/

function curl_version() {

  /**
   * Returns information about the cURL version.
   **/
}

/**
 * Validate a Gregorian date.
 **/

function checkdate( int $month,  int $day,  int $year) {

  /**
   * Checks the validity of the date formed by the arguments. A
   * date is considered valid if each parameter is properly
   * defined.
   **/
}

/**
 * &Alias; DateTime::add.
 **/

function DateTime::add() {

  /**
   * &info.function.alias; DateTime::add
   **/
}

/**
 * &Alias; DateTime::createFromFormat.
 **/

function DateTime::createFromFormat() {

  /**
   * &info.function.alias; DateTime::createFromFormat
   **/
}

/**
 * &Alias; DateTimeImmutable::createFromFormat.
 **/

function DateTimeImmutable::createFromFormat() {

  /**
   * &info.function.alias; DateTimeImmutable::createFromFormat
   **/
}

/**
 * create a new DateTimeImmutable object.
 **/

function date_create_immutable(
     string $datetime = "now"
  , $timezone = null
  ) {

  /**
   * This is the procedural version of
   * DateTimeImmutable::__construct.
   *
   * Unlike the DateTimeImmutable constructor, it will return
   * &false; instead of an exception if the passed in datetime
   * string is invalid.
   **/
}

/**
 * create a new DateTime object.
 **/

function date_create( string $datetime = "now", $timezone = null) {

  /**
   * This is the procedural version of DateTime::__construct.
   *
   * Unlike the DateTime constructor, it will return &false;
   * instead of an exception if the passed in datetime string is
   * invalid.
   **/
}

/**
 * &Alias; DateTime::setDate.
 **/

function DateTime::setDate() {

  /**
   * &info.function.alias; DateTime::setDate
   **/
}

/**
 * Gets the default timezone used by all date/time functions in.
 * a script.
 **/

function date_default_timezone_get() {

  /**
   * In order of preference, this function returns the default
   * timezone by: Reading the timezone set using the
   * date_default_timezone_set function (if any) Reading the value
   * of the date.timezone ini option (if set)
   *
   * Reading the timezone set using the date_default_timezone_set
   * function (if any)
   *
   * Reading the value of the date.timezone ini option (if set)
   *
   * If none of the above succeed, date_default_timezone_get will
   * return a default timezone of UTC.
   **/
}

/**
 * Sets the default timezone used by all date/time functions in.
 * a script.
 **/

function date_default_timezone_set( string $timezoneId) {

  /**
   * date_default_timezone_set sets the default timezone used by
   * all date/time functions.
   *
   * Instead of using this function to set the default timezone in
   * your script, you can also use the INI setting date.timezone to
   * set the default timezone.
   **/
}

/**
 * &Alias; DateTime::diff.
 **/

function DateTime::diff() {

  /**
   * &info.function.alias; DateTime::diff
   **/
}

/**
 * &Alias; DateTime::format.
 **/

function DateTime::format() {

  /**
   * &info.function.alias; DateTime::format
   **/
}

/**
 * &Alias; DateTimeImmutable::getLastErrors.
 **/

function DateTimeImmutable::getLastErrors() {

  /**
   * &info.function.alias; DateTimeImmutable::getLastErrors
   **/
}

/**
 * &Alias; DateInterval::createFromDateString.
 **/

function DateInterval::createFromDateString() {

  /**
   * &info.function.alias; DateInterval::createFromDateString
   **/
}

/**
 * &Alias; DateInterval::format.
 **/

function DateInterval::format() {

  /**
   * &info.function.alias; DateInterval::format
   **/
}

/**
 * &Alias; DateTime::setISODate.
 **/

function DateTime::setISODate() {

  /**
   * &info.function.alias; DateTime::setISODate
   **/
}

/**
 * &Alias; DateTime::modify.
 **/

function DateTime::modify() {

  /**
   * &info.function.alias; DateTime::modify
   **/
}

/**
 * &Alias; DateTime::getOffset.
 **/

function DateTime::getOffset() {

  /**
   * &info.function.alias; DateTime::getOffset
   **/
}

/**
 * Get info about given date formatted according to the specified.
 * format.
 **/

function date_parse_from_format( string $format,  string $datetime) {

  /**
   * Returns associative array with detailed info about given
   * date/time.
   **/
}

/**
 * Returns associative array with detailed info about given.
 * date/time.
 **/

function date_parse( string $datetime) {

  /**
   * date_parse parses the given datetime string according to the
   * same rules as strtotime and DateTimeImmutable::__construct.
   * Instead of returning a Unix timestamp (with strtotime) or a
   * DateTimeImmutable object (with
   * DateTimeImmutable::__construct), it returns an associative
   * array with the information that it could detect in the given
   * datetime string.
   *
   * If no information about a certain group of elements can be
   * found, these array elements will be set to &false; or are
   * missing. If needed for constructing a timestamp or
   * DateTimeImmutable object from the same datetime string, more
   * fields can be set to a non-&false; value. See the examples for
   * cases where that happens.
   **/
}

/**
 * &Alias; DateTime::sub.
 **/

function DateTime::sub() {

  /**
   * &info.function.alias; DateTime::sub
   **/
}

/**
 * Returns an array with information about sunset/sunrise and.
 * twilight begin/end.
 **/

function date_sun_info(
     int $timestamp
  ,  float $latitude
  ,  float $longitude
  ) {

  /**
   **/
}

/**
 * Returns time of sunrise for a given day and location.
 **/

function date_sunrise(
     int $timestamp
  ,  int $returnFormat = SUNFUNCS_RET_STRING
  , $latitude = null
  , $longitude = null
  , $zenith = null
  , $utcOffset = null
  ) {

  /**
   * date_sunrise returns the sunrise time for a given day
   * (specified as a timestamp) and location.
   **/
}

/**
 * Returns time of sunset for a given day and location.
 **/

function date_sunset(
     int $timestamp
  ,  int $returnFormat = SUNFUNCS_RET_STRING
  , $latitude = null
  , $longitude = null
  , $zenith = null
  , $utcOffset = null
  ) {

  /**
   * date_sunset returns the sunset time for a given day
   * (specified as a timestamp) and location.
   **/
}

/**
 * &Alias; DateTime::setTime.
 **/

function DateTime::setTime() {

  /**
   * &info.function.alias; DateTime::setTime
   **/
}

/**
 * &Alias; DateTime::getTimestamp.
 **/

function DateTime::getTimestamp() {

  /**
   * &info.function.alias; DateTime::getTimestamp
   **/
}

/**
 * &Alias; DateTime::setTimestamp.
 **/

function DateTime::setTimestamp() {

  /**
   * &info.function.alias; DateTime::setTimestamp
   **/
}

/**
 * &Alias; DateTime::getTimezone.
 **/

function DateTime::getTimezone() {

  /**
   * &info.function.alias; DateTime::getTimezone
   **/
}

/**
 * &Alias; DateTime::setTimezone.
 **/

function DateTime::setTimezone() {

  /**
   * &info.function.alias; DateTime::setTimezone
   **/
}

/**
 * Format a Unix timestamp.
 **/

function date( string $format, $timestamp = null) {

  /**
   * Returns a string formatted according to the given format
   * string using the given integer timestamp (Unix timestamp) or
   * the current time if no timestamp is given. In other words,
   * timestamp is optional and defaults to the value of time.
   *
   * Unix timestamps do not handle timezones. Use the
   * DateTimeImmutable class, and its DateTimeInterface::format
   * formatting method to format date/time information with a
   * timezone attached.
   **/
}

/**
 * Get date/time information.
 **/

function getdate($timestamp = null) {

  /**
   * Returns an associative array containing the date information
   * of the timestamp, or the current local time if timestamp is
   * omitted or &null;.
   **/
}

/**
 * Get current time.
 **/

function gettimeofday( bool $as_float = false) {

  /**
   * This is an interface to gettimeofday(2). It returns an
   * associative array containing the data returned from the system
   * call.
   **/
}

/**
 * Format a GMT/UTC date/time.
 **/

function gmdate( string $format, $timestamp = null) {

  /**
   * Identical to the date function except that the time returned
   * is Greenwich Mean Time (GMT).
   **/
}

/**
 * Get Unix timestamp for a GMT date.
 **/

function gmmktime(
     int $hour
  , $minute = null
  , $second = null
  , $month = null
  , $day = null
  , $year = null
  ) {

  /**
   * Identical to mktime except the passed parameters represents a
   * GMT date. gmmktime internally uses mktime so only times valid
   * in derived local time can be used.
   *
   * Like mktime, optional arguments may be left out in order from
   * right to left, with any omitted arguments being set to the
   * current corresponding GMT value.
   **/
}

/**
 * Format a GMT/UTC time/date according to locale settings.
 **/

function IntlDateFormatter::format( string $format, $timestamp = null) {

  /**
   * Behaves the same as strftime except that the time returned is
   * Greenwich Mean Time (GMT). For example, when run in Eastern
   * Standard Time (GMT -0500), the first line below prints "Dec 31
   * 1998 20:00:00", while the second prints "Jan 01 1999
   * 01:00:00".
   *
   * This function depends on operating system locale information,
   * which might be inconsistent with each other, or not available
   * at all. Instead use the IntlDateFormatter::format method.
   **/
}

/**
 * Format a local time/date part as integer.
 **/

function idate( string $format, $timestamp = null) {

  /**
   * Returns a number formatted according to the given format
   * string using the given integer timestamp or the current local
   * time if no timestamp is given. In other words, timestamp is
   * optional and defaults to the value of time.
   *
   * Unlike the function date, idate accepts just one char in the
   * format parameter.
   **/
}

/**
 * Get the local time.
 **/

function localtime($timestamp = null,  bool $associative = false) {

  /**
   * The localtime function returns an array identical to that of
   * the structure returned by the C function call.
   **/
}

/**
 * Return current Unix timestamp with microseconds.
 **/

function microtime( bool $as_float = false) {

  /**
   * microtime returns the current Unix timestamp with
   * microseconds. This function is only available on operating
   * systems that support the gettimeofday() system call.
   *
   * For performance measurements, using hrtime is recommended.
   **/
}

/**
 * Get Unix timestamp for a date.
 **/

function mktime(
     int $hour
  , $minute = null
  , $second = null
  , $month = null
  , $day = null
  , $year = null
  ) {

  /**
   * Returns the Unix timestamp corresponding to the arguments
   * given. This timestamp is a long integer containing the number
   * of seconds between the Unix Epoch (January 1 1970 00:00:00
   * GMT) and the time specified.
   *
   * Any optional arguments omitted or &null; will be set to the
   * current value according to the local date and time.
   *
   * Please note that the ordering of arguments is in an odd
   * order: month, day, year, and not in the more reasonable order
   * of year, month, day.
   **/
}

/**
 * Format a local time/date according to locale settings.
 **/

function IntlDateFormatter::format( string $format, $timestamp = null) {

  /**
   * Format the time and/or date according to locale settings.
   * Month and weekday names and other language-dependent strings
   * respect the current locale set with setlocale.
   *
   * Not all conversion specifiers may be supported by your C
   * library, in which case they will not be supported by PHP's
   * strftime. Additionally, not all platforms support negative
   * timestamps, so your date range may be limited to no earlier
   * than the Unix epoch. This means that %e, %T, %R and, %D (and
   * possibly others) - as well as dates prior to Jan 1, 1970 -
   * will not work on Windows, some Linux distributions, and a few
   * other operating systems. For Windows systems, a complete
   * overview of supported conversion specifiers can be found at
   * MSDN. Instead use the IntlDateFormatter::format method.
   **/
}

/**
 * Parse a time/date generated with strftime.
 **/

function strptime( string $timestamp,  string $format) {

  /**
   * strptime returns an array with the timestamp parsed, or
   * &false; on error.
   *
   * Month and weekday names and other language dependent strings
   * respect the current locale set with setlocale (LC_TIME).
   **/
}

/**
 * Parse about any English textual datetime description into a.
 * Unix timestamp.
 **/

function strtotime( string $datetime, $baseTimestamp = null) {

  /**
   * The Unix timestamp that this function returns does not
   * contain information about time zones. In order to do
   * calculations with date/time information, you should use the
   * more capable DateTimeImmutable.
   *
   * Each parameter of this function uses the default time zone
   * unless a time zone is specified in that parameter. Be careful
   * not to use different time zones in each parameter unless that
   * is intended. See date_default_timezone_get on the various ways
   * to define the default time zone.
   **/
}

/**
 * Return current Unix timestamp.
 **/

function time() {

  /**
   * Returns the current time measured in the number of seconds
   * since the Unix Epoch (January 1 1970 00:00:00 GMT).
   *
   * Unix timestamps do not contain any information with regards
   * to any local timezone. It is recommended to use the
   * DateTimeImmutable class for handling date and time information
   * in order to avoid the pitfalls that come with just Unix
   * timestamps.
   **/
}

/**
 * &Alias; DateTimeZone::listAbbreviations.
 **/

function DateTimeZone::listAbbreviations() {

  /**
   * &info.function.alias; DateTimeZone::listAbbreviations
   **/
}

/**
 * &Alias; DateTimeZone::listIdentifiers.
 **/

function DateTimeZone::listIdentifiers() {

  /**
   * &info.function.alias; DateTimeZone::listIdentifiers
   **/
}

/**
 * &Alias; DateTimeZone::getLocation.
 **/

function DateTimeZone::getLocation() {

  /**
   * &info.function.alias; DateTimeZone::getLocation
   **/
}

/**
 * Returns a timezone name by guessing from abbreviation and UTC.
 * offset.
 **/

function timezone_name_from_abbr(
     string $abbr
  ,  int $utcOffset = -1
  ,  int $isDST = -1
  ) {

  /**
   **/
}

/**
 * &Alias; DateTimeZone::getName.
 **/

function DateTimeZone::getName() {

  /**
   * &info.function.alias; DateTimeZone::getName
   **/
}

/**
 * &Alias; DateTimeZone::getOffset.
 **/

function DateTimeZone::getOffset() {

  /**
   * &info.function.alias; DateTimeZone::getOffset
   **/
}

/**
 * &Alias; DateTimeZone::__construct.
 **/

function DateTimeZone::__construct() {

  /**
   * &info.function.alias; DateTimeZone::__construct
   **/
}

/**
 * &Alias; DateTimeZone::getTransitions.
 **/

function DateTimeZone::getTransitions() {

  /**
   * &info.function.alias; DateTimeZone::getTransitions
   **/
}

/**
 * Gets the version of the timezonedb.
 **/

function timezone_version_get() {

  /**
   * Returns the current version of the timezonedb.
   **/
}

/**
 * Close a DBA database.
 **/

function dba_close( resource $dba) {

  /**
   * dba_close closes the established database and frees all
   * resources of the specified database handle.
   **/
}

/**
 * Delete DBA entry specified by key.
 **/

function dba_delete($key,  resource $dba) {

  /**
   * dba_delete deletes the specified entry from the database.
   **/
}

/**
 * Check whether key exists.
 **/

function dba_exists($key,  resource $dba) {

  /**
   * dba_exists checks whether the specified key exists in the
   * database.
   **/
}

/**
 * Fetch data specified by key.
 **/

function dba_fetch($key,  resource $dba,  int $skip = 0) {

  /**
   * dba_fetch fetches the data specified by key from the database
   * specified with dba.
   **/
}

/**
 * Fetch first key.
 **/

function dba_firstkey( resource $dba) {

  /**
   * dba_firstkey returns the first key of the database and resets
   * the internal key pointer. This permits a linear search through
   * the whole database.
   **/
}

/**
 * List all the handlers available.
 **/

function dba_handlers( bool $full_info = false) {

  /**
   * dba_handlers list all the handlers supported by this
   * extension.
   **/
}

/**
 * Insert entry.
 **/

function dba_insert($key,  string $value,  resource $dba) {

  /**
   * dba_insert inserts the entry described with key and value
   * into the database.
   **/
}

/**
 * Splits a key in string representation into array.
 * representation.
 **/

function dba_key_split($key) {

  /**
   * dba_key_split splits a key (string representation) into an
   * array representation.
   **/
}

/**
 * List all open database files.
 **/

function dba_list() {

  /**
   * dba_list list all open database files.
   **/
}

/**
 * Fetch next key.
 **/

function dba_nextkey( resource $dba) {

  /**
   * dba_nextkey returns the next key of the database and advances
   * the internal key pointer.
   **/
}

/**
 * Open database.
 **/

function dba_open(
     string $path
  ,  string $mode
  , $handler = null
  ,  int $permission = 0644
  ,  int $map_size = 0
  , $flags = null
  ) {

  /**
   * dba_open establishes a database instance for path with mode
   * using handler.
   **/
}

/**
 * Optimize database.
 **/

function dba_optimize( resource $dba) {

  /**
   * dba_optimize optimizes the underlying database.
   **/
}

/**
 * Open database persistently.
 **/

function dba_popen(
     string $path
  ,  string $mode
  , $handler = null
  ,  int $permission = 0644
  ,  int $map_size = 0
  , $flags = null
  ) {

  /**
   * dba_popen establishes a persistent database instance for path
   * with mode using handler.
   **/
}

/**
 * Replace or insert entry.
 **/

function dba_replace($key,  string $value,  resource $dba) {

  /**
   * dba_replace replaces or inserts the entry described with key
   * and value into the database specified by dba.
   **/
}

/**
 * Synchronize database.
 **/

function dba_sync( resource $dba) {

  /**
   * dba_sync synchronizes the database. This will probably
   * trigger a physical write to the disk, if supported.
   **/
}

/**
 * Adds a record to a database.
 **/

function dbase_add_record( resource $database,  array $data) {

  /**
   * Adds the given data to the database.
   **/
}

/**
 * Closes a database.
 **/

function dbase_close( resource $database) {

  /**
   * Closes the given database resource.
   **/
}

/**
 * Creates a database.
 **/

function dbase_create(
     string $path
  ,  array $fields
  ,  int $type = DBASE_TYPE_DBASE
  ) {

  /**
   * dbase_create creates a dBase database with the given
   * definition. If the file already exists, it is not truncated.
   * dbase_pack can be called to force truncation.
   **/
}

/**
 * Deletes a record from a database.
 **/

function dbase_delete_record( resource $database,  int $number) {

  /**
   * Marks the given record to be deleted from the database.
   *
   * To actually remove the record from the database, you must
   * also call dbase_pack.
   **/
}

/**
 * Gets the header info of a database.
 **/

function dbase_get_header_info( resource $database) {

  /**
   * Returns information on the column structure of the given
   * database resource.
   **/
}

/**
 * Gets a record from a database as an associative array.
 **/

function dbase_get_record_with_names(
     resource $database
  ,  int $number
  ) {

  /**
   * Gets a record from a dBase database as an associative array.
   **/
}

/**
 * Gets a record from a database as an indexed array.
 **/

function dbase_get_record( resource $database,  int $number) {

  /**
   * Gets a record from a database as an indexed array.
   **/
}

/**
 * Gets the number of fields of a database.
 **/

function dbase_numfields( resource $database) {

  /**
   * Gets the number of fields (columns) in the specified
   * database.
   *
   * Field numbers are between 0 and dbase_numfields($db)-1, while
   * record numbers are between 1 and dbase_numrecords($db).
   **/
}

/**
 * Gets the number of records in a database.
 **/

function dbase_numrecords( resource $database) {

  /**
   * Gets the number of records (rows) in the specified database.
   *
   * Records which are marked as deleted are counted as well.
   *
   * Record numbers are between 1 and dbase_numrecords($db), while
   * field numbers are between 0 and dbase_numfields($db)-1.
   **/
}

/**
 * Opens a database.
 **/

function dbase_open( string $path,  int $mode) {

  /**
   * dbase_open opens a dBase database with the given access mode.
   **/
}

/**
 * Packs a database.
 **/

function dbase_pack( resource $database) {

  /**
   * Packs the specified database by permanently deleting all
   * records marked for deletion using dbase_delete_record. Note
   * that the file will be truncated after successful packing
   * (contrary to dBASE III's PACK command).
   **/
}

/**
 * Replaces a record in a database.
 **/

function dbase_replace_record(
     resource $database
  ,  array $data
  ,  int $number
  ) {

  /**
   * Replaces the given record in the database with the given
   * data.
   **/
}

/**
 * Closes the file descriptor given by fd.
 **/

function dio_close( resource $fd) {

  /**
   * The function dio_close closes the file descriptor fd.
   **/
}

/**
 * Performs a c library fcntl on fd.
 **/

function dio_fcntl( resource $fd,  int $cmd,  mixed $args) {

  /**
   * The dio_fcntl function performs the operation specified by
   * cmd on the file descriptor fd. Some commands require
   * additional arguments args to be supplied.
   **/
}

/**
 * Opens a file (creating it if necessary) at a lower level than.
 * the C library input/ouput stream functions allow.
 **/

function dio_open( string $filename,  int $flags,  int $mode = 0) {

  /**
   * dio_open opens a file and returns a new file descriptor for
   * it.
   **/
}

/**
 * Reads bytes from a file descriptor.
 **/

function dio_read( resource $fd,  int $len = 1024) {

  /**
   * The function dio_read reads and returns len bytes from file
   * with descriptor fd.
   **/
}

/**
 * Seeks to pos on fd from whence.
 **/

function dio_seek( resource $fd,  int $pos,  int $whence = SEEK_SET) {

  /**
   * The function dio_seek is used to change the file position of
   * the given file descriptor.
   **/
}

/**
 * Gets stat information about the file descriptor fd.
 **/

function dio_stat( resource $fd) {

  /**
   * dio_stat returns information about the given file descriptor.
   **/
}

/**
 * Sets terminal attributes and baud rate for a serial port.
 **/

function dio_tcsetattr( resource $fd,  array $options) {

  /**
   * dio_tcsetattr sets the terminal attributes and baud rate of
   * the open fd.
   **/
}

/**
 * Truncates file descriptor fd to offset bytes.
 **/

function dio_truncate( resource $fd,  int $offset) {

  /**
   * dio_truncate truncates a file to at most offset bytes in
   * size.
   *
   * If the file previously was larger than this size, the extra
   * data is lost. If the file previously was shorter, it is
   * unspecified whether the file is left unchanged or is extended.
   * In the latter case the extended part reads as zero bytes.
   **/
}

/**
 * Writes data to fd with optional truncation at length.
 **/

function dio_write( resource $fd,  string $data,  int $len = 0) {

  /**
   * dio_write writes up to len bytes from data to file fd.
   **/
}

/**
 * Change directory.
 **/

function chdir( string $directory) {

  /**
   * Changes PHP's current directory to directory.
   **/
}

/**
 * Change the root directory.
 **/

function chroot( string $directory) {

  /**
   * Changes the root directory of the current process to
   * directory, and changes the current working directory to "/".
   *
   * This function is only available to GNU and BSD systems, and
   * only when using the CLI, CGI or Embed SAPI. Also, this
   * function requires root privileges.
   *
   * Calling this function does not change the values of the
   * __DIR__ and __FILE__ magic constants.
   **/
}

/**
 * Close directory handle.
 **/

function closedir($dir_handle = null) {

  /**
   * Closes the directory stream indicated by dir_handle. The
   * stream must have previously been opened by opendir.
   **/
}

/**
 * Return an instance of the Directory class.
 **/

function dir( string $directory, $context = null) {

  /**
   * A pseudo-object-oriented mechanism for reading a directory.
   * The given directory is opened.
   **/
}

/**
 * Gets the current working directory.
 **/

function getcwd() {

  /**
   * Gets the current working directory.
   **/
}

/**
 * Open directory handle.
 **/

function opendir( string $directory, $context = null) {

  /**
   * Opens up a directory handle to be used in subsequent
   * closedir, readdir, and rewinddir calls.
   **/
}

/**
 * Read entry from directory handle.
 **/

function readdir($dir_handle = null) {

  /**
   * Returns the name of the next entry in the directory. The
   * entries are returned in the order in which they are stored by
   * the filesystem.
   **/
}

/**
 * Rewind directory handle.
 **/

function rewinddir($dir_handle = null) {

  /**
   * Resets the directory stream indicated by dir_handle to the
   * beginning of the directory.
   **/
}

/**
 * List files and directories inside the specified path.
 **/

function scandir(
     string $directory
  ,  int $sorting_order = SCANDIR_SORT_ASCENDING
  , $context = null
  ) {

  /**
   * Returns an array of files and directories from the directory.
   **/
}

/**
 * Gets a DOMElement object from a SimpleXMLElement object.
 **/

function dom_import_simplexml( object $node) {

  /**
   * This function takes the node node of class SimpleXML and
   * makes it into a DOMElement node. This new object can then be
   * used as a native DOMElement node.
   **/
}

/**
 * Artificially increase load. Could be useful in tests,.
 * benchmarking.
 **/

function eio_busy(
     int $delay
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_busy artificially increases load taking delay seconds to
   * execute. May be used for debugging, or benchmarking.
   **/
}

/**
 * Cancels a request.
 **/

function eio_cancel( resource $req) {

  /**
   * eio_cancel cancels a request specified by req
   **/
}

/**
 * Change file/directory permissions.
 **/

function eio_chmod(
     string $path
  ,  int $mode
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_chmod changes file, or directory permissions. The new
   * permissions are specified by mode.
   **/
}

/**
 * Change file/directory permissions.
 **/

function eio_chown(
     string $path
  ,  int $uid
  ,  int $gid = -1
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * Changes file, or directory permissions.
   **/
}

/**
 * Close file.
 **/

function eio_close(
     mixed $fd
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_close closes file specified by fd.
   **/
}

/**
 * Execute custom request like any other eio_* call.
 **/

function eio_custom(
     callable $execute
  ,  int $pri
  ,  callable $callback
  ,  mixed $data = NULL
  ) {

  /**
   * eio_custom executes custom function specified by execute
   * processing it just like any other eio_* call.
   **/
}

/**
 * Duplicate a file descriptor.
 **/

function eio_dup2(
     mixed $fd
  ,  mixed $fd2
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_dup2 duplicates file descriptor.
   **/
}

/**
 * Polls libeio until all requests proceeded.
 **/

function eio_event_loop() {

  /**
   * eio_event_loop polls libeio until all requests proceeded.
   **/
}

/**
 * Allows the caller to directly manipulate the allocated disk.
 * space for a file.
 **/

function eio_fallocate(
     mixed $fd
  ,  int $mode
  ,  int $offset
  ,  int $length
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_fallocate allows the caller to directly manipulate the
   * allocated disk space for the file specified by fd file
   * descriptor for the byte range starting at offset and
   * continuing for length bytes.
   *
   * EIO_O_CREAT should be logically OR'd with EIO_O_WRONLY, or
   * EIO_O_RDWR
   **/
}

/**
 * Change file permissions.
 **/

function eio_fchmod(
     mixed $fd
  ,  int $mode
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_fchmod changes permissions for the file specified by fd
   * file descriptor.
   **/
}

/**
 * Change file ownership.
 **/

function eio_fchown(
     mixed $fd
  ,  int $uid
  ,  int $gid = -1
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_fchown changes ownership of the file specified by fd file
   * descriptor.
   **/
}

/**
 * Synchronize a file's in-core state with storage device.
 **/

function eio_fdatasync(
     mixed $fd
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_fdatasync synchronizes a file's in-core state with
   * storage device.
   **/
}

/**
 * Get file status.
 **/

function eio_fstat(
     mixed $fd
  ,  int $pri
  ,  callable $callback
  ,  mixed $data
  ) {

  /**
   * eio_fstat returns file status information in result argument
   * of callback
   **/
}

/**
 * Get file system statistics.
 **/

function eio_fstatvfs(
     mixed $fd
  ,  int $pri
  ,  callable $callback
  ,  mixed $data
  ) {

  /**
   * eio_fstatvfs returns file system statistics in result of
   * callback.
   **/
}

/**
 * Synchronize a file's in-core state with storage device.
 **/

function eio_fsync(
     mixed $fd
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * Synchronize a file's in-core state with storage device
   **/
}

/**
 * Truncate a file.
 **/

function eio_ftruncate(
     mixed $fd
  ,  int $offset = 0
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_ftruncate causes a regular file referenced by fd file
   * descriptor to be truncated to precisely length bytes.
   **/
}

/**
 * Change file last access and modification times.
 **/

function eio_futime(
     mixed $fd
  ,  float $atime
  ,  float $mtime
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_futime changes file last access and modification times.
   **/
}

/**
 * Get stream representing a variable used in internal.
 * communications with libeio.
 **/

function eio_get_event_stream() {

  /**
   * eio_get_event_stream acquires stream representing a variable
   * used in internal communications with libeio. Could be used to
   * bind with some event loop provided by other PECL extension,
   * for example libevent.
   **/
}

/**
 * Returns string describing the last error associated with a.
 * request resource.
 **/

function eio_get_last_error( resource $req) {

  /**
   * eio_get_last_error returns string describing the last error
   * associated with req.
   **/
}

/**
 * Adds a request to the request group.
 **/

function eio_grp_add( resource $grp,  resource $req) {

  /**
   * eio_grp_add adds a request to the request group.
   **/
}

/**
 * Cancels a request group.
 **/

function eio_grp_cancel( resource $grp) {

  /**
   * eio_grp_cancel cancels a group request specified by grp
   * request group resource.
   **/
}

/**
 * Set group limit.
 **/

function eio_grp_limit( resource $grp,  int $limit) {

  /**
   * Limit number of requests in the request group.
   **/
}

/**
 * Creates a request group.
 **/

function eio_grp( callable $callback,  string $data = NULL) {

  /**
   * eio_grp creates a request group.
   **/
}

/**
 * (Re-)initialize Eio.
 **/

function eio_init() {

  /**
   * eio_init (re-)initializes Eio. It allocates memory for
   * internal structures of libeio and Eio itself. You may call
   * eio_init before using Eio functions. Otherwise it will be
   * called internally first time you invoke an Eio function in a
   * process.
   *
   * This function was removed in version 3.0.0RC1 of the eio
   * extension for PHP version 8 and higher.
   **/
}

/**
 * Create a hardlink for file.
 **/

function eio_link(
     string $path
  ,  string $new_path
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_link creates a hardlink new_path for a file specified by
   * path.
   **/
}

/**
 * Get file status.
 **/

function eio_lstat(
     string $path
  ,  int $pri
  ,  callable $callback
  ,  mixed $data = NULL
  ) {

  /**
   * eio_lstat returns file status information in result argument
   * of callback
   **/
}

/**
 * Create directory.
 **/

function eio_mkdir(
     string $path
  ,  int $mode
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_mkdir creates directory with specified access mode.
   **/
}

/**
 * Create a special or ordinary file.
 **/

function eio_mknod(
     string $path
  ,  int $mode
  ,  int $dev
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_mknod creates ordinary or special(often) file.
   **/
}

/**
 * Does nothing, except go through the whole request cycle.
 **/

function eio_nop(
     int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_nop does nothing, except go through the whole request
   * cycle. Could be useful in debugging.
   **/
}

/**
 * Returns number of finished, but unhandled requests.
 **/

function eio_npending() {

  /**
   * eio_npending returns number of finished, but unhandled
   * requests
   **/
}

/**
 * Returns number of not-yet handled requests.
 **/

function eio_nready() {

  /**
   **/
}

/**
 * Returns number of requests to be processed.
 **/

function eio_nreqs() {

  /**
   * eio_nreqs could be called in a custom loop calling eio_poll.
   **/
}

/**
 * Returns number of threads currently in use.
 **/

function eio_nthreads() {

  /**
   **/
}

/**
 * Opens a file.
 **/

function eio_open(
     string $path
  ,  int $flags
  ,  int $mode
  ,  int $pri
  ,  callable $callback
  ,  mixed $data = NULL
  ) {

  /**
   * eio_open opens file specified by path in access mode mode
   * with
   **/
}

/**
 * Can be to be called whenever there are pending requests that.
 * need finishing.
 **/

function eio_poll() {

  /**
   * eio_poll can be used to implement special event loop. For
   * this eio_nreqs could be used to test if there are unprocessed
   * requests.
   *
   * Applicable only when implementing userspace event loop.
   **/
}

/**
 * Read from a file descriptor at given offset.
 **/

function eio_read(
     mixed $fd
  ,  int $length
  ,  int $offset
  ,  int $pri
  ,  callable $callback
  ,  mixed $data = NULL
  ) {

  /**
   * eio_read reads up to length bytes from fd file descriptor at
   * offset. The read bytes are stored in result argument of
   * callback.
   **/
}

/**
 * Perform file readahead into page cache.
 **/

function eio_readahead(
     mixed $fd
  ,  int $offset
  ,  int $length
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_readahead populates the page cache with data from a file
   * so that subsequent reads from that file will not block on disk
   * I/O. See READAHEAD(2) man page for details.
   **/
}

/**
 * Reads through a whole directory.
 **/

function eio_readdir(
     string $path
  ,  int $flags
  ,  int $pri
  ,  callable $callback
  ,  string $data = NULL
  ) {

  /**
   * Reads through a whole directory(via the opendir, readdir and
   * closedir system calls) and returns either the names or an
   * array in result argument of callback function, depending on
   * the flags argument.
   **/
}

/**
 * Read value of a symbolic link.
 **/

function eio_readlink(
     string $path
  ,  int $pri
  ,  callable $callback
  ,  mixed $data = NULL
  ) {

  /**
   **/
}

/**
 * Get the canonicalized absolute pathname.
 **/

function eio_realpath(
     string $path
  ,  int $pri
  ,  callable $callback
  ,  string $data = NULL
  ) {

  /**
   * eio_realpath returns the canonicalized absolute pathname in
   * result argument of callback function.
   **/
}

/**
 * Change the name or location of a file.
 **/

function eio_rename(
     string $path
  ,  string $new_path
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_rename renames or moves a file to new location.
   **/
}

/**
 * Remove a directory.
 **/

function eio_rmdir(
     string $path
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_rmdir removes a directory.
   **/
}

/**
 * Repositions the offset of the open file associated with the fd.
 * argument to the argument offset according to the directive.
 * whence.
 **/

function eio_seek(
     mixed $fd
  ,  int $offset
  ,  int $whence
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_seek repositions the offset of the open file associated
   * with stream, Socket resource, or file descriptor specified by
   * fd to the argument offset according to the directive whence as
   * follows: EIO_SEEK_SET - Set position equal to offset bytes.
   * EIO_SEEK_CUR - Set position to current location plus offset.
   * EIO_SEEK_END - Set position to end-of-file plus offset.
   **/
}

/**
 * Transfer data between file descriptors.
 **/

function eio_sendfile(
     mixed $out_fd
  ,  mixed $in_fd
  ,  int $offset
  ,  int $length
  ,  int $pri
  ,  callable $callback
  ,  string $data
  ) {

  /**
   * eio_sendfile copies data between one file descriptor and
   * another. See SENDFILE(2) man page for details.
   **/
}

/**
 * Set maximum number of idle threads.
 **/

function eio_set_max_idle( int $nthreads) {

  /**
   **/
}

/**
 * Set maximum parallel threads.
 **/

function eio_set_max_parallel( int $nthreads) {

  /**
   **/
}

/**
 * Set maximum number of requests processed in a poll.
 **/

function eio_set_max_poll_reqs( int $nreqs) {

  /**
   **/
}

/**
 * Set maximum poll time.
 **/

function eio_set_max_poll_time( float $nseconds) {

  /**
   * Polling stops, if poll took longer than nseconds seconds.
   **/
}

/**
 * Set minimum parallel thread number.
 **/

function eio_set_min_parallel( string $nthreads) {

  /**
   **/
}

/**
 * Get file status.
 **/

function eio_stat(
     string $path
  ,  int $pri
  ,  callable $callback
  ,  mixed $data = NULL
  ) {

  /**
   * eio_stat returns file status information in result argument
   * of callback
   **/
}

/**
 * Get file system statistics.
 **/

function eio_statvfs(
     string $path
  ,  int $pri
  ,  callable $callback
  ,  mixed $data
  ) {

  /**
   * eio_statvfs returns file system statistics information in
   * result argument of callback
   **/
}

/**
 * Create a symbolic link.
 **/

function eio_symlink(
     string $path
  ,  string $new_path
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_symlink creates a symbolic link new_path to path.
   **/
}

/**
 * Sync a file segment with disk.
 **/

function eio_sync_file_range(
     mixed $fd
  ,  int $offset
  ,  int $nbytes
  ,  int $flags
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_sync_file_range permits fine control when synchronizing
   * the open file referred to by the file descriptor fd with disk.
   **/
}

/**
 * Commit buffer cache to disk.
 **/

function eio_sync(
     int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   **/
}

/**
 * Calls Linux' syncfs syscall, if available.
 **/

function eio_syncfs(
     mixed $fd
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   **/
}

/**
 * Truncate a file.
 **/

function eio_truncate(
     string $path
  ,  int $offset = 0
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_truncate causes the regular file named by path to be
   * truncated to a size of precisely length bytes
   **/
}

/**
 * Delete a name and possibly the file it refers to.
 **/

function eio_unlink(
     string $path
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_unlink deletes a name from the file system.
   **/
}

/**
 * Change file last access and modification times.
 **/

function eio_utime(
     string $path
  ,  float $atime
  ,  float $mtime
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   **/
}

/**
 * Write to file.
 **/

function eio_write(
     mixed $fd
  ,  string $str
  ,  int $length = 0
  ,  int $offset = 0
  ,  int $pri = EIO_PRI_DEFAULT
  ,  callable $callback = NULL
  ,  mixed $data = NULL
  ) {

  /**
   * eio_write writes up to length bytes from str at offset offset
   * from the beginning of the file.
   **/
}

/**
 * Enumerates the Enchant providers.
 **/

function enchant_broker_describe( EnchantBroker $broker) {

  /**
   * Enumerates the Enchant providers and tells you some
   * rudimentary information about them. The same info is provided
   * through phpinfo().
   **/
}

/**
 * Whether a dictionary exists or not. Using non-empty tag.
 **/

function enchant_broker_dict_exists(
     EnchantBroker $broker
  ,  string $tag
  ) {

  /**
   * Tells if a dictionary exists or not, using a non-empty tags
   **/
}

/**
 * Free a dictionary resource.
 **/

function enchant_broker_free_dict( EnchantDictionary $dictionary) {

  /**
   * Free a dictionary. As of PHP 8.0.0, it is recommended to
   * unset the object instead of calling this function.
   **/
}

/**
 * Free the broker resource and its dictionaries.
 **/

function enchant_broker_free( EnchantBroker $broker) {

  /**
   * Free a broker with all its dictionaries. As of PHP 8.0.0, it
   * is recommended to unset the object instead of calling this
   * function.
   **/
}

/**
 * Get the directory path for a given backend.
 **/

function enchant_broker_get_dict_path(
     EnchantBroker $broker
  ,  int $type
  ) {

  /**
   * Get the directory path for a given backend.
   **/
}

/**
 * Returns the last error of the broker.
 **/

function enchant_broker_get_error( EnchantBroker $broker) {

  /**
   * Returns the last error which occurred in this broker.
   **/
}

/**
 * Create a new broker object capable of requesting.
 **/

function enchant_broker_init() {

  /**
   **/
}

/**
 * Returns a list of available dictionaries.
 **/

function enchant_broker_list_dicts( EnchantBroker $broker) {

  /**
   * Returns a list of available dictionaries with their details.
   **/
}

/**
 * Create a new dictionary using a tag.
 **/

function enchant_broker_request_dict(
     EnchantBroker $broker
  ,  string $tag
  ) {

  /**
   * create a new dictionary using tag, the non-empty language tag
   * you wish to request a dictionary for ("en_US", "de_DE", ...)
   **/
}

/**
 * Creates a dictionary using a PWL file.
 **/

function enchant_broker_request_pwl_dict(
     EnchantBroker $broker
  ,  string $filename
  ) {

  /**
   * Creates a dictionary using a PWL file. A PWL file is personal
   * word file one word per line.
   **/
}

/**
 * Set the directory path for a given backend.
 **/

function enchant_broker_set_dict_path(
     EnchantBroker $broker
  ,  int $type
  ,  string $path
  ) {

  /**
   * Set the directory path for a given backend.
   **/
}

/**
 * Declares a preference of dictionaries to use for the language.
 **/

function enchant_broker_set_ordering(
     EnchantBroker $broker
  ,  string $tag
  ,  string $ordering
  ) {

  /**
   * Declares a preference of dictionaries to use for the language
   * described/referred to by 'tag'. The ordering is a comma
   * delimited list of provider names. As a special exception, the
   * "*" tag can be used as a language tag to declare a default
   * ordering for any language that does not explicitly declare an
   * ordering.
   **/
}

/**
 * &Alias; enchant_dict_add.
 **/

function () {

  /**
   **/
}

/**
 * Add 'word' to this spell-checking session.
 **/

function enchant_dict_add_to_session(
     EnchantDictionary $dictionary
  ,  string $word
  ) {

  /**
   * Add a word to the given dictionary. It will be added only for
   * the active spell-checking session.
   **/
}

/**
 * Add a word to personal word list.
 **/

function enchant_dict_add(
     EnchantDictionary $dictionary
  ,  string $word
  ) {

  /**
   * Add a word to personal word list of the given dictionary.
   **/
}

/**
 * Check whether a word is correctly spelled or not.
 **/

function enchant_dict_check(
     EnchantDictionary $dictionary
  ,  string $word
  ) {

  /**
   * If the word is correctly spelled return &true;, otherwise
   * return &false;
   **/
}

/**
 * Describes an individual dictionary.
 **/

function enchant_dict_describe( EnchantDictionary $dictionary) {

  /**
   * Returns the details of the dictionary.
   **/
}

/**
 * Returns the last error of the current spelling-session.
 **/

function enchant_dict_get_error( EnchantDictionary $dictionary) {

  /**
   * Returns the last error of the current spelling-session
   **/
}

/**
 * Whether or not 'word' exists in this spelling-session.
 **/

function enchant_dict_is_added(
     EnchantDictionary $dictionary
  ,  string $word
  ) {

  /**
   * Tells whether or not a word already exists in the current
   * session.
   **/
}

/**
 * &Alias; enchant_dict_is_added.
 **/

function () {

  /**
   **/
}

/**
 * Check the word is correctly spelled and provide suggestions.
 **/

function enchant_dict_quick_check(
     EnchantDictionary $dictionary
  ,  string $word
  ,  array &$suggestions = null
  ) {

  /**
   * If the word is correctly spelled return &true;, otherwise
   * return &false;, if suggestions variable is provided, fill it
   * with spelling alternatives.
   **/
}

/**
 * Add a correction for a word.
 **/

function enchant_dict_store_replacement(
     EnchantDictionary $dictionary
  ,  string $misspelled
  ,  string $correct
  ) {

  /**
   * Add a correction for 'mis' using 'cor'. Notes that you
   * replaced @mis with @cor, so it's possibly more likely that
   * future occurrences of @mis will be replaced with @cor. So it
   * might bump @cor up in the suggestion list.
   **/
}

/**
 * Will return a list of values if any of those pre-conditions.
 * are not met.
 **/

function enchant_dict_suggest(
     EnchantDictionary $dictionary
  ,  string $word
  ) {

  /**
   **/
}

/**
 * Generates a backtrace.
 **/

function debug_backtrace(
     int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT
  ,  int $limit = 0
  ) {

  /**
   * debug_backtrace generates a PHP backtrace.
   **/
}

/**
 * Prints a backtrace.
 **/

function debug_print_backtrace( int $options = 0,  int $limit = 0) {

  /**
   * debug_print_backtrace prints a PHP backtrace. It prints the
   * function calls, included/required files and evaled stuff.
   **/
}

/**
 * Clear the most recent error.
 **/

function error_clear_last() {

  /**
   **/
}

/**
 * Get the last occurred error.
 **/

function error_get_last() {

  /**
   * Gets information about the last error that occurred.
   **/
}

/**
 * Send an error message to the defined error handling routines.
 **/

function error_log(
     string $message
  ,  int $message_type = 0
  , $destination = null
  , $additional_headers = null
  ) {

  /**
   * Sends an error message to the web server's error log or to a
   * file.
   **/
}

/**
 * Sets which PHP errors are reported.
 **/

function error_reporting($error_level = null) {

  /**
   * The error_reporting function sets the error_reporting
   * directive at runtime. PHP has many levels of errors, using
   * this function sets that level for the duration (runtime) of
   * your script. If the optional error_level is not set,
   * error_reporting will just return the current error reporting
   * level.
   **/
}

/**
 * Restores the previous error handler function.
 **/

function restore_error_handler() {

  /**
   * Used after changing the error handler function using
   * set_error_handler, to revert to the previous error handler
   * (which could be the built-in or a user defined function).
   **/
}

/**
 * Restores the previously defined exception handler function.
 **/

function restore_exception_handler() {

  /**
   * Used after changing the exception handler function using
   * set_exception_handler, to revert to the previous exception
   * handler (which could be the built-in or a user defined
   * function).
   **/
}

/**
 * Sets a user-defined error handler function.
 **/

function set_error_handler($callback,  int $error_levels = E_ALL) {

  /**
   * Sets a user function (callback) to handle errors in a script.
   *
   * This function can be used to define custom error handlers
   * during runtime, for example in applications which need to do
   * file/data cleanup when a critical error happens, or when
   * triggering an error in response to certain conditions (using
   * trigger_error).
   *
   * It is important to remember that the standard PHP error
   * handler is completely bypassed for the error types specified
   * by error_levels unless the callback function returns &false;.
   * error_reporting settings will have no effect and the error
   * handler will be called regardless - however, it's still
   * possible to read the current value of error_reporting and act
   * appropriately.
   *
   * Also note that it is the handler's responsibility to stop the
   * script's execution if necessary by calling exit. If the
   * error-handler function returns, script execution will continue
   * with the next statement after the one that caused an error.
   *
   * The following error types cannot be handled with a user
   * defined function: E_ERROR, E_PARSE, E_CORE_ERROR,
   * E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING independent
   * of where they were raised, and most of E_STRICT raised in the
   * file where set_error_handler is called.
   *
   * If errors occur before the script is executed (e.g. on file
   * uploads) the custom error handler cannot be called since it is
   * not registered at that time.
   **/
}

/**
 * Sets a user-defined exception handler function.
 **/

function set_exception_handler($callback) {

  /**
   * Sets the default exception handler if an exception is not
   * caught within a try/catch block. Execution will stop after the
   * callback is called.
   **/
}

/**
 * Generates a user-level error/warning/notice message.
 **/

function trigger_error(
     string $message
  ,  int $error_level = E_USER_NOTICE
  ) {

  /**
   * Used to trigger a user error condition, it can be used in
   * conjunction with the built-in error handler, or with a user
   * defined function that has been set as the new error handler
   * (set_error_handler).
   *
   * This function is useful when you need to generate a
   * particular response to an exception at runtime.
   **/
}

/**
 * &Alias; trigger_error.
 **/

function () {

  /**
   * &info.function.alias; trigger_error.
   **/
}

/**
 * Escape a string to be used as a shell argument.
 **/

function escapeshellarg( string $arg) {

  /**
   * escapeshellarg adds single quotes around a string and
   * quotes/escapes any existing single quotes allowing you to pass
   * a string directly to a shell function and having it be treated
   * as a single safe argument. This function should be used to
   * escape individual arguments to shell functions coming from
   * user input. The shell functions include exec, system and the
   * backtick operator.
   *
   * On Windows, escapeshellarg instead replaces percent signs,
   * exclamation marks (delayed variable substitution) and double
   * quotes with spaces and adds double quotes around the string.
   * Furthermore, each streak of consecutive backslashes (\) is
   * escaped by one additional backslash.
   **/
}

/**
 * Escape shell metacharacters.
 **/

function escapeshellcmd( string $command) {

  /**
   * escapeshellcmd escapes any characters in a string that might
   * be used to trick a shell command into executing arbitrary
   * commands. This function should be used to make sure that any
   * data coming from user input is escaped before this data is
   * passed to the exec or system functions, or to the backtick
   * operator.
   *
   * Following characters are preceded by a backslash:
   * &#;`|*?~<>^()[]{}$\, \x0A and \xFF. ' and " are escaped only
   * if they are not paired. On Windows, all these characters plus
   * % and ! are preceded by a caret (^).
   **/
}

/**
 * Execute an external program.
 **/

function exec(
     string $command
  ,  array &$output = null
  ,  int &$result_code = null
  ) {

  /**
   * exec executes the given command.
   **/
}

/**
 * Execute an external program and display raw output.
 **/

function passthru( string $command,  int &$result_code = null) {

  /**
   * The passthru function is similar to the exec function in that
   * it executes a command. This function should be used in place
   * of exec or system when the output from the Unix command is
   * binary data which needs to be passed directly back to the
   * browser. A common use for this is to execute something like
   * the pbmplus utilities that can output an image stream
   * directly. By setting the Content-type to image/gif and then
   * calling a pbmplus program to output a gif, you can create PHP
   * scripts that output images directly.
   **/
}

/**
 * Close a process opened by proc_open and return the exit code.
 * of that process.
 **/

function proc_close( resource $process) {

  /**
   * proc_close is similar to pclose except that it only works on
   * processes opened by proc_open. proc_close waits for the
   * process to terminate, and returns its exit code. Open pipes to
   * that process are closed when this function is called, in order
   * to avoid a deadlock - the child process may not be able to
   * exit while the pipes are open.
   **/
}

/**
 * Get information about a process opened by proc_open.
 **/

function proc_get_status( resource $process) {

  /**
   * proc_get_status fetches data about a process opened using
   * proc_open.
   **/
}

/**
 * Change the priority of the current process.
 **/

function proc_nice( int $priority) {

  /**
   * proc_nice changes the priority of the current process by the
   * amount specified in priority. A positive priority will lower
   * the priority of the current process, whereas a negative
   * priority will raise the priority.
   *
   * proc_nice is not related to proc_open and its associated
   * functions in any way.
   **/
}

/**
 * Execute a command and open file pointers for input/output.
 **/

function proc_open(
    $command
  ,  array $descriptor_spec
  ,  array &$pipes
  , $cwd = null
  , $env_vars = null
  , $options = null
  ) {

  /**
   * proc_open is similar to popen but provides a much greater
   * degree of control over the program execution.
   **/
}

/**
 * Kills a process opened by proc_open.
 **/

function proc_terminate( resource $process,  int $signal = 15) {

  /**
   * Signals a process (created using proc_open) that it should
   * terminate. proc_terminate returns immediately and does not
   * wait for the process to terminate.
   *
   * proc_terminate allows you terminate the process and continue
   * with other tasks. You may poll the process (to see if it has
   * stopped yet) by using the proc_get_status function.
   **/
}

/**
 * Execute command via shell and return the complete output as a.
 * string.
 **/

function shell_exec( string $command) {

  /**
   * This function is identical to the backtick operator.
   *
   * On Windows, the underlying pipe is opened in text mode which
   * can cause the function to fail for binary output. Consider to
   * use popen instead for such cases.
   **/
}

/**
 * Execute an external program and display the output.
 **/

function system( string $command,  int &$result_code = null) {

  /**
   * system is just like the C version of the function in that it
   * executes the given command and outputs the result.
   *
   * The system call also tries to automatically flush the web
   * server's output buffer after each line of output if PHP is
   * running as a server module.
   *
   * If you need to execute a command and have all the data from
   * the command passed directly back without any interference, use
   * the passthru function.
   **/
}

/**
 * Determine the type of an image.
 **/

function exif_imagetype( string $filename) {

  /**
   * exif_imagetype reads the first bytes of an image and checks
   * its signature.
   *
   * exif_imagetype can be used to avoid calls to other exif
   * functions with unsupported file types or in conjunction with
   * $_SERVER['HTTP_ACCEPT'] to check whether or not the viewer is
   * able to see a specific image in the browser.
   **/
}

/**
 * Reads the EXIF headers from an image file.
 **/

function exif_read_data(
    $file
  , $required_sections = null
  ,  bool $as_arrays = false
  ,  bool $read_thumbnail = false
  ) {

  /**
   * exif_read_data reads the EXIF headers from an image file.
   * This way you can read meta data generated by digital cameras.
   *
   * EXIF headers tend to be present in JPEG/TIFF images generated
   * by digital cameras, but unfortunately each digital camera
   * maker has a different idea of how to actually tag their
   * images, so you can't always rely on a specific Exif header
   * being present.
   *
   * Height and Width are computed the same way getimagesize does
   * so their values must not be part of any header returned. Also,
   * html is a height/width text string to be used inside normal
   * HTML.
   *
   * When an Exif header contains a Copyright note, this itself
   * can contain two values. As the solution is inconsistent in the
   * Exif 2.10 standard, the COMPUTED section will return both
   * entries Copyright.Photographer and Copyright.Editor while the
   * IFD0 sections contains the byte array with the NULL character
   * that splits both entries. Or just the first entry if the
   * datatype was wrong (normal behaviour of Exif). The COMPUTED
   * will also contain the entry Copyright which is either the
   * original copyright string, or a comma separated list of the
   * photo and editor copyright.
   *
   * The tag UserComment has the same problem as the Copyright
   * tag. It can store two values. First the encoding used, and
   * second the value itself. If so the IFD section only contains
   * the encoding or a byte array. The COMPUTED section will store
   * both in the entries UserCommentEncoding and UserComment. The
   * entry UserComment is available in both cases so it should be
   * used in preference to the value in IFD0 section.
   *
   * exif_read_data also validates EXIF data tags according to the
   * EXIF specification (&url.exifspec;, page 20).
   **/
}

/**
 * Get the header name for an index.
 **/

function exif_tagname( int $index) {

  /**
   **/
}

/**
 * Retrieve the embedded thumbnail of an image.
 **/

function exif_thumbnail(
    $file
  ,  int &$width = null
  ,  int &$height = null
  ,  int &$image_type = null
  ) {

  /**
   * exif_thumbnail reads the embedded thumbnail of an image.
   *
   * If you want to deliver thumbnails through this function, you
   * should send the mimetype information using the header
   * function.
   *
   * It is possible that exif_thumbnail cannot create an image but
   * can determine its size. In this case, the return value is
   * &false; but width and height are set.
   **/
}

/**
 * &Alias; exif_read_data.
 **/

function () {

  /**
   **/
}

/**
 * Waits until the output from a process matches one of the.
 * patterns, a specified time period has passed, or an EOF is.
 * seen.
 **/

function expect_expectl(
     resource $expect
  ,  array $cases
  ,  array &$match
  ) {

  /**
   * Waits until the output from a process matches one of the
   * patterns, a specified time period has passed, or an EOF is
   * seen.
   *
   * If match is provided, then it is filled with the result of
   * search. The matched string can be found in match[0]. The match
   * substrings (according to the parentheses) in the original
   * pattern can be found in match[1], match[2], and so on, up to
   * match[9] (the limitation of libexpect).
   **/
}

/**
 * Execute command via Bourne shell, and open the PTY stream to.
 * the process.
 **/

function expect_popen( string $command) {

  /**
   * Execute command via Bourne shell, and open the PTY stream to
   * the process.
   **/
}

/**
 * Trains on an entire dataset, for a period of time using the.
 * Cascade2 training algorithm.
 **/

function fann_cascadetrain_on_data(
     resource $ann
  ,  resource $data
  ,  int $max_neurons
  ,  int $neurons_between_reports
  ,  float $desired_error
  ) {

  /**
   * The cascade output change fraction is a number between 0 and
   * 1 determining how large a fraction the fann_get_MSE value
   * should change within fann_get_cascade_output_stagnation_epochs
   * during training of the output connections, in order for the
   * training not to stagnate. If the training stagnates, the
   * training of the output connections will be ended and new
   * candidates will be prepared.
   *
   * This training uses the parameters set using the
   * fann_set_cascade_..., but it also uses another training
   * algorithm as it’s internal training algorithm. This
   * algorithm can be set to either FANN_TRAIN_RPROP or
   * FANN_TRAIN_QUICKPROP by fann_set_training_algorithm, and the
   * parameters set for these training algorithms will also affect
   * the cascade training.
   **/
}

/**
 * Trains on an entire dataset read from file, for a period of.
 * time using the Cascade2 training algorithm.
 **/

function fann_cascadetrain_on_file(
     resource $ann
  ,  string $filename
  ,  int $max_neurons
  ,  int $neurons_between_reports
  ,  float $desired_error
  ) {

  /**
   * Does the same as fann_cascadetrain_on_data, but reads the
   * training data directly from a file.
   **/
}

/**
 * Clears scaling parameters.
 **/

function fann_clear_scaling_params( resource $ann) {

  /**
   * Clears scaling parameters.
   **/
}

/**
 * Creates a copy of a fann structure.
 **/

function fann_copy( resource $ann) {

  /**
   * Creates a copy of a fann structure.
   **/
}

/**
 * Constructs a backpropagation neural network from a.
 * configuration file.
 **/

function fann_create_from_file( string $configuration_file) {

  /**
   * Constructs a backpropagation neural network from a
   * configuration file, which have been saved by fann_save.
   **/
}

/**
 * Creates a standard backpropagation neural network which is not.
 * fully connectected and has shortcut connections.
 **/

function fann_create_shortcut_array( int $num_layers,  array $layers) {

  /**
   * Creates a standard backpropagation neural network which is
   * not fully connectected and has shortcut connections using an
   * array of layers sizes.
   **/
}

/**
 * Creates a standard backpropagation neural network which is not.
 * fully connectected and has shortcut connections.
 **/

function fann_create_shortcut(
     int $num_layers
  ,  int $num_neurons1
  ,  int $num_neurons2
  ,  int $num_neuronsN
  ) {

  /**
   * Creates a standard backpropagation neural network, which is
   * not fully connected and which also has shortcut connections.
   *
   * Shortcut connections are connections that skip layers. A
   * fully connected network with shortcut connections, is a
   * network where all neurons are connected to all neurons in
   * later layers. Including direct connections from the input
   * layer to the output layer.
   **/
}

/**
 * Creates a standard backpropagation neural network, which is.
 * not fully connected using an array of layer sizes.
 **/

function fann_create_sparse_array(
     float $connection_rate
  ,  int $num_layers
  ,  array $layers
  ) {

  /**
   * Creates a standard backpropagation neural network, which is
   * not fully connected using an array of layer sizes.
   **/
}

/**
 * Creates a standard backpropagation neural network, which is.
 * not fully connected.
 **/

function fann_create_sparse(
     float $connection_rate
  ,  int $num_layers
  ,  int $num_neurons1
  ,  int $num_neurons2
  ,  int $num_neuronsN
  ) {

  /**
   * Creates a standard backpropagation neural network, which is
   * not fully connected.
   **/
}

/**
 * Creates a standard fully connected backpropagation neural.
 * network using an array of layer sizes.
 **/

function fann_create_standard_array( int $num_layers,  array $layers) {

  /**
   * Creates a standard fully connected backpropagation neural
   * network.
   *
   * There will be a bias neuron in each layer (except the output
   * layer), and this bias neuron will be connected to all neurons
   * in the next layer. When running the network, the bias nodes
   * always emits 1.
   *
   * To destroy a neural network use the fann_destroy function.
   **/
}

/**
 * Creates a standard fully connected backpropagation neural.
 * network.
 **/

function fann_create_standard(
     int $num_layers
  ,  int $num_neurons1
  ,  int $num_neurons2
  ,  int $num_neuronsN
  ) {

  /**
   * Creates a standard fully connected backpropagation neural
   * network.
   *
   * There will be a bias neuron in each layer (except the output
   * layer), and this bias neuron will be connected to all neurons
   * in the next layer. When running the network, the bias nodes
   * always emits 1.
   *
   * To destroy a neural network use the fann_destroy function.
   **/
}

/**
 * Creates the training data struct from a user supplied function.
 **/

function fann_create_train_from_callback(
     int $num_data
  ,  int $num_input
  ,  int $num_output
  ,  callable $user_function
  ) {

  /**
   * Creates the training data struct from a user supplied
   * function. As the training data are numerable (data 1, data
   * 2...), the user must write a function that receives the number
   * of the training data set (input, output) and returns the set.
   **/
}

/**
 * Creates an empty training data struct.
 **/

function fann_create_train(
     int $num_data
  ,  int $num_input
  ,  int $num_output
  ) {

  /**
   * Creates an empty training data struct.
   **/
}

/**
 * Scale data in input vector after get it from ann based on.
 * previously calculated parameters.
 **/

function fann_descale_input( resource $ann,  array $input_vector) {

  /**
   * Scale data in input vector after get it from ann based on
   * previously calculated parameters.
   **/
}

/**
 * Scale data in output vector after get it from ann based on.
 * previously calculated parameters.
 **/

function fann_descale_output( resource $ann,  array $output_vector) {

  /**
   * Scale data in output vector after get it from ann based on
   * previously calculated parameters.
   **/
}

/**
 * Descale input and output data based on previously calculated.
 * parameters.
 **/

function fann_descale_train( resource $ann,  resource $train_data) {

  /**
   * Descale input and output data based on previously calculated
   * parameters.
   **/
}

/**
 * Destructs the training data.
 **/

function fann_destroy_train( resource $train_data) {

  /**
   * Destructs the training data
   **/
}

/**
 * Destroys the entire network and properly freeing all the.
 * associated memory.
 **/

function fann_destroy( resource $ann) {

  /**
   * Destroys the entire network and properly freeing all the
   * associated memory.
   **/
}

/**
 * Returns an exact copy of a fann train data.
 **/

function fann_duplicate_train_data( resource $data) {

  /**
   * Returns an exact copy of a fann train data resource.
   **/
}

/**
 * Returns the activation function.
 **/

function fann_get_activation_function(
     resource $ann
  ,  int $layer
  ,  int $neuron
  ) {

  /**
   * Get the activation function for neuron number neuron in layer
   * number layer, counting the input layer as layer 0.
   *
   * It is not possible to get activation functions for the
   * neurons in the input layer.
   *
   * The return value is one of the activation functions
   * constants.
   **/
}

/**
 * Returns the activation steepness for supplied neuron and layer.
 * number.
 **/

function fann_get_activation_steepness(
     resource $ann
  ,  int $layer
  ,  int $neuron
  ) {

  /**
   * Get the activation steepness for neuron number neuron in
   * layer number layer, counting the input layer as layer 0.
   *
   * It is not possible to get activation steepness for the
   * neurons in the input layer.
   *
   * The steepness of an activation function says something about
   * how fast the activation function goes from the minimum to the
   * maximum. A high value for the activation function will also
   * give a more aggressive training.
   *
   * When training neural networks where the output values should
   * be at the extremes (usually 0 and 1, depending on the
   * activation function), a steep activation function can be used
   * (e.g. 1.0).
   *
   * The default activation steepness is 0.5.
   **/
}

/**
 * Get the number of bias in each layer in the network.
 **/

function fann_get_bias_array( resource $ann) {

  /**
   * Get the number of bias in each layer in the network.
   **/
}

/**
 * Returns the bit fail limit used during training.
 **/

function fann_get_bit_fail_limit( resource $ann) {

  /**
   * Returns the bit fail limit used during training.
   *
   * The bit fail limit is used during training where the stop
   * function is set to FANN_STOPFUNC_BIT.
   *
   * The limit is the maximum accepted difference between the
   * desired output and the actual output during training. Each
   * output that diverges more than this limit is counted as an
   * error bit. This difference is divided by two when dealing with
   * symmetric activation functions, so that symmetric and not
   * symmetric activation functions can use the same limit.
   *
   * The default bit fail limit is 0.35.
   **/
}

/**
 * The number of fail bits.
 **/

function fann_get_bit_fail( resource $ann) {

  /**
   * The number of fail bits; means the number of output neurons
   * which differ more than the bit fail limit (see
   * fann_get_bit_fail_limit, fann_set_bit_fail_limit). The bits
   * are counted in all of the training data, so this number can be
   * higher than the number of training data.
   *
   * This value is reset by fann_reset_MSE and updated by all the
   * same functions which also updates the MSE value (e.g.
   * fann_test_data, fann_train_epoch)
   **/
}

/**
 * Returns the number of cascade activation functions.
 **/

function fann_get_cascade_activation_functions_count( resource $ann) {

  /**
   * The number of activation functions in the
   * fann_get_cascade_activation_functions array.
   *
   * The default number of activation functions is 6.
   **/
}

/**
 * Returns the cascade activation functions.
 **/

function fann_get_cascade_activation_functions( resource $ann) {

  /**
   * The cascade activation functions array is an array of the
   * different activation functions used by the candidates
   *
   * See fann_get_cascade_num_candidates for a description of
   * which candidate neurons will be generated by this array.
   *
   * The default activation functions are FANN_SIGMOID,
   * FANN_SIGMOID_SYMMETRIC, FANN_GAUSSIAN,
   * FANN_GAUSSIAN_SYMMETRIC, FANN_ELLIOT, FANN_ELLIOT_SYMMETRIC.
   **/
}

/**
 * The number of activation steepnesses.
 **/

function fann_get_cascade_activation_steepnesses_count(
     resource $ann
  ) {

  /**
   * The number of activation steepnesses in the
   * fann_get_cascade_activation_functions array.
   *
   * The default number of activation steepnesses is 4.
   **/
}

/**
 * Returns the cascade activation steepnesses.
 **/

function fann_get_cascade_activation_steepnesses( resource $ann) {

  /**
   * The cascade activation steepnesses array is an array of the
   * different activation functions used by the candidates.
   *
   * See fann_get_cascade_num_candidates for a description of
   * which candidate neurons will be generated by this array.
   *
   * The default activation steepnesses are {0.25, 0.50, 0.75,
   * 1.00}.
   **/
}

/**
 * Returns the cascade candidate change fraction.
 **/

function fann_get_cascade_candidate_change_fraction( resource $ann) {

  /**
   * The cascade candidate change fraction is a number between 0
   * and 1 determining how large a fraction the fann_get_MSE value
   * should change within
   * fann_get_cascade_candidate_stagnation_epochs during training
   * of the candidate neurons, in order for the training not to
   * stagnate. If the training stagnates, the training of the
   * candidate neurons will be ended and the best candidate will be
   * selected.
   *
   * It means that if the MSE does not change by a fraction of
   * fann_get_cascade_candidate_change_fraction during a period of
   * fann_get_cascade_candidate_stagnation_epochs, the training of
   * the candidate neurons is stopped because the training has
   * stagnated.
   *
   * If the cascade candidate change fraction is low, the
   * candidate neurons will be trained more and if the fraction is
   * high they will be trained less.
   *
   * The default cascade candidate change fraction is 0.01, which
   * is equalent to a 1% change in MSE.
   **/
}

/**
 * Return the candidate limit.
 **/

function fann_get_cascade_candidate_limit( resource $ann) {

  /**
   * The candidate limit is a limit for how much the candidate
   * neuron may be trained. The limit is a limit on the proportion
   * between the MSE and candidate score.
   *
   * Set this to a lower value to avoid overfitting and to a
   * higher if overfitting is not a problem.
   *
   * The default candidate limit is 1000.0.
   **/
}

/**
 * Returns the number of cascade candidate stagnation epochs.
 **/

function fann_get_cascade_candidate_stagnation_epochs( resource $ann) {

  /**
   * The number of cascade candidate stagnation epochs determines
   * the number of epochs training is allowed to continue without
   * changing the MSE by a fraction of
   * fann_get_cascade_candidate_change_fraction.
   *
   * See more info about this parameter in
   * fann_get_cascade_candidate_change_fraction.
   *
   * The default number of cascade candidate stagnation epochs is
   * 12.
   **/
}

/**
 * Returns the maximum candidate epochs.
 **/

function fann_get_cascade_max_cand_epochs( resource $ann) {

  /**
   * The maximum candidate epochs determines the maximum number of
   * epochs the input connections to the candidates may be trained
   * before adding a new candidate neuron.
   *
   * The default max candidate epochs is 150.
   **/
}

/**
 * Returns the maximum out epochs.
 **/

function fann_get_cascade_max_out_epochs( resource $ann) {

  /**
   * The maximum out epochs determines the maximum number of
   * epochs the output connections may be trained after adding a
   * new candidate neuron.
   *
   * The default max out epochs is 150.
   **/
}

/**
 * Returns the minimum candidate epochs.
 **/

function fann_get_cascade_min_cand_epochs( resource $ann) {

  /**
   * The minimum candidate epochs determines the minimum number of
   * epochs the input connections to the candidates may be trained
   * before adding a new candidate neuron.
   *
   * The default min candidate epochs is 50.
   **/
}

/**
 * Returns the minimum out epochs.
 **/

function fann_get_cascade_min_out_epochs( resource $ann) {

  /**
   * The minimum out epochs determines the minimum number of
   * epochs the output connections must be trained after adding a
   * new candidate neuron.
   *
   * The default min out epochs is 50.
   **/
}

/**
 * Returns the number of candidate groups.
 **/

function fann_get_cascade_num_candidate_groups( resource $ann) {

  /**
   * The number of candidate groups is the number of groups of
   * identical candidates which will be used during training.
   *
   * This number can be used to have more candidates without
   * having to define new parameters for the candidates.
   *
   * See fann_get_cascade_num_candidates for a description of
   * which candidate neurons will be generated by this parameter.
   *
   * The default number of candidate groups is 2.
   **/
}

/**
 * Returns the number of candidates used during training.
 **/

function fann_get_cascade_num_candidates( resource $ann) {

  /**
   * The number of candidates used during training (calculated by
   * multiplying fann_get_cascade_activation_functions_count,
   * fann_get_cascade_activation_steepnesses_count and
   * fann_get_cascade_num_candidate_groups).
   *
   * The actual candidates is defined by the
   * fann_get_cascade_activation_functions and
   * fann_get_cascade_activation_steepnesses arrays. These arrays
   * define the activation functions and activation steepnesses
   * used for the candidate neurons. If there are 2 activation
   * functions in the activation function array and 3 steepnesses
   * in the steepness array, then there will be 2x3=6 different
   * candidates which will be trained. These 6 different candidates
   * can be copied into several candidate groups, where the only
   * difference between these groups is the initial weights. If the
   * number of groups is set to 2, then the number of candidate
   * neurons will be 2x3x2=12. The number of candidate groups is
   * defined by fann_set_cascade_num_candidate_groups.
   *
   * The default number of candidates is 6x4x2 = 48
   **/
}

/**
 * Returns the cascade output change fraction.
 **/

function fann_get_cascade_output_change_fraction( resource $ann) {

  /**
   * The cascade output change fraction is a number between 0 and
   * 1 determining how large a fraction of the fann_get_MSE value
   * should change within fann_get_cascade_output_stagnation_epochs
   * during training of the output connections, in order for the
   * training not to stagnate. If the training stagnates, the
   * training of the output connections will be ended and new
   * candidates will be prepared.
   *
   * It means that if the MSE does not change by a fraction of
   * fann_get_cascade_output_change_fraction during a period of
   * fann_get_cascade_output_stagnation_epochs, the training of the
   * output connections is stopped because the training has
   * stagnated.
   *
   * If the cascade output change fraction is low, the output
   * connections will be trained more and if the fraction is high,
   * they will be trained less.
   *
   * The default cascade output change fraction is 0.01, which is
   * equalent to a 1% change in MSE.
   **/
}

/**
 * Returns the number of cascade output stagnation epochs.
 **/

function fann_get_cascade_output_stagnation_epochs( resource $ann) {

  /**
   * The number of cascade output stagnation epochs determines the
   * number of epochs training is allowed to continue without
   * changing the MSE by a fraction of
   * fann_get_cascade_output_change_fraction.
   *
   * See more info about this parameter in
   * fann_get_cascade_output_change_fraction.
   *
   * The default number of cascade output stagnation epochs is 12.
   **/
}

/**
 * Returns the weight multiplier.
 **/

function fann_get_cascade_weight_multiplier( resource $ann) {

  /**
   * The weight multiplier is a parameter which is used to
   * multiply the weights from the candidate neuron before adding
   * the neuron to the neural network. This parameter is usually
   * between 0 and 1, and is used to make the training a bit less
   * aggressive.
   *
   * The default weight multiplier is 0.4.
   **/
}

/**
 * Get connections in the network.
 **/

function fann_get_connection_array( resource $ann) {

  /**
   * Get connections in the network.
   **/
}

/**
 * Get the connection rate used when the network was created.
 **/

function fann_get_connection_rate( resource $ann) {

  /**
   * Get the connection rate used when the network was created.
   **/
}

/**
 * Returns the last error number.
 **/

function fann_get_errno( resource $errdat) {

  /**
   * Returns the last error number.
   **/
}

/**
 * Returns the last errstr.
 **/

function fann_get_errstr( resource $errdat) {

  /**
   * Returns the last errstr.
   **/
}

/**
 * Get the number of neurons in each layer in the network.
 **/

function fann_get_layer_array( resource $ann) {

  /**
   * Get the number of neurons in each layer in the neural
   * network.
   *
   * Bias is not included so the layers match the fann_create
   * functions.
   **/
}

/**
 * Returns the learning momentum.
 **/

function fann_get_learning_momentum( resource $ann) {

  /**
   * The learning momentum can be used to speed up
   * FANN_TRAIN_INCREMENTAL training. A too high momentum will
   * however not benefit training. Setting momentum to 0 will be
   * the same as not using the momentum parameter. The recommended
   * value of this parameter is between 0.0 and 1.0.
   *
   * The default momentum is 0.
   **/
}

/**
 * Returns the learning rate.
 **/

function fann_get_learning_rate( resource $ann) {

  /**
   * The learning rate is used to determine how aggressive
   * training should be for some of the training algorithms
   * (FANN_TRAIN_INCREMENTAL, FANN_TRAIN_BATCH,
   * FANN_TRAIN_QUICKPROP). Do however note that it is not used in
   * FANN_TRAIN_RPROP.
   *
   * The default learning rate is 0.7.
   **/
}

/**
 * Reads the mean square error from the network.
 **/

function fann_get_MSE( resource $ann) {

  /**
   * Reads the mean square error from the network.
   *
   * Reads the mean square error from the network. This value is
   * calculated during training or testing and can therefore
   * sometimes be a bit off if the weights have been changed since
   * the last calculation of the value.
   **/
}

/**
 * Get the type of neural network it was created as.
 **/

function fann_get_network_type( resource $ann) {

  /**
   * Get the type of neural network it was created as.
   **/
}

/**
 * Get the number of input neurons.
 **/

function fann_get_num_input( resource $ann) {

  /**
   * Get the number of input neurons.
   **/
}

/**
 * Get the number of layers in the neural network.
 **/

function fann_get_num_layers( resource $ann) {

  /**
   * Get the number of layers in the neural network.
   **/
}

/**
 * Get the number of output neurons.
 **/

function fann_get_num_output( resource $ann) {

  /**
   * Get the number of output neurons.
   **/
}

/**
 * Returns the decay which is a factor that weights should.
 * decrease in each iteration during quickprop training.
 **/

function fann_get_quickprop_decay( resource $ann) {

  /**
   * The decay is a small negative valued number which is a factor
   * that the weights should decrease in each iteration during
   * quickprop training. This is used to make sure that the weights
   * do not become too high during training.
   *
   * The default decay is -0.0001.
   **/
}

/**
 * Returns the mu factor.
 **/

function fann_get_quickprop_mu( resource $ann) {

  /**
   * The mu factor is used to increase and decrease the step-size
   * during quickprop training. The mu factor should always be
   * above 1, since it would otherwise decrease the step-size when
   * it was suppose to increase it.
   *
   * The default mu factor is 1.75.
   **/
}

/**
 * Returns the increase factor used during RPROP training.
 **/

function fann_get_rprop_decrease_factor( resource $ann) {

  /**
   * The decrease factor is a value smaller than 1, which is used
   * to decrease the step-size during RPROP training.
   *
   * The default decrease factor is 0.5.
   **/
}

/**
 * Returns the maximum step-size.
 **/

function fann_get_rprop_delta_max( resource $ann) {

  /**
   * The maximum step-size is a positive number determining how
   * large the maximum step-size may be.
   *
   * The default delta max is 50.0.
   **/
}

/**
 * Returns the minimum step-size.
 **/

function fann_get_rprop_delta_min( resource $ann) {

  /**
   * The minimum step-size is a small positive number determining
   * how small the minimum step-size may be.
   *
   * The default value delta min is 0.0.
   **/
}

/**
 * Returns the initial step-size.
 **/

function fann_get_rprop_delta_zero( resource $ann) {

  /**
   * The initial step-size is a positive number determining the
   * initial step size.
   *
   * The default delta zero is 0.1.
   **/
}

/**
 * Returns the increase factor used during RPROP training.
 **/

function fann_get_rprop_increase_factor( resource $ann) {

  /**
   * The increase factor is a value larger than 1, which is used
   * to increase the step-size during RPROP training.
   *
   * The default increase factor is 1.2.
   **/
}

/**
 * Returns the sarprop step error shift.
 **/

function fann_get_sarprop_step_error_shift( resource $ann) {

  /**
   * Returns the sarprop step error shift.
   *
   * The default step error shift is 1.385.
   **/
}

/**
 * Returns the sarprop step error threshold factor.
 **/

function fann_get_sarprop_step_error_threshold_factor( resource $ann) {

  /**
   * The sarprop step error threshold factor.
   *
   * The default factor is 0.1.
   **/
}

/**
 * Returns the sarprop temperature.
 **/

function fann_get_sarprop_temperature( resource $ann) {

  /**
   * Returns the sarprop temperature.
   *
   * The default temperature is 0.015.
   **/
}

/**
 * Returns the sarprop weight decay shift.
 **/

function fann_get_sarprop_weight_decay_shift( resource $ann) {

  /**
   * The sarprop weight decay shift.
   *
   * The default delta max is -6.644.
   **/
}

/**
 * Get the total number of connections in the entire network.
 **/

function fann_get_total_connections( resource $ann) {

  /**
   * Get the total number of connections in the entire network.
   **/
}

/**
 * Get the total number of neurons in the entire network.
 **/

function fann_get_total_neurons( resource $ann) {

  /**
   * Get the total number of neurons in the entire network. This
   * number does also include the bias neurons, so a 2-4-2 network
   * has 2+4+2 +2(bias) = 10 neurons.
   **/
}

/**
 * Returns the error function used during training.
 **/

function fann_get_train_error_function( resource $ann) {

  /**
   * Returns the error function used during training.
   *
   * The error functions are described further in error functions
   * constants.
   *
   * The default error function is FANN_ERRORFUNC_TANH.
   **/
}

/**
 * Returns the stop function used during training.
 **/

function fann_get_train_stop_function( resource $ann) {

  /**
   * Returns the stop function used during training.
   *
   * The stop functions are described further in stop functions
   * constants.
   *
   * The default stop function is FANN_STOPFUNC_MSE.
   **/
}

/**
 * Returns the training algorithm.
 **/

function fann_get_training_algorithm( resource $ann) {

  /**
   * Returns the training algorithm. This training algorithm is
   * used by fann_train_on_data and associated functions.
   *
   * Note that this algorithm is also used during
   * fann_cascadetrain_on_data, although only FANN_TRAIN_RPROP and
   * FANN_TRAIN_QUICKPROP is allowed during cascade training.
   **/
}

/**
 * Initialize the weights using Widrow + Nguyen’s algorithm.
 **/

function fann_init_weights( resource $ann,  resource $train_data) {

  /**
   * Initialize the weights using Widrow + Nguyen’s algorithm.
   *
   * This function behaves similarly to fann_randomize_weights. It
   * will use the algorithm developed by Derrick Nguyen and Bernard
   * Widrow to set the weights in such a way as to speed up
   * training. This technique is not always successful, and in some
   * cases can be less efficient than a purely random
   * initialization.
   *
   * The algorithm requires access to the range of the input data
   * (for example largest and smallest input), and therefore
   * accepts a second argument, data, which is the training data
   * that will be used to train the network.
   **/
}

/**
 * Returns the number of training patterns in the train data.
 **/

function fann_length_train_data( resource $data) {

  /**
   * Returns the number of training patterns in the train data
   * resource.
   **/
}

/**
 * Merges the train data.
 **/

function fann_merge_train_data( resource $data1,  resource $data2) {

  /**
   * Merges the data from data1 and data2 into a new train data
   * resource.
   **/
}

/**
 * Returns the number of inputs in each of the training patterns.
 * in the train data.
 **/

function fann_num_input_train_data( resource $data) {

  /**
   * Returns the number of inputs in each of the training patterns
   * in the train data resource.
   **/
}

/**
 * Returns the number of outputs in each of the training patterns.
 * in the train data.
 **/

function fann_num_output_train_data( resource $data) {

  /**
   * Returns the number of outputs in each of the training
   * patterns in the train data resource.
   **/
}

/**
 * Prints the error string.
 **/

function fann_print_error( resource $errdat) {

  /**
   * Prints the error string.
   **/
}

/**
 * Give each connection a random weight between min_weight and.
 * max_weight.
 **/

function fann_randomize_weights(
     resource $ann
  ,  float $min_weight
  ,  float $max_weight
  ) {

  /**
   * Give each connection a random weight between min_weight and
   * max_weight
   *
   * From the beginning the weights are random between -0.1 and
   * 0.1.
   **/
}

/**
 * Reads a file that stores training data.
 **/

function fann_read_train_from_file( string $filename) {

  /**
   * Reads a file that stores training data.
   **/
}

/**
 * Resets the last error number.
 **/

function fann_reset_errno( resource $errdat) {

  /**
   * Resets the last error number.
   **/
}

/**
 * Resets the last error string.
 **/

function fann_reset_errstr( resource $errdat) {

  /**
   * Resets the last error string.
   **/
}

/**
 * Resets the mean square error from the network.
 **/

function fann_reset_MSE( string $ann) {

  /**
   * Resets the mean square error from the network.
   *
   * This function also resets the number of bits that fail.
   **/
}

/**
 * Will run input through the neural network.
 **/

function fann_run( resource $ann,  array $input) {

  /**
   * Will run input through the neural network, returning an array
   * of outputs, the number of which being equal to the number of
   * neurons in the output layer.
   **/
}

/**
 * Save the training structure to a file.
 **/

function fann_save_train( resource $data,  string $file_name) {

  /**
   * Save the training data to a file, with the format as
   * specified in fann_read_train_from_file.
   **/
}

/**
 * Saves the entire network to a configuration file.
 **/

function fann_save( resource $ann,  string $configuration_file) {

  /**
   * Saves the entire network to a configuration file.
   *
   * The configuration file contains all information about the
   * neural network and enables fann_create_from_file to create an
   * exact copy of the neural network and all of the parameters
   * associated with the neural network.
   *
   * These three parameters (fann_set_callback,
   * fann_set_error_log, fann_set_user_data) are NOT saved to the
   * file because they cannot safely be ported to a different
   * location. Also temporary parameters generated during training
   * like fann_get_MSE is not saved.
   **/
}

/**
 * Scales the inputs in the training data to the specified range.
 **/

function fann_scale_input_train_data(
     resource $train_data
  ,  float $new_min
  ,  float $new_max
  ) {

  /**
   * Scales the inputs in the training data to the specified
   * range.
   **/
}

/**
 * Scale data in input vector before feed it to ann based on.
 * previously calculated parameters.
 **/

function fann_scale_input( resource $ann,  array $input_vector) {

  /**
   * Scale data in input vector before feed it to ann based on
   * previously calculated parameters.
   **/
}

/**
 * Scales the outputs in the training data to the specified range.
 **/

function fann_scale_output_train_data(
     resource $train_data
  ,  float $new_min
  ,  float $new_max
  ) {

  /**
   * Scales the outputs in the training data to the specified
   * range.
   **/
}

/**
 * Scale data in output vector before feed it to ann based on.
 * previously calculated parameters.
 **/

function fann_scale_output( resource $ann,  array $output_vector) {

  /**
   * Scale data in output vector before feed it to ann based on
   * previously calculated parameters.
   **/
}

/**
 * Scales the inputs and outputs in the training data to the.
 * specified range.
 **/

function fann_scale_train_data(
     resource $train_data
  ,  float $new_min
  ,  float $new_max
  ) {

  /**
   * Scales the inputs and outputs in the training data to the
   * specified range.
   **/
}

/**
 * Scale input and output data based on previously calculated.
 * parameters.
 **/

function fann_scale_train( resource $ann,  resource $train_data) {

  /**
   * Scale input and output data based on previously calculated
   * parameters.
   **/
}

/**
 * Sets the activation function for all of the hidden layers.
 **/

function fann_set_activation_function_hidden(
     resource $ann
  ,  int $activation_function
  ) {

  /**
   * Sets the activation function for all of the hidden layers.
   **/
}

/**
 * Sets the activation function for all the neurons in the.
 * supplied layer.
 **/

function fann_set_activation_function_layer(
     resource $ann
  ,  int $activation_function
  ,  int $layer
  ) {

  /**
   * Set the activation function for all the neurons in the layer
   * number layer, counting the input layer as layer 0.
   *
   * It is not possible to set activation functions for the
   * neurons in the input layer.
   **/
}

/**
 * Sets the activation function for the output layer.
 **/

function fann_set_activation_function_output(
     resource $ann
  ,  int $activation_function
  ) {

  /**
   * Sets the activation function for the output layer.
   **/
}

/**
 * Sets the activation function for supplied neuron and layer.
 **/

function fann_set_activation_function(
     resource $ann
  ,  int $activation_function
  ,  int $layer
  ,  int $neuron
  ) {

  /**
   * Set the activation function for neuron number neuron in layer
   * number layer, counting the input layer as layer 0.
   *
   * It is not possible to set activation functions for the
   * neurons in the input layer.
   *
   * When choosing an activation function it is important to note
   * that the activation functions have different range.
   * FANN_SIGMOID is e.g. in the 0 - 1 range while
   * FANN_SIGMOID_SYMMETRIC is in the -1 - 1 range and FANN_LINEAR
   * is unbound.
   *
   * The supplied activation_function value must be one of the
   * activation functions constants.
   *
   * The return value is one of the activation functions
   * constants.
   **/
}

/**
 * Sets the steepness of the activation steepness for all neurons.
 * in the all hidden layers.
 **/

function fann_set_activation_steepness_hidden(
     resource $ann
  ,  float $activation_steepness
  ) {

  /**
   * Sets the steepness of the activation steepness for all
   * neurons in the all hidden layers.
   **/
}

/**
 * Sets the activation steepness for all of the neurons in the.
 * supplied layer number.
 **/

function fann_set_activation_steepness_layer(
     resource $ann
  ,  float $activation_steepness
  ,  int $layer
  ) {

  /**
   * Set the activation steepness for all of the neurons in layer
   * number layer, counting the input layer as layer 0.
   *
   * It is not possible to set activation steepness for the
   * neurons in the input layer.
   **/
}

/**
 * Sets the steepness of the activation steepness in the output.
 * layer.
 **/

function fann_set_activation_steepness_output(
     resource $ann
  ,  float $activation_steepness
  ) {

  /**
   * Sets the steepness of the activation steepness in the output
   * layer.
   **/
}

/**
 * Sets the activation steepness for supplied neuron and layer.
 * number.
 **/

function fann_set_activation_steepness(
     resource $ann
  ,  float $activation_steepness
  ,  int $layer
  ,  int $neuron
  ) {

  /**
   * Set the activation steepness for neuron number neuron in
   * layer number layer, counting the input layer as layer 0.
   *
   * It is not possible to set activation steepness for the
   * neurons in the input layer.
   *
   * The steepness of an activation function says something about
   * how fast the activation function goes from the minimum to the
   * maximum. A high value for the activation function will also
   * give a more aggressive training.
   *
   * When training neural networks where the output values should
   * be at the extremes (usually 0 and 1, depending on the
   * activation function), a steep activation function can be used
   * (e.g. 1.0).
   *
   * The default activation steepness is 0.5.
   **/
}

/**
 * Set the bit fail limit used during training.
 **/

function fann_set_bit_fail_limit(
     resource $ann
  ,  float $bit_fail_limit
  ) {

  /**
   * Set the bit fail limit used during training.
   **/
}

/**
 * Sets the callback function for use during training.
 **/

function fann_set_callback( resource $ann,  callable $callback) {

  /**
   * Sets the callback function for use during training. It means
   * that it is called from fann_train_on_data or
   * fann_train_on_file.
   **/
}

/**
 * Sets the array of cascade candidate activation functions.
 **/

function fann_set_cascade_activation_functions(
     resource $ann
  ,  array $cascade_activation_functions
  ) {

  /**
   * Sets the array of cascade candidate activation functions.
   *
   * See fann_get_cascade_num_candidates for a description of
   * which candidate neurons will be generated by this array.
   **/
}

/**
 * Sets the array of cascade candidate activation steepnesses.
 **/

function fann_set_cascade_activation_steepnesses(
     resource $ann
  ,  array $cascade_activation_steepnesses_count
  ) {

  /**
   * Sets the array of cascade candidate activation steepnesses.
   *
   * See fann_get_cascade_num_candidates for a description of
   * which candidate neurons will be generated by this array.
   **/
}

/**
 * Sets the cascade candidate change fraction.
 **/

function fann_set_cascade_candidate_change_fraction(
     resource $ann
  ,  float $cascade_candidate_change_fraction
  ) {

  /**
   * Sets the cascade candidate change fraction.
   **/
}

/**
 * Sets the candidate limit.
 **/

function fann_set_cascade_candidate_limit(
     resource $ann
  ,  float $cascade_candidate_limit
  ) {

  /**
   * Sets the candidate limit.
   **/
}

/**
 * Sets the number of cascade candidate stagnation epochs.
 **/

function fann_set_cascade_candidate_stagnation_epochs(
     resource $ann
  ,  int $cascade_candidate_stagnation_epochs
  ) {

  /**
   * Sets the number of cascade candidate stagnation epochs.
   **/
}

/**
 * Sets the max candidate epochs.
 **/

function fann_set_cascade_max_cand_epochs(
     resource $ann
  ,  int $cascade_max_cand_epochs
  ) {

  /**
   * Sets the max candidate epochs.
   **/
}

/**
 * Sets the maximum out epochs.
 **/

function fann_set_cascade_max_out_epochs(
     resource $ann
  ,  int $cascade_max_out_epochs
  ) {

  /**
   * Sets the maximum out epochs.
   **/
}

/**
 * Sets the min candidate epochs.
 **/

function fann_set_cascade_min_cand_epochs(
     resource $ann
  ,  int $cascade_min_cand_epochs
  ) {

  /**
   * Sets the min candidate epochs.
   **/
}

/**
 * Sets the minimum out epochs.
 **/

function fann_set_cascade_min_out_epochs(
     resource $ann
  ,  int $cascade_min_out_epochs
  ) {

  /**
   * Sets the minimum out epochs.
   **/
}

/**
 * Sets the number of candidate groups.
 **/

function fann_set_cascade_num_candidate_groups(
     resource $ann
  ,  int $cascade_num_candidate_groups
  ) {

  /**
   * Sets the number of candidate groups.
   **/
}

/**
 * Sets the cascade output change fraction.
 **/

function fann_set_cascade_output_change_fraction(
     resource $ann
  ,  float $cascade_output_change_fraction
  ) {

  /**
   * Sets the cascade output change fraction.
   **/
}

/**
 * Sets the number of cascade output stagnation epochs.
 **/

function fann_set_cascade_output_stagnation_epochs(
     resource $ann
  ,  int $cascade_output_stagnation_epochs
  ) {

  /**
   * Sets the number of cascade output stagnation epochs.
   **/
}

/**
 * Sets the weight multiplier.
 **/

function fann_set_cascade_weight_multiplier(
     resource $ann
  ,  float $cascade_weight_multiplier
  ) {

  /**
   * Sets the weight multiplier.
   **/
}

/**
 * Sets where the errors are logged to.
 **/

function fann_set_error_log( resource $errdat,  string $log_file) {

  /**
   * Sets where the errors are logged to.
   **/
}

/**
 * Calculate input scaling parameters for future use based on.
 * training data.
 **/

function fann_set_input_scaling_params(
     resource $ann
  ,  resource $train_data
  ,  float $new_input_min
  ,  float $new_input_max
  ) {

  /**
   * Calculate input scaling parameters for future use based on
   * training data.
   **/
}

/**
 * Sets the learning momentum.
 **/

function fann_set_learning_momentum(
     resource $ann
  ,  float $learning_momentum
  ) {

  /**
   * Sets the learning momentum.
   *
   * More info available in fann_get_learning_momentum.
   **/
}

/**
 * Sets the learning rate.
 **/

function fann_set_learning_rate(
     resource $ann
  ,  float $learning_rate
  ) {

  /**
   * Sets the learning rate.
   *
   * More info available in fann_get_learning_rate.
   **/
}

/**
 * Calculate output scaling parameters for future use based on.
 * training data.
 **/

function fann_set_output_scaling_params(
     resource $ann
  ,  resource $train_data
  ,  float $new_output_min
  ,  float $new_output_max
  ) {

  /**
   * Calculate output scaling parameters for future use based on
   * training data.
   **/
}

/**
 * Sets the quickprop decay factor.
 **/

function fann_set_quickprop_decay(
     resource $ann
  ,  float $quickprop_decay
  ) {

  /**
   * Sets the quickprop decay factor.
   **/
}

/**
 * Sets the quickprop mu factor.
 **/

function fann_set_quickprop_mu( resource $ann,  float $quickprop_mu) {

  /**
   * Sets the quickprop mu factor.
   **/
}

/**
 * Sets the decrease factor used during RPROP training.
 **/

function fann_set_rprop_decrease_factor(
     resource $ann
  ,  float $rprop_decrease_factor
  ) {

  /**
   * Sets the decrease factor used during RPROP training.
   **/
}

/**
 * Sets the maximum step-size.
 **/

function fann_set_rprop_delta_max(
     resource $ann
  ,  float $rprop_delta_max
  ) {

  /**
   * The maximum step-size is a positive number determining how
   * large the maximum step-size may be.
   **/
}

/**
 * Sets the minimum step-size.
 **/

function fann_set_rprop_delta_min(
     resource $ann
  ,  float $rprop_delta_min
  ) {

  /**
   * The minimum step-size is a small positive number determining
   * how small the minimum step-size may be.
   **/
}

/**
 * Sets the initial step-size.
 **/

function fann_set_rprop_delta_zero(
     resource $ann
  ,  float $rprop_delta_zero
  ) {

  /**
   * The initial step-size is a positive number determining the
   * initial step size.
   **/
}

/**
 * Sets the increase factor used during RPROP training.
 **/

function fann_set_rprop_increase_factor(
     resource $ann
  ,  float $rprop_increase_factor
  ) {

  /**
   * Sets the increase factor used during RPROP training.
   **/
}

/**
 * Sets the sarprop step error shift.
 **/

function fann_set_sarprop_step_error_shift(
     resource $ann
  ,  float $sarprop_step_error_shift
  ) {

  /**
   * Sets the sarprop step error shift.
   **/
}

/**
 * Sets the sarprop step error threshold factor.
 **/

function fann_set_sarprop_step_error_threshold_factor(
     resource $ann
  ,  float $sarprop_step_error_threshold_factor
  ) {

  /**
   * Sets the sarprop step error threshold factor.
   **/
}

/**
 * Sets the sarprop temperature.
 **/

function fann_set_sarprop_temperature(
     resource $ann
  ,  float $sarprop_temperature
  ) {

  /**
   * Sets the sarprop temperature.
   **/
}

/**
 * Sets the sarprop weight decay shift.
 **/

function fann_set_sarprop_weight_decay_shift(
     resource $ann
  ,  float $sarprop_weight_decay_shift
  ) {

  /**
   * Sets the sarprop weight decay shift.
   **/
}

/**
 * Calculate input and output scaling parameters for future use.
 * based on training data.
 **/

function fann_set_scaling_params(
     resource $ann
  ,  resource $train_data
  ,  float $new_input_min
  ,  float $new_input_max
  ,  float $new_output_min
  ,  float $new_output_max
  ) {

  /**
   * Calculate input and output scaling parameters for future use
   * based on training data.
   **/
}

/**
 * Sets the error function used during training.
 **/

function fann_set_train_error_function(
     resource $ann
  ,  int $error_function
  ) {

  /**
   * Sets the error function used during training.
   *
   * The error functions are described further in error functions
   * constants.
   **/
}

/**
 * Sets the stop function used during training.
 **/

function fann_set_train_stop_function(
     resource $ann
  ,  int $stop_function
  ) {

  /**
   * Sets the stop function used during training.
   *
   * The stop functions are described further in stop functions
   * constants.
   **/
}

/**
 * Sets the training algorithm.
 **/

function fann_set_training_algorithm(
     resource $ann
  ,  int $training_algorithm
  ) {

  /**
   * Sets the training algorithm.
   *
   * More info available in fann_get_training_algorithm.
   **/
}

/**
 * Set connections in the network.
 **/

function fann_set_weight_array( resource $ann,  array $connections) {

  /**
   * Set connections in the network.
   *
   * Only the weights can be changed, connections and weights are
   * ignored if they do not already exist in the network.
   **/
}

/**
 * Set a connection in the network.
 **/

function fann_set_weight(
     resource $ann
  ,  int $from_neuron
  ,  int $to_neuron
  ,  float $weight
  ) {

  /**
   * Set a connections in the network.
   **/
}

/**
 * Shuffles training data, randomizing the order.
 **/

function fann_shuffle_train_data( resource $train_data) {

  /**
   * Shuffles training data, randomizing the order. This is
   * recommended for incremental training, while it have no
   * influence during batch training.
   **/
}

/**
 * Returns an copy of a subset of the train data.
 **/

function fann_subset_train_data(
     resource $data
  ,  int $pos
  ,  int $length
  ) {

  /**
   * Returns an copy of a subset of the train data resource,
   * starting at position pos and length elements forward.
   *
   * The fann_subset_train_data(train_data, 0,
   * fann_length_train_data(train_data)) do the same as
   * fann_duplicate_train_data
   **/
}

/**
 * Test a set of training data and calculates the MSE for the.
 * training data.
 **/

function fann_test_data( resource $ann,  resource $data) {

  /**
   * Test a set of training data and calculates the MSE for the
   * training data.
   *
   * This function updates the MSE and the bit fail values.
   **/
}

/**
 * Test with a set of inputs, and a set of desired outputs.
 **/

function fann_test(
     resource $ann
  ,  array $input
  ,  array $desired_output
  ) {

  /**
   * Test with a set of inputs, and a set of desired outputs. This
   * operation updates the mean square error, but does not change
   * the network in any way.
   **/
}

/**
 * Train one epoch with a set of training data.
 **/

function fann_train_epoch( resource $ann,  resource $data) {

  /**
   * Train one epoch with the training data stored in data. One
   * epoch is where all of the training data is considered exactly
   * once.
   *
   * This function returns the MSE error as it is calculated
   * either before or during the actual training. This is not the
   * actual MSE after the training epoch, but since calculating
   * this will require to go through the entire training set once
   * more. It is more than adequate to use this value during
   * training.
   *
   * The training algorithm used by this function is chosen by
   * fann_set_training_algorithm function.
   **/
}

/**
 * Trains on an entire dataset for a period of time.
 **/

function fann_train_on_data(
     resource $ann
  ,  resource $data
  ,  int $max_epochs
  ,  int $epochs_between_reports
  ,  float $desired_error
  ) {

  /**
   * Trains on an entire dataset for a period of time.
   *
   * This training uses the training algorithm chosen by
   * fann_set_training_algorithm and the parameters set for these
   * training algorithms.
   **/
}

/**
 * Trains on an entire dataset, which is read from file, for a.
 * period of time.
 **/

function fann_train_on_file(
     resource $ann
  ,  string $filename
  ,  int $max_epochs
  ,  int $epochs_between_reports
  ,  float $desired_error
  ) {

  /**
   * Trains on an entire dataset, which is read from file, for a
   * period of time.
   *
   * This training uses the training algorithm chosen by
   * fann_set_training_algorithm and the parameters set for these
   * training algorithms.
   **/
}

/**
 * Train one iteration with a set of inputs, and a set of desired.
 * outputs.
 **/

function fann_train(
     resource $ann
  ,  array $input
  ,  array $desired_output
  ) {

  /**
   * Train one iteration with a set of inputs, and a set of
   * desired outputs. This training is always incremental training,
   * since only one pattern is presented.
   **/
}

/**
 * Adds javascript code to the FDF document.
 **/

function fdf_add_doc_javascript(
     resource $fdf_document
  ,  string $script_name
  ,  string $script_code
  ) {

  /**
   * Adds a script to the FDF, which Acrobat then adds to the
   * doc-level scripts of a document, once the FDF is imported into
   * it.
   **/
}

/**
 * Adds a template into the FDF document.
 **/

function fdf_add_template(
     resource $fdf_document
  ,  int $newpage
  ,  string $filename
  ,  string $template
  ,  int $rename
  ) {

  /**
   **/
}

/**
 * Close an FDF document.
 **/

function fdf_close( resource $fdf_document) {

  /**
   * Closes the FDF document.
   **/
}

/**
 * Create a new FDF document.
 **/

function fdf_create() {

  /**
   * Creates a new FDF document.
   *
   * This function is needed if one would like to populate input
   * fields in a PDF document with data.
   **/
}

/**
 * Call a user defined function for each document value.
 **/

function fdf_enum_values(
     resource $fdf_document
  ,  callable $function
  ,  mixed $userdata
  ) {

  /**
   **/
}

/**
 * Return error code for last fdf operation.
 **/

function fdf_errno() {

  /**
   * Gets the error code set by the last FDF function call.
   *
   * A textual description of the error may be obtained using with
   * fdf_error.
   **/
}

/**
 * Return error description for FDF error code.
 **/

function fdf_error( int $error_code = -1) {

  /**
   * Gets a textual description for the FDF error code given in
   * error_code.
   **/
}

/**
 * Get the appearance of a field.
 **/

function fdf_get_ap(
     resource $fdf_document
  ,  string $field
  ,  int $face
  ,  string $filename
  ) {

  /**
   * Gets the appearance of a field (i.e. the value of the /AP
   * key) and stores it in a file.
   **/
}

/**
 * Extracts uploaded file embedded in the FDF.
 **/

function fdf_get_attachment(
     resource $fdf_document
  ,  string $fieldname
  ,  string $savepath
  ) {

  /**
   * Extracts a file uploaded by means of the "file selection"
   * field fieldname and stores it under savepath.
   **/
}

/**
 * Get the value of the /Encoding key.
 **/

function fdf_get_encoding( resource $fdf_document) {

  /**
   * Gets the value of the /Encoding key.
   **/
}

/**
 * Get the value of the /F key.
 **/

function fdf_get_file( resource $fdf_document) {

  /**
   * Gets the value of the /F key.
   **/
}

/**
 * Gets the flags of a field.
 **/

function fdf_get_flags(
     resource $fdf_document
  ,  string $fieldname
  ,  int $whichflags
  ) {

  /**
   **/
}

/**
 * Gets a value from the opt array of a field.
 **/

function fdf_get_opt(
     resource $fdf_document
  ,  string $fieldname
  ,  int $element = -1
  ) {

  /**
   **/
}

/**
 * Get the value of the /STATUS key.
 **/

function fdf_get_status( resource $fdf_document) {

  /**
   * Gets the value of the /STATUS key.
   **/
}

/**
 * Get the value of a field.
 **/

function fdf_get_value(
     resource $fdf_document
  ,  string $fieldname
  ,  int $which = -1
  ) {

  /**
   * Gets the value for the requested field.
   **/
}

/**
 * Gets version number for FDF API or file.
 **/

function fdf_get_version( resource $fdf_document) {

  /**
   * Return the FDF version for the given document, or the toolkit
   * API version number if no parameter is given.
   **/
}

/**
 * Sets FDF-specific output headers.
 **/

function fdf_header() {

  /**
   * This is a convenience function to set appropriate HTTP
   * headers for FDF output. It sets the Content-type: to
   * application/vnd.fdf.
   **/
}

/**
 * Get the next field name.
 **/

function fdf_next_field_name(
     resource $fdf_document
  ,  string $fieldname
  ) {

  /**
   * Gets the name of the field after the given field. This name
   * can be used with several functions.
   **/
}

/**
 * Read a FDF document from a string.
 **/

function fdf_open_string( string $fdf_data) {

  /**
   * Reads form data from a string.
   *
   * You can use fdf_open_string together with $HTTP_FDF_DATA to
   * process FDF form input from a remote client.
   **/
}

/**
 * Open a FDF document.
 **/

function fdf_open( string $filename) {

  /**
   * Opens a file with form data.
   *
   * You can also use fdf_open_string to process the results of a
   * PDF form POST request.
   **/
}

/**
 * Sets target frame for form.
 **/

function fdf_remove_item(
     resource $fdf_document
  ,  string $fieldname
  ,  int $item
  ) {

  /**
   **/
}

/**
 * Returns the FDF document as a string.
 **/

function fdf_save_string( resource $fdf_document) {

  /**
   * Returns the FDF document as a string.
   **/
}

/**
 * Save a FDF document.
 **/

function fdf_save( resource $fdf_document,  string $filename) {

  /**
   * Saves a FDF document.
   **/
}

/**
 * Set the appearance of a field.
 **/

function fdf_set_ap(
     resource $fdf_document
  ,  string $field_name
  ,  int $face
  ,  string $filename
  ,  int $page_number
  ) {

  /**
   * Sets the appearance of a field (i.e. the value of the /AP
   * key).
   **/
}

/**
 * Sets FDF character encoding.
 **/

function fdf_set_encoding( resource $fdf_document,  string $encoding) {

  /**
   * Sets the character encoding for the FDF document.
   **/
}

/**
 * Set PDF document to display FDF data in.
 **/

function fdf_set_file(
     resource $fdf_document
  ,  string $url
  ,  string $target_frame
  ) {

  /**
   * Selects a different PDF document to display the form results
   * in then the form it originated from.
   **/
}

/**
 * Sets a flag of a field.
 **/

function fdf_set_flags(
     resource $fdf_document
  ,  string $fieldname
  ,  int $whichFlags
  ,  int $newFlags
  ) {

  /**
   * Sets certain flags of the given field.
   **/
}

/**
 * Sets an javascript action of a field.
 **/

function fdf_set_javascript_action(
     resource $fdf_document
  ,  string $fieldname
  ,  int $trigger
  ,  string $script
  ) {

  /**
   * Sets a javascript action for the given field.
   **/
}

/**
 * Adds javascript code to be executed when Acrobat opens the FDF.
 **/

function fdf_set_on_import_javascript(
     resource $fdf_document
  ,  string $script
  ,  bool $before_data_import
  ) {

  /**
   **/
}

/**
 * Sets an option of a field.
 **/

function fdf_set_opt(
     resource $fdf_document
  ,  string $fieldname
  ,  int $element
  ,  string $str1
  ,  string $str2
  ) {

  /**
   * Sets options of the given field.
   **/
}

/**
 * Set the value of the /STATUS key.
 **/

function fdf_set_status( resource $fdf_document,  string $status) {

  /**
   * Sets the value of the /STATUS key. When a client receives a
   * FDF with a status set it will present the value in an alert
   * box.
   **/
}

/**
 * Sets a submit form action of a field.
 **/

function fdf_set_submit_form_action(
     resource $fdf_document
  ,  string $fieldname
  ,  int $trigger
  ,  string $script
  ,  int $flags
  ) {

  /**
   * Sets a submit form action for the given field.
   **/
}

/**
 * Set target frame for form display.
 **/

function fdf_set_target_frame(
     resource $fdf_document
  ,  string $frame_name
  ) {

  /**
   * Sets the target frame to display a result PDF defined with
   * fdf_save_file in.
   **/
}

/**
 * Set the value of a field.
 **/

function fdf_set_value(
     resource $fdf_document
  ,  string $fieldname
  ,  mixed $value
  ,  int $isName
  ) {

  /**
   * Sets the value for the given field.
   **/
}

/**
 * Sets version number for a FDF file.
 **/

function fdf_set_version( resource $fdf_document,  string $version) {

  /**
   * Sets the FDF version for the given document.
   *
   * Some features supported by this extension are only available
   * in newer FDF versions.
   **/
}

/**
 * Return information about a string buffer.
 **/

function finfo_buffer() {

  /**
   * &style.procedural;
   *
   * &style.oop;
   *
   * This function is used to get information about binary data in
   * a string.
   **/
}

/**
 * Close finfo instance.
 **/

function finfo_close( finfo $finfo) {

  /**
   * This function closes the instance opened by finfo_open.
   **/
}

/**
 * Return information about a file.
 **/

function finfo_file() {

  /**
   * &style.procedural;
   *
   * &style.oop;
   *
   * This function is used to get information about a file.
   **/
}

/**
 * Create a new finfo instance.
 **/

function finfo_open() {

  /**
   * &style.procedural;
   *
   * &style.oop; (constructor):
   *
   * This function opens a magic database and returns its
   * instance.
   **/
}

/**
 * Set libmagic configuration options.
 **/

function finfo_set_flags() {

  /**
   * &style.procedural;
   *
   * &style.oop;
   *
   * This function sets various Fileinfo options. Options can be
   * set also directly in finfo_open or other Fileinfo functions.
   **/
}

/**
 * Detect MIME Content-type for a file.
 **/

function mime_content_type($filename) {

  /**
   * Returns the MIME content type for a file as determined by
   * using information from the magic.mime file.
   **/
}

/**
 * Returns trailing name component of path.
 **/

function basename( string $path,  string $suffix = "") {

  /**
   * Given a string containing the path to a file or directory,
   * this function will return the trailing name component.
   *
   * basename operates naively on the input string, and is not
   * aware of the actual filesystem, or path components such as
   * "..".
   *
   * basename is locale aware, so for it to see the correct
   * basename with multibyte character paths, the matching locale
   * must be set using the setlocale function. If path contains
   * characters which are invalid for the current locale, the
   * behavior of basename is undefined.
   **/
}

/**
 * Changes file group.
 **/

function chgrp( string $filename, $group) {

  /**
   * Attempts to change the group of the file filename to group.
   *
   * Only the superuser may change the group of a file
   * arbitrarily; other users may change the group of a file to any
   * group of which that user is a member.
   **/
}

/**
 * Changes file mode.
 **/

function chmod( string $filename,  int $permissions) {

  /**
   * Attempts to change the mode of the specified file to that
   * given in permissions.
   **/
}

/**
 * Changes file owner.
 **/

function chown( string $filename, $user) {

  /**
   * Attempts to change the owner of the file filename to user
   * user. Only the superuser may change the owner of a file.
   **/
}

/**
 * Clears file status cache.
 **/

function clearstatcache(
     bool $clear_realpath_cache = false
  ,  string $filename = ""
  ) {

  /**
   * When you use stat, lstat, or any of the other functions
   * listed in the affected functions list (below), PHP caches the
   * information those functions return in order to provide faster
   * performance. However, in certain cases, you may want to clear
   * the cached information. For instance, if the same file is
   * being checked multiple times within a single script, and that
   * file is in danger of being removed or changed during that
   * script's operation, you may elect to clear the status cache.
   * In these cases, you can use the clearstatcache function to
   * clear the information that PHP caches about a file.
   *
   * You should also note that PHP doesn't cache information about
   * non-existent files. So, if you call file_exists on a file that
   * doesn't exist, it will return &false; until you create the
   * file. If you create the file, it will return &true; even if
   * you then delete the file. However unlink clears the cache
   * automatically.
   *
   * This function caches information about specific filenames, so
   * you only need to call clearstatcache if you are performing
   * multiple operations on the same filename and require the
   * information about that particular file to not be cached.
   *
   * Affected functions include stat, lstat, file_exists,
   * is_writable, is_readable, is_executable, is_file, is_dir,
   * is_link, filectime, fileatime, filemtime, fileinode,
   * filegroup, fileowner, filesize, filetype, and fileperms.
   **/
}

/**
 * Copies file.
 **/

function copy( string $from,  string $to, $context = null) {

  /**
   * Makes a copy of the file from to to.
   *
   * If you wish to move a file, use the rename function.
   **/
}

/**
 * See unlink or unset.
 **/

function () {

  /**
   * There is no delete keyword or function in the PHP language.
   * If you arrived at this page seeking to delete a file, try
   * unlink. To delete a variable from the local scope, check out
   * unset.
   **/
}

/**
 * Returns a parent directory's path.
 **/

function dirname( string $path,  int $levels = 1) {

  /**
   * Given a string containing the path of a file or directory,
   * this function will return the parent directory's path that is
   * levels up from the current directory.
   *
   * dirname operates naively on the input string, and is not
   * aware of the actual filesystem, or path components such as
   * "..".
   *
   * On Windows, dirname assumes the currently set codepage, so
   * for it to see the correct directory name with multibyte
   * character paths, the matching codepage must be set. If path
   * contains characters which are invalid for the current
   * codepage, the behavior of dirname is undefined.
   *
   * On other systems, dirname assumes path to be encoded in an
   * ASCII compatible encoding. Otherwise the behavior of the the
   * function is undefined.
   **/
}

/**
 * Returns available space on filesystem or disk partition.
 **/

function disk_free_space( string $directory) {

  /**
   * Given a string containing a directory, this function will
   * return the number of bytes available on the corresponding
   * filesystem or disk partition.
   **/
}

/**
 * Returns the total size of a filesystem or disk partition.
 **/

function disk_total_space( string $directory) {

  /**
   * Given a string containing a directory, this function will
   * return the total number of bytes on the corresponding
   * filesystem or disk partition.
   **/
}

/**
 * &Alias; disk_free_space.
 **/

function () {

  /**
   **/
}

/**
 * Closes an open file pointer.
 **/

function fclose( resource $stream) {

  /**
   * The file pointed to by stream is closed.
   **/
}

/**
 * Synchronizes data (but not meta-data) to the file.
 **/

function fdatasync( resource $stream) {

  /**
   * This function synchronizes stream contents to storage media,
   * just like fsync does, but it does not synchronize file
   * meta-data. Note that this function is only effectively
   * different in POSIX systems. In Windows, this function is
   * aliased to fsync.
   **/
}

/**
 * Tests for end-of-file on a file pointer.
 **/

function feof( resource $stream) {

  /**
   * Tests for end-of-file on a file pointer.
   **/
}

/**
 * Flushes the output to a file.
 **/

function fflush( resource $stream) {

  /**
   * This function forces a write of all buffered output to the
   * resource pointed to by the file stream.
   **/
}

/**
 * Gets character from file pointer.
 **/

function fgetc( resource $stream) {

  /**
   * Gets a character from the given file pointer.
   **/
}

/**
 * Gets line from file pointer and parse for CSV fields.
 **/

function fgetcsv(
     resource $stream
  , $length = null
  ,  string $separator = ","
  ,  string $enclosure = "\""
  ,  string $escape = "\\"
  ) {

  /**
   * Similar to fgets except that fgetcsv parses the line it reads
   * for fields in CSV format and returns an array containing the
   * fields read.
   *
   * The locale settings are taken into account by this function.
   * If LC_CTYPE is e.g. en_US.UTF-8, files in one-byte encodings
   * may be read wrongly by this function.
   **/
}

/**
 * Gets line from file pointer.
 **/

function fgets( resource $stream, $length = null) {

  /**
   * Gets a line from file pointer.
   **/
}

/**
 * Gets line from file pointer and strip HTML tags.
 **/

function fgetss(
     resource $handle
  ,  int $length
  ,  string $allowable_tags
  ) {

  /**
   * Identical to fgets, except that fgetss attempts to strip any
   * NUL bytes, HTML and PHP tags from the text it reads. The
   * function retains the parsing state from call to call, and as
   * such is not equivalent to calling strip_tags on the return
   * value of fgets.
   **/
}

/**
 * Checks whether a file or directory exists.
 **/

function file_exists( string $filename) {

  /**
   * Checks whether a file or directory exists.
   **/
}

/**
 * Reads entire file into a string.
 **/

function file_get_contents(
     string $filename
  ,  bool $use_include_path = false
  , $context = null
  ,  int $offset = 0
  , $length = null
  ) {

  /**
   * This function is similar to file, except that
   * file_get_contents returns the file in a string, starting at
   * the specified offset up to length bytes. On failure,
   * file_get_contents will return &false;.
   *
   * file_get_contents is the preferred way to read the contents
   * of a file into a string. It will use memory mapping techniques
   * if supported by your OS to enhance performance.
   *
   * If you're opening a URI with special characters, such as
   * spaces, you need to encode the URI with urlencode.
   **/
}

/**
 * Write data to a file.
 **/

function file_put_contents(
     string $filename
  ,  mixed $data
  ,  int $flags = 0
  , $context = null
  ) {

  /**
   * This function is identical to calling fopen, fwrite and
   * fclose successively to write data to a file.
   *
   * If filename does not exist, the file is created. Otherwise,
   * the existing file is overwritten, unless the FILE_APPEND flag
   * is set.
   **/
}

/**
 * Reads entire file into an array.
 **/

function file( string $filename,  int $flags = 0, $context = null) {

  /**
   * Reads an entire file into an array.
   *
   * You can use file_get_contents to return the contents of a
   * file as a string.
   **/
}

/**
 * Gets last access time of file.
 **/

function fileatime( string $filename) {

  /**
   **/
}

/**
 * Gets inode change time of file.
 **/

function filectime( string $filename) {

  /**
   * Gets the inode change time of a file.
   **/
}

/**
 * Gets file group.
 **/

function filegroup( string $filename) {

  /**
   * Gets the file group. The group ID is returned in numerical
   * format, use posix_getgrgid to resolve it to a group name.
   **/
}

/**
 * Gets file inode.
 **/

function fileinode( string $filename) {

  /**
   * Gets the file inode.
   **/
}

/**
 * Gets file modification time.
 **/

function filemtime( string $filename) {

  /**
   * This function returns the time when the data blocks of a file
   * were being written to, that is, the time when the content of
   * the file was changed.
   **/
}

/**
 * Gets file owner.
 **/

function fileowner( string $filename) {

  /**
   * Gets the file owner.
   **/
}

/**
 * Gets file permissions.
 **/

function fileperms( string $filename) {

  /**
   * Gets permissions for the given file.
   **/
}

/**
 * Gets file size.
 **/

function filesize( string $filename) {

  /**
   * Gets the size for the given file.
   **/
}

/**
 * Gets file type.
 **/

function filetype( string $filename) {

  /**
   * Returns the type of the given file.
   **/
}

/**
 * Portable advisory file locking.
 **/

function flock(
     resource $stream
  ,  int $operation
  ,  int &$would_block = null
  ) {

  /**
   * flock allows you to perform a simple reader/writer model
   * which can be used on virtually every platform (including most
   * Unix derivatives and even Windows).
   *
   * The lock is released also by fclose, or when stream is
   * garbage collected.
   *
   * PHP supports a portable way of locking complete files in an
   * advisory way (which means all accessing programs have to use
   * the same way of locking or it will not work). By default, this
   * function will block until the requested lock is acquired; this
   * may be controlled with the LOCK_NB option documented below.
   **/
}

/**
 * Match filename against a pattern.
 **/

function fnmatch(
     string $pattern
  ,  string $filename
  ,  int $flags = 0
  ) {

  /**
   * fnmatch checks if the passed filename would match the given
   * shell wildcard pattern.
   **/
}

/**
 * Opens file or URL.
 **/

function fopen(
     string $filename
  ,  string $mode
  ,  bool $use_include_path = false
  , $context = null
  ) {

  /**
   * fopen binds a named resource, specified by filename, to a
   * stream.
   **/
}

/**
 * Output all remaining data on a file pointer.
 **/

function fpassthru( resource $stream) {

  /**
   * Reads to EOF on the given file pointer from the current
   * position and writes the results to the output buffer.
   *
   * You may need to call rewind to reset the file pointer to the
   * beginning of the file if you have already written data to the
   * file.
   *
   * If you just want to dump the contents of a file to the output
   * buffer, without first modifying it or seeking to a particular
   * offset, you may want to use the readfile, which saves you the
   * fopen call.
   **/
}

/**
 * Format line as CSV and write to file pointer.
 **/

function fputcsv(
     resource $stream
  ,  array $fields
  ,  string $separator = ","
  ,  string $enclosure = "\""
  ,  string $escape = "\\"
  ,  string $eol = "\n"
  ) {

  /**
   * fputcsv formats a line (passed as a fields array) as CSV and
   * writes it (terminated by a newline) to the specified file
   * stream.
   **/
}

/**
 * &Alias; fwrite.
 **/

function () {

  /**
   **/
}

/**
 * Binary-safe file read.
 **/

function fread( resource $stream,  int $length) {

  /**
   * fread reads up to length bytes from the file pointer
   * referenced by stream. Reading stops as soon as one of the
   * following conditions is met: length bytes have been read EOF
   * (end of file) is reached a packet becomes available or the
   * socket timeout occurs (for network streams) if the stream is
   * read buffered and it does not represent a plain file, at most
   * one read of up to a number of bytes equal to the chunk size
   * (usually 8192) is made; depending on the previously buffered
   * data, the size of the returned data may be larger than the
   * chunk size.
   **/
}

/**
 * Parses input from a file according to a format.
 **/

function fscanf( resource $stream,  string $format,  mixed &$vars) {

  /**
   * The function fscanf is similar to sscanf, but it takes its
   * input from a file associated with stream and interprets the
   * input according to the specified format.
   *
   * Any whitespace in the format string matches any whitespace in
   * the input stream. This means that even a tab (\t) in the
   * format string can match a single space character in the input
   * stream.
   *
   * Each call to fscanf reads one line from the file.
   **/
}

/**
 * Seeks on a file pointer.
 **/

function fseek(
     resource $stream
  ,  int $offset
  ,  int $whence = SEEK_SET
  ) {

  /**
   * Sets the file position indicator for the file referenced by
   * stream. The new position, measured in bytes from the beginning
   * of the file, is obtained by adding offset to the position
   * specified by whence.
   *
   * In general, it is allowed to seek past the end-of-file; if
   * data is then written, reads in any unwritten region between
   * the end-of-file and the sought position will yield bytes with
   * value 0. However, certain streams may not support this
   * behavior, especially when they have an underlying fixed size
   * storage.
   **/
}

/**
 * Gets information about a file using an open file pointer.
 **/

function fstat( resource $stream) {

  /**
   * Gathers the statistics of the file opened by the file pointer
   * stream. This function is similar to the stat function except
   * that it operates on an open file pointer instead of a
   * filename.
   **/
}

/**
 * Synchronizes changes to the file (including meta-data).
 **/

function fsync( resource $stream) {

  /**
   * This function synchronizes changes to the file, including its
   * meta-data. This is similar to fflush, but it also instructs
   * the operating system to write to the storage media.
   **/
}

/**
 * Returns the current position of the file read/write pointer.
 **/

function ftell( resource $stream) {

  /**
   * Returns the position of the file pointer referenced by
   * stream.
   **/
}

/**
 * Truncates a file to a given length.
 **/

function ftruncate( resource $stream,  int $size) {

  /**
   * Takes the filepointer, stream, and truncates the file to
   * length, size.
   **/
}

/**
 * Binary-safe file write.
 **/

function fwrite( resource $stream,  string $data, $length = null) {

  /**
   **/
}

/**
 * Find pathnames matching a pattern.
 **/

function glob( string $pattern,  int $flags = 0) {

  /**
   * The glob function searches for all the pathnames matching
   * pattern according to the rules used by the libc glob()
   * function, which is similar to the rules used by common shells.
   **/
}

/**
 * Tells whether the filename is a directory.
 **/

function is_dir( string $filename) {

  /**
   * Tells whether the given filename is a directory.
   **/
}

/**
 * Tells whether the filename is executable.
 **/

function is_executable( string $filename) {

  /**
   * Tells whether the filename is executable.
   **/
}

/**
 * Tells whether the filename is a regular file.
 **/

function is_file( string $filename) {

  /**
   * Tells whether the given file is a regular file.
   **/
}

/**
 * Tells whether the filename is a symbolic link.
 **/

function is_link( string $filename) {

  /**
   * Tells whether the given file is a symbolic link.
   **/
}

/**
 * Tells whether a file exists and is readable.
 **/

function is_readable( string $filename) {

  /**
   * Tells whether a file exists and is readable.
   **/
}

/**
 * Tells whether the file was uploaded via HTTP POST.
 **/

function is_uploaded_file( string $filename) {

  /**
   * Returns &true; if the file named by filename was uploaded via
   * HTTP POST. This is useful to help ensure that a malicious user
   * hasn't tried to trick the script into working on files upon
   * which it should not be working--for instance, /etc/passwd.
   *
   * This sort of check is especially important if there is any
   * chance that anything done with uploaded files could reveal
   * their contents to the user, or even to other users on the same
   * system.
   *
   * For proper working, the function is_uploaded_file needs an
   * argument like $_FILES['userfile']['tmp_name'], - the name of
   * the uploaded file on the client's machine
   * $_FILES['userfile']['name'] does not work.
   **/
}

/**
 * Tells whether the filename is writable.
 **/

function is_writable( string $filename) {

  /**
   * Returns &true; if the filename exists and is writable. The
   * filename argument may be a directory name allowing you to
   * check if a directory is writable.
   *
   * Keep in mind that PHP may be accessing the file as the user
   * id that the web server runs as (often 'nobody').
   **/
}

/**
 * &Alias; is_writable.
 **/

function () {

  /**
   **/
}

/**
 * Changes group ownership of symlink.
 **/

function lchgrp( string $filename, $group) {

  /**
   * Attempts to change the group of the symlink filename to
   * group.
   *
   * Only the superuser may change the group of a symlink
   * arbitrarily; other users may change the group of a symlink to
   * any group of which that user is a member.
   **/
}

/**
 * Changes user ownership of symlink.
 **/

function lchown( string $filename, $user) {

  /**
   * Attempts to change the owner of the symlink filename to user
   * user.
   *
   * Only the superuser may change the owner of a symlink.
   **/
}

/**
 * Create a hard link.
 **/

function link( string $target,  string $link) {

  /**
   * link creates a hard link.
   **/
}

/**
 * Gets information about a link.
 **/

function linkinfo( string $path) {

  /**
   * Gets information about a link.
   *
   * This function is used to verify if a link (pointed to by
   * path) really exists (using the same method as the S_ISLNK
   * macro defined in stat.h).
   **/
}

/**
 * Gives information about a file or symbolic link.
 **/

function lstat( string $filename) {

  /**
   * Gathers the statistics of the file or symbolic link named by
   * filename.
   **/
}

/**
 * Makes directory.
 **/

function mkdir(
     string $directory
  ,  int $permissions = 0777
  ,  bool $recursive = false
  , $context = null
  ) {

  /**
   * Attempts to create the directory specified by directory.
   **/
}

/**
 * Moves an uploaded file to a new location.
 **/

function move_uploaded_file( string $from,  string $to) {

  /**
   * This function checks to ensure that the file designated by
   * from is a valid upload file (meaning that it was uploaded via
   * PHP's HTTP POST upload mechanism). If the file is valid, it
   * will be moved to the filename given by to.
   *
   * This sort of check is especially important if there is any
   * chance that anything done with uploaded files could reveal
   * their contents to the user, or even to other users on the same
   * system.
   **/
}

/**
 * Parse a configuration file.
 **/

function parse_ini_file(
     string $filename
  ,  bool $process_sections = false
  ,  int $scanner_mode = INI_SCANNER_NORMAL
  ) {

  /**
   * parse_ini_file loads in the ini file specified in filename,
   * and returns the settings in it in an associative array.
   *
   * The structure of the ini file is the same as the &php.ini;'s.
   **/
}

/**
 * Parse a configuration string.
 **/

function parse_ini_string(
     string $ini_string
  ,  bool $process_sections = false
  ,  int $scanner_mode = INI_SCANNER_NORMAL
  ) {

  /**
   * parse_ini_string returns the settings in string ini_string in
   * an associative array.
   *
   * The structure of the ini string is the same as the
   * &php.ini;'s.
   **/
}

/**
 * Returns information about a file path.
 **/

function pathinfo( string $path,  int $flags = PATHINFO_ALL) {

  /**
   * pathinfo returns information about path: either an
   * associative array or a string, depending on flags.
   *
   * For information on retrieving the current path info, read the
   * section on predefined reserved variables.
   *
   * pathinfo operates naively on the input string, and is not
   * aware of the actual filesystem, or path components such as
   * "..".
   *
   * On Windows systems only, the \ character will be interpreted
   * as a directory separator. On other systems it will be treated
   * like any other character.
   *
   * pathinfo is locale aware, so for it to parse a path
   * containing multibyte characters correctly, the matching locale
   * must be set using the setlocale function.
   **/
}

/**
 * Closes process file pointer.
 **/

function pclose( resource $handle) {

  /**
   * Closes a file pointer to a pipe opened by popen.
   **/
}

/**
 * Opens process file pointer.
 **/

function popen( string $command,  string $mode) {

  /**
   * Opens a pipe to a process executed by forking the command
   * given by command.
   **/
}

/**
 * Outputs a file.
 **/

function readfile(
     string $filename
  ,  bool $use_include_path = false
  , $context = null
  ) {

  /**
   * Reads a file and writes it to the output buffer.
   **/
}

/**
 * Returns the target of a symbolic link.
 **/

function readlink( string $path) {

  /**
   * readlink does the same as the readlink C function.
   **/
}

/**
 * Get realpath cache entries.
 **/

function realpath_cache_get() {

  /**
   * Get the contents of the realpath cache.
   **/
}

/**
 * Get realpath cache size.
 **/

function realpath_cache_size() {

  /**
   * Get the amount of memory used by the realpath cache.
   **/
}

/**
 * Returns canonicalized absolute pathname.
 **/

function realpath( string $path) {

  /**
   * realpath expands all symbolic links and resolves references
   * to /./, /../ and extra / characters in the input path and
   * returns the canonicalized absolute pathname.
   **/
}

/**
 * Renames a file or directory.
 **/

function rename( string $from,  string $to, $context = null) {

  /**
   * Attempts to rename from to to, moving it between directories
   * if necessary. If renaming a file and to exists, it will be
   * overwritten. If renaming a directory and to exists, this
   * function will emit a warning.
   **/
}

/**
 * Rewind the position of a file pointer.
 **/

function rewind( resource $stream) {

  /**
   * Sets the file position indicator for stream to the beginning
   * of the file stream.
   *
   * If you have opened the file in append ("a" or "a+") mode, any
   * data you write to the file will always be appended, regardless
   * of the file pointer position.
   **/
}

/**
 * Removes directory.
 **/

function rmdir( string $directory, $context = null) {

  /**
   * Attempts to remove the directory named by directory. The
   * directory must be empty, and the relevant permissions must
   * permit this. A E_WARNING level error will be generated on
   * failure.
   **/
}

/**
 * &Alias; stream_set_write_buffer.
 **/

function () {

  /**
   **/
}

/**
 * Gives information about a file.
 **/

function stat( string $filename) {

  /**
   * Gathers the statistics of the file named by filename. If
   * filename is a symbolic link, statistics are from the file
   * itself, not the symlink. Prior to PHP 7.4.0, on Windows NTS
   * builds the size, atime, mtime and ctime statistics have been
   * from the symlink, in this case.
   *
   * lstat is identical to stat except it would instead be based
   * off the symlinks status.
   **/
}

/**
 * Creates a symbolic link.
 **/

function symlink( string $target,  string $link) {

  /**
   * symlink creates a symbolic link to the existing target with
   * the specified name link.
   **/
}

/**
 * Create file with unique file name.
 **/

function tempnam( string $directory,  string $prefix) {

  /**
   * Creates a file with a unique filename, with access permission
   * set to 0600, in the specified directory. If the directory does
   * not exist or is not writable, tempnam may generate a file in
   * the system's temporary directory, and return the full path to
   * that file, including its name.
   **/
}

/**
 * Creates a temporary file.
 **/

function tmpfile() {

  /**
   * Creates a temporary file with a unique name in
   * read-write-binary (w+b) mode and returns a file handle.
   *
   * The file is automatically removed when closed (for example,
   * by calling fclose, or when there are no remaining references
   * to the file handle returned by tmpfile), or when the script
   * ends.
   **/
}

/**
 * Sets access and modification time of file.
 **/

function touch( string $filename, $mtime = null, $atime = null) {

  /**
   * Attempts to set the access and modification times of the file
   * named in the filename parameter to the value given in mtime.
   * Note that the access time is always modified, regardless of
   * the number of parameters.
   *
   * If the file does not exist, it will be created.
   **/
}

/**
 * Changes the current umask.
 **/

function umask($mask = null) {

  /**
   * umask sets PHP's umask to mask & 0777 and returns the old
   * umask. When PHP is being used as a server module, the umask is
   * restored when each request is finished.
   **/
}

/**
 * Deletes a file.
 **/

function unlink( string $filename, $context = null) {

  /**
   * Deletes filename. Similar to the Unix C unlink() function. An
   * E_WARNING level error will be generated on failure.
   **/
}

/**
 * Checks if variable of specified type exists.
 **/

function filter_has_var( int $input_type,  string $var_name) {

  /**
   **/
}

/**
 * Returns the filter ID belonging to a named filter.
 **/

function filter_id( string $name) {

  /**
   **/
}

/**
 * Gets external variables and optionally filters them.
 **/

function filter_input_array(
     int $type
  , $options = FILTER_DEFAULT
  ,  bool $add_empty = true
  ) {

  /**
   * This function is useful for retrieving many values without
   * repetitively calling filter_input.
   **/
}

/**
 * Gets a specific external variable by name and optionally.
 * filters it.
 **/

function filter_input(
     int $type
  ,  string $var_name
  ,  int $filter = FILTER_DEFAULT
  , $options = 0
  ) {

  /**
   **/
}

/**
 * Returns a list of all supported filters.
 **/

function filter_list() {

  /**
   **/
}

/**
 * Gets multiple variables and optionally filters them.
 **/

function filter_var_array(
     array $array
  , $options = FILTER_DEFAULT
  ,  bool $add_empty = true
  ) {

  /**
   * This function is useful for retrieving many values without
   * repetitively calling filter_var.
   **/
}

/**
 * Filters a variable with a specified filter.
 **/

function filter_var(
     mixed $value
  ,  int $filter = FILTER_DEFAULT
  , $options = 0
  ) {

  /**
   **/
}

/**
 * Flushes all response data to the client.
 **/

function fastcgi_finish_request() {

  /**
   * This function flushes all response data to the client and
   * finishes the request. This allows for time consuming tasks to
   * be performed without leaving the connection to the client
   * open.
   **/
}

/**
 * Returns the current FPM pool status.
 **/

function fpm_get_status() {

  /**
   * This function returns the full current FPM pool status as an
   * associative array. It always returns the full status,
   * including per-process status information. See the FPM status
   * page guide for further details.
   *
   * Note that this function will only be defined if FPM is being
   * used to serve the script.
   **/
}

/**
 * Allocates space for a file to be uploaded.
 **/

function ftp_alloc(
     FTP\Connection $ftp
  ,  int $size
  ,  string &$response = null
  ) {

  /**
   * Sends an ALLO command to the remote FTP server to allocate
   * space for a file to be uploaded.
   *
   * Many FTP servers do not support this command. These servers
   * may return a failure code (&false;) indicating the command is
   * not supported or a success code (&true;) to indicate that
   * pre-allocation is not necessary and the client should continue
   * as though the operation were successful. Because of this, it
   * may be best to reserve this function for servers which
   * explicitly require preallocation.
   *
   **/
}

/**
 * Append the contents of a file to another file on the FTP.
 * server.
 **/

function ftp_append(
     FTP\Connection $ftp
  ,  string $remote_filename
  ,  string $local_filename
  ,  int $mode = FTP_BINARY
  ) {

  /**
   **/
}

/**
 * Changes to the parent directory.
 **/

function ftp_cdup( FTP\Connection $ftp) {

  /**
   * Changes to the parent directory.
   **/
}

/**
 * Changes the current directory on a FTP server.
 **/

function ftp_chdir( FTP\Connection $ftp,  string $directory) {

  /**
   * Changes the current directory to the specified one.
   **/
}

/**
 * Set permissions on a file via FTP.
 **/

function ftp_chmod(
     FTP\Connection $ftp
  ,  int $permissions
  ,  string $filename
  ) {

  /**
   * Sets the permissions on the specified remote file to
   * permissions.
   **/
}

/**
 * Closes an FTP connection.
 **/

function ftp_close( FTP\Connection $ftp) {

  /**
   * ftp_close closes the given link identifier and releases the
   * resource.
   *
   * After calling this function, you can no longer use the FTP
   * connection and must create a new one with ftp_connect.
   **/
}

/**
 * Opens an FTP connection.
 **/

function ftp_connect(
     string $hostname
  ,  int $port = 21
  ,  int $timeout = 90
  ) {

  /**
   * ftp_connect opens an FTP connection to the specified
   * hostname.
   **/
}

/**
 * Deletes a file on the FTP server.
 **/

function ftp_delete( FTP\Connection $ftp,  string $filename) {

  /**
   * ftp_delete deletes the file specified by filename from the
   * FTP server.
   **/
}

/**
 * Requests execution of a command on the FTP server.
 **/

function ftp_exec( FTP\Connection $ftp,  string $command) {

  /**
   * Sends a SITE EXEC command request to the FTP server.
   **/
}

/**
 * Downloads a file from the FTP server and saves to an open file.
 **/

function ftp_fget(
     FTP\Connection $ftp
  ,  resource $stream
  ,  string $remote_filename
  ,  int $mode = FTP_BINARY
  ,  int $offset = 0
  ) {

  /**
   * ftp_fget retrieves remote_filename from the FTP server, and
   * writes it to the given file pointer.
   **/
}

/**
 * Uploads from an open file to the FTP server.
 **/

function ftp_fput(
     FTP\Connection $ftp
  ,  string $remote_filename
  ,  resource $stream
  ,  int $mode = FTP_BINARY
  ,  int $offset = 0
  ) {

  /**
   * ftp_fput uploads the data from a file pointer to a remote
   * file on the FTP server.
   **/
}

/**
 * Retrieves various runtime behaviours of the current FTP.
 * connection.
 **/

function ftp_get_option( FTP\Connection $ftp,  int $option) {

  /**
   * This function returns the value for the requested option from
   * the specified FTP connection.
   **/
}

/**
 * Downloads a file from the FTP server.
 **/

function ftp_get(
     FTP\Connection $ftp
  ,  string $local_filename
  ,  string $remote_filename
  ,  int $mode = FTP_BINARY
  ,  int $offset = 0
  ) {

  /**
   * ftp_get retrieves a remote file from the FTP server, and
   * saves it into a local file.
   **/
}

/**
 * Logs in to an FTP connection.
 **/

function ftp_login(
     FTP\Connection $ftp
  ,  string $username
  ,  string $password
  ) {

  /**
   * Logs in to the given FTP connection.
   **/
}

/**
 * Returns the last modified time of the given file.
 **/

function ftp_mdtm( FTP\Connection $ftp,  string $filename) {

  /**
   * ftp_mdtm gets the last modified time for a remote file.
   *
   * Not all servers support this feature!
   *
   * ftp_mdtm does not work with directories.
   **/
}

/**
 * Creates a directory.
 **/

function ftp_mkdir( FTP\Connection $ftp,  string $directory) {

  /**
   * Creates the specified directory on the FTP server.
   **/
}

/**
 * Returns a list of files in the given directory.
 **/

function ftp_mlsd( FTP\Connection $ftp,  string $directory) {

  /**
   **/
}

/**
 * Continues retrieving/sending a file (non-blocking).
 **/

function ftp_nb_continue( FTP\Connection $ftp) {

  /**
   * Continues retrieving/sending a file non-blocking.
   **/
}

/**
 * Retrieves a file from the FTP server and writes it to an open.
 * file (non-blocking).
 **/

function ftp_nb_fget(
     FTP\Connection $ftp
  ,  resource $stream
  ,  string $remote_filename
  ,  int $mode = FTP_BINARY
  ,  int $offset = 0
  ) {

  /**
   * ftp_nb_fget retrieves a remote file from the FTP server.
   *
   * The difference between this function and ftp_fget is that
   * this function retrieves the file asynchronously, so your
   * program can perform other operations while the file is being
   * downloaded.
   **/
}

/**
 * Stores a file from an open file to the FTP server.
 * (non-blocking).
 **/

function ftp_nb_fput(
     FTP\Connection $ftp
  ,  string $remote_filename
  ,  resource $stream
  ,  int $mode = FTP_BINARY
  ,  int $offset = 0
  ) {

  /**
   * ftp_nb_fput uploads the data from a file pointer to a remote
   * file on the FTP server.
   *
   * The difference between this function and the ftp_fput is that
   * this function uploads the file asynchronously, so your program
   * can perform other operations while the file is being uploaded.
   **/
}

/**
 * Retrieves a file from the FTP server and writes it to a local.
 * file (non-blocking).
 **/

function ftp_nb_get(
     FTP\Connection $ftp
  ,  string $local_filename
  ,  string $remote_filename
  ,  int $mode = FTP_BINARY
  ,  int $offset = 0
  ) {

  /**
   * ftp_nb_get retrieves a remote file from the FTP server, and
   * saves it into a local file.
   *
   * The difference between this function and ftp_get is that this
   * function retrieves the file asynchronously, so your program
   * can perform other operations while the file is being
   * downloaded.
   **/
}

/**
 * Stores a file on the FTP server (non-blocking).
 **/

function ftp_nb_put(
     FTP\Connection $ftp
  ,  string $remote_filename
  ,  string $local_filename
  ,  int $mode = FTP_BINARY
  ,  int $offset = 0
  ) {

  /**
   * ftp_nb_put stores a local file on the FTP server.
   *
   * The difference between this function and the ftp_put is that
   * this function uploads the file asynchronously, so your program
   * can perform other operations while the file is being uploaded.
   **/
}

/**
 * Returns a list of files in the given directory.
 **/

function ftp_nlist( FTP\Connection $ftp,  string $directory) {

  /**
   **/
}

/**
 * Turns passive mode on or off.
 **/

function ftp_pasv( FTP\Connection $ftp,  bool $enable) {

  /**
   * ftp_pasv turns on or off passive mode. In passive mode, data
   * connections are initiated by the client, rather than by the
   * server. It may be needed if the client is behind firewall.
   *
   * Please note that ftp_pasv can only be called after a
   * successful login or otherwise it will fail.
   **/
}

/**
 * Uploads a file to the FTP server.
 **/

function ftp_put(
     FTP\Connection $ftp
  ,  string $remote_filename
  ,  string $local_filename
  ,  int $mode = FTP_BINARY
  ,  int $offset = 0
  ) {

  /**
   * ftp_put stores a local file on the FTP server.
   **/
}

/**
 * Returns the current directory name.
 **/

function ftp_pwd( FTP\Connection $ftp) {

  /**
   **/
}

/**
 * &Alias; ftp_close.
 **/

function () {

  /**
   **/
}

/**
 * Sends an arbitrary command to an FTP server.
 **/

function ftp_raw( FTP\Connection $ftp,  string $command) {

  /**
   * Sends an arbitrary command to the FTP server.
   **/
}

/**
 * Returns a detailed list of files in the given directory.
 **/

function ftp_rawlist(
     FTP\Connection $ftp
  ,  string $directory
  ,  bool $recursive = false
  ) {

  /**
   * ftp_rawlist executes the FTP LIST command, and returns the
   * result as an array.
   **/
}

/**
 * Renames a file or a directory on the FTP server.
 **/

function ftp_rename( FTP\Connection $ftp,  string $from,  string $to) {

  /**
   * ftp_rename renames a file or a directory on the FTP server.
   **/
}

/**
 * Removes a directory.
 **/

function ftp_rmdir( FTP\Connection $ftp,  string $directory) {

  /**
   * Removes the specified directory on the FTP server.
   **/
}

/**
 * Set miscellaneous runtime FTP options.
 **/

function ftp_set_option( FTP\Connection $ftp,  int $option, $value) {

  /**
   * This function controls various runtime options for the
   * specified FTP connection.
   **/
}

/**
 * Sends a SITE command to the server.
 **/

function ftp_site( FTP\Connection $ftp,  string $command) {

  /**
   * ftp_site sends the given SITE command to the FTP server.
   *
   * SITE commands are not standardized, and vary from server to
   * server. They are useful for handling such things as file
   * permissions and group membership.
   **/
}

/**
 * Returns the size of the given file.
 **/

function ftp_size( FTP\Connection $ftp,  string $filename) {

  /**
   * ftp_size returns the size of the given file in bytes.
   *
   * Not all servers support this feature.
   **/
}

/**
 * Opens a Secure SSL-FTP connection.
 **/

function ftp_ssl_connect(
     string $hostname
  ,  int $port = 21
  ,  int $timeout = 90
  ) {

  /**
   * ftp_ssl_connect opens an explicit SSL-FTP connection to the
   * specified hostname. That implies that ftp_ssl_connect will
   * succeed even if the server is not configured for SSL-FTP, or
   * its certificate is invalid. Only when ftp_login is called, the
   * client will send the appropriate AUTH FTP command, so
   * ftp_login will fail in the mentioned cases.
   *
   * Before PHP 7.0.0, ftp_ssl_connect was only available if both
   * the ftp module and the OpenSSL support have been built
   * statically into php; this means that on Windows this function
   * had been undefined in the official PHP builds. To have this
   * function available on Windows, it had been necessary to
   * compile own PHP binaries.
   *
   * ftp_ssl_connect is not intended for use with sFTP. To use
   * sFTP with PHP, please see ssh2_sftp.
   **/
}

/**
 * Returns the system type identifier of the remote FTP server.
 **/

function ftp_systype( FTP\Connection $ftp) {

  /**
   * Returns the system type identifier of the remote FTP server.
   **/
}

/**
 * Call a callback with an array of parameters.
 **/

function call_user_func_array( callable $callback,  array $args) {

  /**
   * Calls the callback given by the first parameter with the
   * parameters in args.
   **/
}

/**
 * Call the callback given by the first parameter.
 **/

function call_user_func( callable $callback,  mixed $args) {

  /**
   * Calls the callback given by the first parameter and passes
   * the remaining parameters as arguments.
   **/
}

/**
 * Create a function dynamically by evaluating a string of code.
 **/

function create_function( string $args,  string $code) {

  /**
   * Creates a function dynamically from the parameters passed,
   * and returns a unique name for it.
   *
   * This function internally performs an eval and as such has the
   * same security issues as eval. It also has bad performance and
   * memory usage characteristics, because the created functions
   * are global and can not be freed.
   *
   * A native anonymous function should be used instead.
   **/
}

/**
 * Call a static method and pass the arguments as array.
 **/

function forward_static_call_array( callable $callback,  array $args) {

  /**
   * Calls a user defined function or method given by the callback
   * parameter. This function must be called within a method
   * context, it can't be used outside a class. It uses the late
   * static binding. All arguments of the forwarded method are
   * passed as values, and as an array, similarly to
   * call_user_func_array.
   **/
}

/**
 * Call a static method.
 **/

function forward_static_call( callable $callback,  mixed $args) {

  /**
   * Calls a user defined function or method given by the callback
   * parameter, with the following arguments. This function must be
   * called within a method context, it can't be used outside a
   * class. It uses the late static binding.
   **/
}

/**
 * Return an item from the argument list.
 **/

function func_get_arg( int $position) {

  /**
   * Gets the specified argument from a user-defined function's
   * argument list.
   *
   * This function may be used in conjunction with func_get_args
   * and func_num_args to allow user-defined functions to accept
   * variable-length argument lists.
   **/
}

/**
 * Returns an array comprising a function's argument list.
 **/

function func_get_args() {

  /**
   * Gets an array of the function's argument list.
   *
   * This function may be used in conjunction with func_get_arg
   * and func_num_args to allow user-defined functions to accept
   * variable-length argument lists.
   **/
}

/**
 * Returns the number of arguments passed to the function.
 **/

function func_num_args() {

  /**
   * Gets the number of arguments passed to the function.
   *
   * This function may be used in conjunction with func_get_arg
   * and func_get_args to allow user-defined functions to accept
   * variable-length argument lists.
   **/
}

/**
 * Return &true; if the given function has been defined.
 **/

function function_exists( string $function) {

  /**
   * Checks the list of defined functions, both built-in
   * (internal) and user-defined, for function.
   **/
}

/**
 * Returns an array of all defined functions.
 **/

function get_defined_functions( bool $exclude_disabled = true) {

  /**
   * Gets an array of all defined functions.
   **/
}

/**
 * Register a function for execution on shutdown.
 **/

function register_shutdown_function(
     callable $callback
  ,  mixed $args
  ) {

  /**
   * Registers a callback to be executed after script execution
   * finishes or exit is called.
   *
   * Multiple calls to register_shutdown_function can be made, and
   * each will be called in the same order as they were registered.
   * If you call exit within one registered shutdown function,
   * processing will stop completely and no other registered
   * shutdown functions will be called.
   *
   * Shutdown functions may also call register_shutdown_function
   * themselves to add a shutdown function to the end of the queue.
   **/
}

/**
 * Register a function for execution on each tick.
 **/

function register_tick_function( callable $callback,  mixed $args) {

  /**
   **/
}

/**
 * De-register a function for execution on each tick.
 **/

function unregister_tick_function( callable $callback) {

  /**
   **/
}

/**
 * Get the Autonomous System Numbers (ASN).
 **/

function geoip_asnum_by_name( string $hostname) {

  /**
   * The geoip_asnum_by_name function will return the Autonomous
   * System Numbers (ASN) associated with an IP address.
   **/
}

/**
 * Get the two letter continent code.
 **/

function geoip_continent_code_by_name( string $hostname) {

  /**
   * The geoip_continent_code_by_name function will return the two
   * letter continent code corresponding to a hostname or an IP
   * address.
   **/
}

/**
 * Get the two letter country code.
 **/

function geoip_country_code_by_name( string $hostname) {

  /**
   * The geoip_country_code_by_name function will return the two
   * letter country code corresponding to a hostname or an IP
   * address.
   **/
}

/**
 * Get the three letter country code.
 **/

function geoip_country_code3_by_name( string $hostname) {

  /**
   * The geoip_country_code3_by_name function will return the
   * three letter country code corresponding to a hostname or an IP
   * address.
   **/
}

/**
 * Get the full country name.
 **/

function geoip_country_name_by_name( string $hostname) {

  /**
   * The geoip_country_name_by_name function will return the full
   * country name corresponding to a hostname or an IP address.
   **/
}

/**
 * Get GeoIP Database information.
 **/

function geoip_database_info( int $database = GEOIP_COUNTRY_EDITION) {

  /**
   * The geoip_database_info function returns the corresponding
   * GeoIP Database version as it is defined inside the binary
   * file.
   *
   * If this function is called without arguments, it returns the
   * version of the GeoIP Free Country Edition.
   **/
}

/**
 * Determine if GeoIP Database is available.
 **/

function geoip_db_avail( int $database) {

  /**
   * The geoip_db_avail function returns if the corresponding
   * GeoIP Database is available and can be opened on disk.
   *
   * It does not indicate if the file is a proper database, only
   * if it is readable.
   **/
}

/**
 * Returns the filename of the corresponding GeoIP Database.
 **/

function geoip_db_filename( int $database) {

  /**
   * The geoip_db_filename function returns the filename of the
   * corresponding GeoIP Database.
   *
   * It does not indicate if the file exists or not on disk, only
   * where the library is looking for the database.
   **/
}

/**
 * Returns detailed information about all GeoIP database types.
 **/

function geoip_db_get_all_info() {

  /**
   * The geoip_db_get_all_info function will return detailed
   * information as a multi-dimensional array about all the GeoIP
   * database types.
   *
   * This function is available even if no databases are
   * installed. It will simply list them as non-available.
   *
   * The names of the different keys of the returning associative
   * array are as follows:
   *
   * "available" -- Boolean, indicate if DB is available (see
   * geoip_db_avail) "description" -- The database description
   * "filename" -- The database filename on disk (see
   * geoip_db_filename)
   **/
}

/**
 * Get the second level domain name.
 **/

function geoip_domain_by_name( string $hostname) {

  /**
   * The geoip_domain_by_name function will return the second
   * level domain names associated with a hostname or an IP
   * address.
   *
   * This function is currently only available to users who have
   * bought a commercial GeoIP Domain Edition. A warning will be
   * issued if the proper database cannot be located.
   **/
}

/**
 * Get the Internet connection type.
 **/

function geoip_id_by_name( string $hostname) {

  /**
   * The geoip_id_by_name function will return the Internet
   * connection type corresponding to a hostname or an IP address.
   *
   * The return value is numeric and can be compared to the
   * following constants:
   *
   * GEOIP_UNKNOWN_SPEED GEOIP_DIALUP_SPEED GEOIP_CABLEDSL_SPEED
   * GEOIP_CORPORATE_SPEED
   **/
}

/**
 * Get the Internet Service Provider (ISP) name.
 **/

function geoip_isp_by_name( string $hostname) {

  /**
   * The geoip_isp_by_name function will return the name of the
   * Internet Service Provider (ISP) that an IP is assigned to.
   *
   * This function is currently only available to users who have
   * bought a commercial GeoIP ISP Edition. A warning will be
   * issued if the proper database cannot be located.
   **/
}

/**
 * Get the Internet connection speed.
 **/

function geoip_netspeedcell_by_name( string $hostname) {

  /**
   * The geoip_netspeedcell_by_name function will return the
   * Internet connection type and speed corresponding to a hostname
   * or an IP address.
   *
   * This function is only available if using GeoIP Library
   * version 1.4.8 or newer.
   *
   * This function is currently only available to users who have
   * bought a commercial GeoIP NetSpeedCell Edition. A warning will
   * be issued if the proper database cannot be located.
   *
   * The return value is a string, common values are:
   *
   * Cable/DSL Dialup Cellular Corporate
   **/
}

/**
 * Get the organization name.
 **/

function geoip_org_by_name( string $hostname) {

  /**
   * The geoip_org_by_name function will return the name of the
   * organization that an IP is assigned to.
   *
   * This function is currently only available to users who have
   * bought a commercial GeoIP Organization, ISP or AS Edition. A
   * warning will be issued if the proper database cannot be
   * located.
   **/
}

/**
 * Returns the detailed City information found in the GeoIP.
 * Database.
 **/

function geoip_record_by_name( string $hostname) {

  /**
   * The geoip_record_by_name function will return the record
   * information corresponding to a hostname or an IP address.
   *
   * This function is available for both GeoLite City Edition and
   * commercial GeoIP City Edition. A warning will be issued if the
   * proper database cannot be located.
   *
   * The names of the different keys of the returning associative
   * array are as follows:
   *
   * "continent_code" -- Two letter continent code (as of version
   * 1.0.4 with libgeoip 1.4.3 or newer) "country_code" -- Two
   * letter country code (see geoip_country_code_by_name)
   * "country_code3" -- Three letter country code (see
   * geoip_country_code3_by_name) "country_name" -- The country
   * name (see geoip_country_name_by_name) "region" -- The region
   * code (ex: CA for California) "city" -- The city. "postal_code"
   * -- The Postal Code, FSA or Zip Code. "latitude" -- The
   * Latitude as signed float. "longitude" -- The Longitude as
   * signed float. "dma_code" -- Designated Market Area code (USA
   * and Canada only) "area_code" -- The PSTN area code (ex: 212)
   **/
}

/**
 * Get the country code and region.
 **/

function geoip_region_by_name( string $hostname) {

  /**
   * The geoip_region_by_name function will return the country and
   * region corresponding to a hostname or an IP address.
   *
   * This function is currently only available to users who have
   * bought a commercial GeoIP Region Edition. A warning will be
   * issued if the proper database cannot be located.
   *
   * The names of the different keys of the returning associative
   * array are as follows:
   *
   * "country_code" -- Two letter country code (see
   * geoip_country_code_by_name) "region" -- The region code (ex:
   * CA for California)
   **/
}

/**
 * Returns the region name for some country and region code combo.
 **/

function geoip_region_name_by_code(
     string $country_code
  ,  string $region_code
  ) {

  /**
   * The geoip_region_name_by_code function will return the region
   * name corresponding to a country and region code combo.
   *
   * In the United States, the region code corresponds to the
   * two-letter abbreviation of each state. In Canada, the region
   * code corresponds to the two-letter province or territory code
   * as attributed by Canada Post.
   *
   * For the rest of the world, GeoIP uses FIPS 10-4 codes to
   * represent regions. You can check &url.maxmind.fips; for a
   * detailed list of FIPS 10-4 codes.
   *
   * This function is always available if using GeoIP Library
   * version 1.4.1 or newer. The data is taken directly from the
   * GeoIP Library and not from any database.
   **/
}

/**
 * Set a custom directory for the GeoIP database.
 **/

function geoip_setup_custom_directory( string $path) {

  /**
   * The geoip_setup_custom_directory function will change the
   * default directory of the GeoIP database. This is equivalent to
   * changing geoip.custom_directory.
   **/
}

/**
 * Returns the time zone for some country and region code combo.
 **/

function geoip_time_zone_by_country_and_region(
     string $country_code
  ,  string $region_code
  ) {

  /**
   * The geoip_time_zone_by_country_and_region function will
   * return the time zone corresponding to a country and region
   * code combo.
   *
   * In the United States, the region code corresponds to the
   * two-letter abbreviation of each state. In Canada, the region
   * code corresponds to the two-letter province or territory code
   * as attributed by Canada Post.
   *
   * For the rest of the world, GeoIP uses FIPS 10-4 codes to
   * represent regions. You can check &url.maxmind.fips; for a
   * detailed list of FIPS 10-4 codes.
   *
   * This function is always available if using GeoIP Library
   * version 1.4.1 or newer. The data is taken directly from the
   * GeoIP Library and not from any database.
   **/
}

/**
 * &Alias; gettext.
 **/

function () {

  /**
   **/
}

/**
 * Specify or get the character encoding in which the messages.
 * from the DOMAIN message catalog will be returned.
 **/

function bind_textdomain_codeset( string $domain, $codeset) {

  /**
   * bind_textdomain_codeset allows to set or get the encoding in
   * which messages from domain will be returned by gettext and
   * similar functions.
   **/
}

/**
 * Sets or gets the path for a domain.
 **/

function bindtextdomain( string $domain, $directory) {

  /**
   * The bindtextdomain function sets or gets the path for a
   * domain.
   **/
}

/**
 * Overrides the domain for a single lookup.
 **/

function dcgettext( string $domain,  string $message,  int $category) {

  /**
   * This function allows you to override the current domain for a
   * single message lookup.
   **/
}

/**
 * Plural version of dcgettext.
 **/

function dcngettext(
     string $domain
  ,  string $singular
  ,  string $plural
  ,  int $count
  ,  int $category
  ) {

  /**
   * This function allows you to override the current domain for a
   * single plural message lookup.
   **/
}

/**
 * Override the current domain.
 **/

function dgettext( string $domain,  string $message) {

  /**
   * The dgettext function allows you to override the current
   * domain for a single message lookup.
   **/
}

/**
 * Plural version of dgettext.
 **/

function dngettext(
     string $domain
  ,  string $singular
  ,  string $plural
  ,  int $count
  ) {

  /**
   * The dngettext function allows you to override the current
   * domain for a single plural message lookup.
   **/
}

/**
 * Lookup a message in the current domain.
 **/

function gettext( string $message) {

  /**
   * Looks up a message in the current domain.
   **/
}

/**
 * Plural version of gettext.
 **/

function ngettext( string $singular,  string $plural,  int $count) {

  /**
   * The plural version of gettext. Some languages have more than
   * one form for plural messages dependent on the count.
   **/
}

/**
 * Sets the default domain.
 **/

function textdomain($domain) {

  /**
   * This function sets the domain to search within when calls are
   * made to gettext, usually the named after an application.
   **/
}

/**
 * Absolute value.
 **/

function gmp_abs($num) {

  /**
   * Get the absolute value of a number.
   **/
}

/**
 * Add numbers.
 **/

function gmp_add($num1, $num2) {

  /**
   * Add two numbers.
   **/
}

/**
 * Bitwise AND.
 **/

function gmp_and($num1, $num2) {

  /**
   * Calculates bitwise AND of two GMP numbers.
   **/
}

/**
 * Calculates binomial coefficient.
 **/

function gmp_binomial($n,  int $k) {

  /**
   * Calculates the binomial coefficient C(n, k).
   **/
}

/**
 * Clear bit.
 **/

function gmp_clrbit( GMP $num,  int $index) {

  /**
   * Clears (sets to 0) bit index in num. The index starts at 0.
   **/
}

/**
 * Compare numbers.
 **/

function gmp_cmp($num1, $num2) {

  /**
   * Compares two numbers.
   **/
}

/**
 * Calculates one's complement.
 **/

function gmp_com($num) {

  /**
   * Returns the one's complement of num.
   **/
}

/**
 * Divide numbers.
 **/

function gmp_div_q(
    $num1
  , $num2
  ,  int $rounding_mode = GMP_ROUND_ZERO
  ) {

  /**
   * Divides num1 by num2 and returns the integer result.
   **/
}

/**
 * Divide numbers and get quotient and remainder.
 **/

function gmp_div_qr(
    $num1
  , $num2
  ,  int $rounding_mode = GMP_ROUND_ZERO
  ) {

  /**
   * The function divides num1 by num2.
   **/
}

/**
 * Remainder of the division of numbers.
 **/

function gmp_div_r(
    $num1
  , $num2
  ,  int $rounding_mode = GMP_ROUND_ZERO
  ) {

  /**
   * Calculates remainder of the integer division of num1 by num2.
   * The remainder has the sign of the num1 argument, if not zero.
   **/
}

/**
 * &Alias; gmp_div_q.
 **/

function () {

  /**
   **/
}

/**
 * Exact division of numbers.
 **/

function gmp_divexact($num1, $num2) {

  /**
   * Divides num1 by num2, using fast "exact division" algorithm.
   * This function produces correct results only when it is known
   * in advance that num2 divides num1.
   **/
}

/**
 * Export to a binary string.
 **/

function gmp_export(
    $num
  ,  int $word_size = 1
  ,  int $flags = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN
  ) {

  /**
   * Export a GMP number to a binary string
   **/
}

/**
 * Factorial.
 **/

function gmp_fact($num) {

  /**
   * Calculates factorial (num!) of num.
   **/
}

/**
 * Calculate GCD.
 **/

function gmp_gcd($num1, $num2) {

  /**
   * Calculate greatest common divisor of num1 and num2. The
   * result is always positive even if either of, or both, input
   * operands are negative.
   **/
}

/**
 * Calculate GCD and multipliers.
 **/

function gmp_gcdext($num1, $num2) {

  /**
   * Calculates g, s, and t, such that a*s + b*t = g = gcd(a,b),
   * where gcd is the greatest common divisor. Returns an array
   * with respective elements g, s and t.
   *
   * This function can be used to solve linear Diophantine
   * equations in two variables. These are equations that allow
   * only integer solutions and have the form: a*x + b*y = c. For
   * more information, go to the "Diophantine Equation" page at
   * MathWorld
   **/
}

/**
 * Hamming distance.
 **/

function gmp_hamdist($num1, $num2) {

  /**
   * Returns the hamming distance between num1 and num2. Both
   * operands should be non-negative.
   **/
}

/**
 * Import from a binary string.
 **/

function gmp_import(
     string $data
  ,  int $word_size = 1
  ,  int $flags = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN
  ) {

  /**
   * Import a GMP number from a binary string
   **/
}

/**
 * Create GMP number.
 **/

function gmp_init($num,  int $base = 0) {

  /**
   * Creates a GMP number from an integer or string.
   **/
}

/**
 * Convert GMP number to integer.
 **/

function gmp_intval($num) {

  /**
   * This function converts GMP number into native PHP ints.
   **/
}

/**
 * Inverse by modulo.
 **/

function gmp_invert($num1, $num2) {

  /**
   * Computes the inverse of num1 modulo num2.
   **/
}

/**
 * Jacobi symbol.
 **/

function gmp_jacobi($num1, $num2) {

  /**
   * Computes Jacobi symbol of num1 and num2. num2 should be odd
   * and must be positive.
   **/
}

/**
 * Kronecker symbol.
 **/

function gmp_kronecker($num1, $num2) {

  /**
   * This function computes the Kronecker symbol of num1 and num2.
   **/
}

/**
 * Calculate LCM.
 **/

function gmp_lcm($num1, $num2) {

  /**
   * This function computes the least common multiple (lcm) of
   * num1 and num2.
   **/
}

/**
 * Legendre symbol.
 **/

function gmp_legendre($num1, $num2) {

  /**
   * Compute the Legendre symbol of num1 and num2. num2 should be
   * odd and must be positive.
   **/
}

/**
 * Modulo operation.
 **/

function gmp_mod($num1, $num2) {

  /**
   * Calculates num1 modulo num2. The result is always
   * non-negative, the sign of num2 is ignored.
   **/
}

/**
 * Multiply numbers.
 **/

function gmp_mul($num1, $num2) {

  /**
   * Multiplies num1 by num2 and returns the result.
   **/
}

/**
 * Negate number.
 **/

function gmp_neg($num) {

  /**
   * Returns the negative value of a number.
   **/
}

/**
 * Find next prime number.
 **/

function gmp_nextprime($num) {

  /**
   * Find next prime number
   **/
}

/**
 * Bitwise OR.
 **/

function gmp_or($num1, $num2) {

  /**
   * Calculates bitwise inclusive OR of two GMP numbers.
   **/
}

/**
 * Perfect power check.
 **/

function gmp_perfect_power($num) {

  /**
   * Checks whether num is a perfect power.
   **/
}

/**
 * Perfect square check.
 **/

function gmp_perfect_square($num) {

  /**
   * Check if a number is a perfect square.
   **/
}

/**
 * Population count.
 **/

function gmp_popcount($num) {

  /**
   * Get the population count.
   **/
}

/**
 * Raise number into power.
 **/

function gmp_pow($num,  int $exponent) {

  /**
   * Raise num into power exponent.
   **/
}

/**
 * Raise number into power with modulo.
 **/

function gmp_powm($num, $exponent, $modulus) {

  /**
   * Calculate (num raised into power exponent) modulo modulus. If
   * exponent is negative, result is undefined.
   **/
}

/**
 * Check if number is "probably prime".
 **/

function gmp_prob_prime($num,  int $repetitions = 10) {

  /**
   * The function uses Miller-Rabin's probabilistic test to check
   * if a number is a prime.
   **/
}

/**
 * Random number.
 **/

function gmp_random_bits( int $bits) {

  /**
   * Generate a random number. The number will be between 0 and
   * 2$bits - 1.
   *
   * bits must greater than 0, and the maximum value is restricted
   * by available memory.
   **/
}

/**
 * Get a uniformly selected integer.
 **/

function gmp_random_range($min, $max) {

  /**
   * Generate a random number. The number will be between min and
   * max.
   *
   * min and max can both be negative, but min must always be less
   * than max.
   **/
}

/**
 * Sets the RNG seed.
 **/

function gmp_random_seed($seed) {

  /**
   **/
}

/**
 * Random number.
 **/

function gmp_random( int $limiter = 20) {

  /**
   * Generate a random number. The number will be between 0 and (2
   * ** n) - 1, where n is the number of bits per limb multiplied
   * by limiter. If limiter is negative, negative numbers are
   * generated.
   *
   * A limb is an internal GMP mechanism. The number of bits in a
   * limb is not static, and can vary from system to system.
   * Generally, the number of bits in a limb is either 32 or 64,
   * but this is not guaranteed.
   **/
}

/**
 * Take the integer part of nth root.
 **/

function gmp_root($num,  int $nth) {

  /**
   * Takes the nth root of num and returns the integer component
   * of the result.
   **/
}

/**
 * Take the integer part and remainder of nth root.
 **/

function gmp_rootrem($num,  int $nth) {

  /**
   * Takes the nth root of num and returns the integer component
   * and remainder of the result.
   **/
}

/**
 * Scan for 0.
 **/

function gmp_scan0($num1,  int $start) {

  /**
   * Scans num1, starting with bit start, towards more significant
   * bits, until the first clear bit is found.
   **/
}

/**
 * Scan for 1.
 **/

function gmp_scan1($num1,  int $start) {

  /**
   * Scans num1, starting with bit start, towards more significant
   * bits, until the first set bit is found.
   **/
}

/**
 * Set bit.
 **/

function gmp_setbit( GMP $num,  int $index,  bool $value = true) {

  /**
   * Sets bit index in num.
   **/
}

/**
 * Sign of number.
 **/

function gmp_sign($num) {

  /**
   * Checks the sign of a number.
   **/
}

/**
 * Calculate square root.
 **/

function gmp_sqrt($num) {

  /**
   * Calculates square root of num.
   **/
}

/**
 * Square root with remainder.
 **/

function gmp_sqrtrem($num) {

  /**
   * Calculate the square root of a number, with remainder.
   **/
}

/**
 * Convert GMP number to string.
 **/

function gmp_strval($num,  int $base = 10) {

  /**
   * Convert GMP number to string representation in base base. The
   * default base is 10.
   **/
}

/**
 * Subtract numbers.
 **/

function gmp_sub($num1, $num2) {

  /**
   * Subtracts num2 from num1 and returns the result.
   **/
}

/**
 * Tests if a bit is set.
 **/

function gmp_testbit($num,  int $index) {

  /**
   * Tests if the specified bit is set.
   **/
}

/**
 * Bitwise XOR.
 **/

function gmp_xor($num1, $num2) {

  /**
   * Calculates bitwise exclusive OR (XOR) of two GMP numbers.
   **/
}

/**
 * Add a key for decryption.
 **/

function gnupg_adddecryptkey(
     resource $identifier
  ,  string $fingerprint
  ,  string $passphrase
  ) {

  /**
   **/
}

/**
 * Add a key for encryption.
 **/

function gnupg_addencryptkey(
     resource $identifier
  ,  string $fingerprint
  ) {

  /**
   **/
}

/**
 * Add a key for signing.
 **/

function gnupg_addsignkey(
     resource $identifier
  ,  string $fingerprint
  ,  string $passphrase
  ) {

  /**
   **/
}

/**
 * Removes all keys which were set for decryption before.
 **/

function gnupg_cleardecryptkeys( resource $identifier) {

  /**
   **/
}

/**
 * Removes all keys which were set for encryption before.
 **/

function gnupg_clearencryptkeys( resource $identifier) {

  /**
   **/
}

/**
 * Removes all keys which were set for signing before.
 **/

function gnupg_clearsignkeys( resource $identifier) {

  /**
   **/
}

/**
 * Decrypts a given text.
 **/

function gnupg_decrypt( resource $identifier,  string $text) {

  /**
   * Decrypts the given text with the keys, which were set with
   * gnupg_adddecryptkey before.
   **/
}

/**
 * Decrypts and verifies a given text.
 **/

function gnupg_decryptverify(
     resource $identifier
  ,  string $text
  ,  string &$plaintext
  ) {

  /**
   * Decrypts and verifies a given text and returns information
   * about the signature.
   **/
}

/**
 * Delete a key from the keyring.
 **/

function gnupg_deletekey(
     resource $identifier
  ,  string $key
  ,  bool $allow_secret
  ) {

  /**
   **/
}

/**
 * Encrypts a given text.
 **/

function gnupg_encrypt( resource $identifier,  string $plaintext) {

  /**
   * Encrypts the given plaintext with the keys, which were set
   * with gnupg_addencryptkey before and returns the encrypted
   * text.
   **/
}

/**
 * Encrypts and signs a given text.
 **/

function gnupg_encryptsign( resource $identifier,  string $plaintext) {

  /**
   * Encrypts and signs the given plaintext with the keys, which
   * were set with gnupg_addsignkey and gnupg_addencryptkey before
   * and returns the encrypted and signed text.
   **/
}

/**
 * Exports a key.
 **/

function gnupg_export( resource $identifier,  string $fingerprint) {

  /**
   * Exports the key fingerprint.
   **/
}

/**
 * Returns the engine info.
 **/

function gnupg_getengineinfo( resource $identifier) {

  /**
   **/
}

/**
 * Returns the errortext, if a function fails.
 **/

function gnupg_geterror( resource $identifier) {

  /**
   **/
}

/**
 * Returns the error info.
 **/

function gnupg_geterrorinfo( resource $identifier) {

  /**
   **/
}

/**
 * Returns the currently active protocol for all operations.
 **/

function gnupg_getprotocol( resource $identifier) {

  /**
   **/
}

/**
 * Search the trust items.
 **/

function gnupg_gettrustlist( resource $identifier,  string $pattern) {

  /**
   **/
}

/**
 * Imports a key.
 **/

function gnupg_import( resource $identifier,  string $keydata) {

  /**
   * Imports the key keydata and returns an array with information
   * about the importprocess.
   **/
}

/**
 * Initialize a connection.
 **/

function gnupg_init($options = null) {

  /**
   **/
}

/**
 * Returns an array with information about all keys that matches.
 * the given pattern.
 **/

function gnupg_keyinfo( resource $identifier,  string $pattern) {

  /**
   **/
}

/**
 * List key signatures.
 **/

function gnupg_listsignatures( resource $identifier,  string $keyid) {

  /**
   **/
}

/**
 * Toggle armored output.
 **/

function gnupg_setarmor( resource $identifier,  int $armor) {

  /**
   * Toggle the armored output.
   **/
}

/**
 * Sets the mode for error_reporting.
 **/

function gnupg_seterrormode( resource $identifier,  int $errormode) {

  /**
   * Sets the mode for error_reporting.
   **/
}

/**
 * Sets the mode for signing.
 **/

function gnupg_setsignmode( resource $identifier,  int $signmode) {

  /**
   * Sets the mode for signing.
   **/
}

/**
 * Signs a given text.
 **/

function gnupg_sign( resource $identifier,  string $plaintext) {

  /**
   * Signs the given plaintext with the keys, which were set with
   * gnupg_addsignkey before and returns the signed text or the
   * signature, depending on what was set with gnupg_setsignmode.
   **/
}

/**
 * Verifies a signed text.
 **/

function gnupg_verify(
     resource $identifier
  ,  string $signed_text
  ,  string $signature
  ,  string &$plaintext
  ) {

  /**
   * Verifies the given signed_text and returns information about
   * the signature.
   **/
}

/**
 * Return a list of registered hashing algorithms.
 **/

function hash_algos() {

  /**
   **/
}

/**
 * Copy hashing context.
 **/

function hash_copy( HashContext $context) {

  /**
   **/
}

/**
 * Timing attack safe string comparison.
 **/

function hash_equals( string $known_string,  string $user_string) {

  /**
   * Checks whether two strings are equal without leaking
   * information about the contents of known_string via the
   * execution time.
   *
   * This function can be used to mitigate timing attacks.
   * Performing a regular comparison with === will take more or
   * less time to execute depending on whether the two values are
   * different or not and at which position the first difference
   * can be found, thus leaking information about the contents of
   * the secret known_string.
   *
   * It is important to provide the user-supplied string as the
   * second parameter, rather than the first.
   **/
}

/**
 * Generate a hash value using the contents of a given file.
 **/

function hash_file(
     string $algo
  ,  string $filename
  ,  bool $binary = false
  ,  array $options = []
  ) {

  /**
   **/
}

/**
 * Finalize an incremental hash and return resulting digest.
 **/

function hash_final( HashContext $context,  bool $binary = false) {

  /**
   **/
}

/**
 * Generate a HKDF key derivation of a supplied key input.
 **/

function hash_hkdf(
     string $algo
  ,  string $key
  ,  int $length = 0
  ,  string $info = ""
  ,  string $salt = ""
  ) {

  /**
   **/
}

/**
 * Return a list of registered hashing algorithms suitable for.
 * hash_hmac.
 **/

function hash_hmac_algos() {

  /**
   **/
}

/**
 * Generate a keyed hash value using the HMAC method and the.
 * contents of a given file.
 **/

function hash_hmac_file(
     string $algo
  ,  string $filename
  ,  string $key
  ,  bool $binary = false
  ) {

  /**
   **/
}

/**
 * Generate a keyed hash value using the HMAC method.
 **/

function hash_hmac(
     string $algo
  ,  string $data
  ,  string $key
  ,  bool $binary = false
  ) {

  /**
   **/
}

/**
 * Initialize an incremental hashing context.
 **/

function hash_init(
     string $algo
  ,  int $flags = 0
  ,  string $key = ""
  ,  array $options = []
  ) {

  /**
   **/
}

/**
 * Generate a PBKDF2 key derivation of a supplied password.
 **/

function hash_pbkdf2(
     string $algo
  ,  string $password
  ,  string $salt
  ,  int $iterations
  ,  int $length = 0
  ,  bool $binary = false
  ,  array $options = []
  ) {

  /**
   **/
}

/**
 * Pump data into an active hashing context from a file.
 **/

function hash_update_file(
     HashContext $context
  ,  string $filename
  , $stream_context = null
  ) {

  /**
   **/
}

/**
 * Pump data into an active hashing context from an open stream.
 **/

function hash_update_stream(
     HashContext $context
  ,  resource $stream
  ,  int $length = -1
  ) {

  /**
   **/
}

/**
 * Pump data into an active hashing context.
 **/

function hash_update( HashContext $context,  string $data) {

  /**
   **/
}

/**
 * Generate a hash value (message digest).
 **/

function hash(
     string $algo
  ,  string $data
  ,  bool $binary = false
  ,  array $options = []
  ) {

  /**
   **/
}

/**
 * &Alias; ibase_add_user.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_affected_rows.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_backup.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_blob_add.
 **/

function () {

  /**
   **/
}

/**
 * Cancel creating blob.
 **/

function fbird_blob_cancel( resource $blob_handle) {

  /**
   * This function will discard a BLOB if it has not yet been
   * closed by fbird_blob_close.
   **/
}

/**
 * &Alias; ibase_blob_close.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_blob_create.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_blob_echo.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_blob_get.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_blob_import.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_blob_info.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_blob_open.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_close.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_commit_ret.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_commit.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_connect.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_db_info.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_delete_user.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_drop_db.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_errcode.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_errmsg.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_execute.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_fetch_assoc.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_fetch_object.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_fetch_row.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_field_info.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_free_event_handler.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_free_query.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_free_result.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_gen_id.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_maintain_db.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_modify_user.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_name_result.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_num_fields.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_num_params.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_param_info.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_pconnect.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_prepare.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_query.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_restore.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_rollback_ret.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_rollback.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_server_info.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_service_attach.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_service_detach.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_set_event_handler.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_trans.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; ibase_wait_event.
 **/

function () {

  /**
   **/
}

/**
 * Add a user to a security database.
 **/

function ibase_add_user(
     resource $service_handle
  ,  string $user_name
  ,  string $password
  ,  string $first_name
  ,  string $middle_name
  ,  string $last_name
  ) {

  /**
   **/
}

/**
 * Return the number of rows that were affected by the previous.
 * query.
 **/

function ibase_affected_rows( resource $link_identifier) {

  /**
   * This function returns the number of rows that were affected
   * by the previous query (INSERT, UPDATE or DELETE) that was
   * executed from within the specified transaction context.
   **/
}

/**
 * Initiates a backup task in the service manager and returns.
 * immediately.
 **/

function ibase_backup(
     resource $service_handle
  ,  string $source_db
  ,  string $dest_file
  ,  int $options = 0
  ,  bool $verbose = false
  ) {

  /**
   * This function passes the arguments to the (remote) database
   * server. There it starts a new backup process. Therefore you
   * won't get any responses.
   **/
}

/**
 * Add data into a newly created blob.
 **/

function ibase_blob_add( resource $blob_handle,  string $data) {

  /**
   * ibase_blob_add adds data into a blob created with
   * ibase_blob_create.
   **/
}

/**
 * Cancel creating blob.
 **/

function ibase_blob_cancel( resource $blob_handle) {

  /**
   * This function will discard a BLOB if it has not yet been
   * closed by ibase_blob_close.
   **/
}

/**
 * Close blob.
 **/

function ibase_blob_close( resource $blob_handle) {

  /**
   * This function closes a BLOB that has either been opened for
   * reading by ibase_blob_open or has been opened for writing by
   * ibase_blob_create.
   **/
}

/**
 * Create a new blob for adding data.
 **/

function ibase_blob_create( resource $link_identifier = null) {

  /**
   * ibase_blob_create creates a new BLOB for filling with data.
   **/
}

/**
 * Output blob contents to browser.
 **/

function ibase_blob_echo( string $blob_id) {

  /**
   * This function opens a BLOB for reading and sends its contents
   * directly to standard output (the browser, in most cases).
   **/
}

/**
 * Get len bytes data from open blob.
 **/

function ibase_blob_get( resource $blob_handle,  int $len) {

  /**
   * This function returns at most len bytes from a BLOB that has
   * been opened for reading by ibase_blob_open.
   *
   * It is not possible to read from a BLOB that has been opened
   * for writing by ibase_blob_create.
   **/
}

/**
 * Create blob, copy file in it, and close it.
 **/

function ibase_blob_import(
     resource $link_identifier
  ,  resource $file_handle
  ) {

  /**
   * This function creates a BLOB, reads an entire file into it,
   * closes it and returns the assigned BLOB id.
   **/
}

/**
 * Return blob length and other useful info.
 **/

function ibase_blob_info(
     resource $link_identifier
  ,  string $blob_id
  ) {

  /**
   * Returns the BLOB length and other useful information.
   **/
}

/**
 * Open blob for retrieving data parts.
 **/

function ibase_blob_open(
     resource $link_identifier
  ,  string $blob_id
  ) {

  /**
   * Opens an existing BLOB for reading.
   **/
}

/**
 * Close a connection to an InterBase database.
 **/

function ibase_close( resource $connection_id = null) {

  /**
   * Closes the link to an InterBase database that's associated
   * with a connection id returned from ibase_connect. Default
   * transaction on link is committed, other transactions are
   * rolled back.
   **/
}

/**
 * Commit a transaction without closing it.
 **/

function ibase_commit_ret( resource $link_or_trans_identifier = null) {

  /**
   * Commits a transaction without closing it.
   **/
}

/**
 * Commit a transaction.
 **/

function ibase_commit( resource $link_or_trans_identifier = null) {

  /**
   * Commits a transaction.
   **/
}

/**
 * Open a connection to a database.
 **/

function ibase_connect(
     string $database
  ,  string $username
  ,  string $password
  ,  string $charset
  ,  int $buffers
  ,  int $dialect
  ,  string $role
  ,  int $sync
  ) {

  /**
   * Establishes a connection to an Firebird/InterBase server.
   *
   * In case a second call is made to ibase_connect with the same
   * arguments, no new link will be established, but instead, the
   * link identifier of the already opened link will be returned.
   * The link to the server will be closed as soon as the execution
   * of the script ends, unless it's closed earlier by explicitly
   * calling ibase_close.
   **/
}

/**
 * Request statistics about a database.
 **/

function ibase_db_info(
     resource $service_handle
  ,  string $db
  ,  int $action
  ,  int $argument = 0
  ) {

  /**
   **/
}

/**
 * Delete a user from a security database.
 **/

function ibase_delete_user(
     resource $service_handle
  ,  string $user_name
  ) {

  /**
   **/
}

/**
 * Drops a database.
 **/

function ibase_drop_db( resource $connection = null) {

  /**
   * This functions drops a database that was opened by either
   * ibase_connect or ibase_pconnect. The database is closed and
   * deleted from the server.
   **/
}

/**
 * Return an error code.
 **/

function ibase_errcode() {

  /**
   * Returns the error code that resulted from the most recent
   * InterBase function call.
   **/
}

/**
 * Return error messages.
 **/

function ibase_errmsg() {

  /**
   **/
}

/**
 * Execute a previously prepared query.
 **/

function ibase_execute( resource $query,  mixed $values) {

  /**
   * Execute a query prepared by ibase_prepare.
   *
   * This is a lot more effective than using ibase_query if you
   * are repeating a same kind of query several times with only
   * some parameters changing.
   **/
}

/**
 * Fetch a result row from a query as an associative array.
 **/

function ibase_fetch_assoc( resource $result,  int $fetch_flag = 0) {

  /**
   * Fetch a result row from a query as an associative array.
   *
   * ibase_fetch_assoc fetches one row of data from the result. If
   * two or more columns of the result have the same field names,
   * the last column will take precedence. To access the other
   * column(s) of the same name, you either need to access the
   * result with numeric indices by using ibase_fetch_row or use
   * alias names in your query.
   **/
}

/**
 * Get an object from a InterBase database.
 **/

function ibase_fetch_object(
     resource $result_id
  ,  int $fetch_flag = 0
  ) {

  /**
   * Fetches a row as a pseudo-object from a given result
   * identifier.
   *
   * Subsequent calls to ibase_fetch_object return the next row in
   * the result set.
   **/
}

/**
 * Fetch a row from an InterBase database.
 **/

function ibase_fetch_row(
     resource $result_identifier
  ,  int $fetch_flag = 0
  ) {

  /**
   * ibase_fetch_row fetches one row of data from the given result
   * set.
   *
   * Subsequent calls to ibase_fetch_row return the next row in
   * the result set, or &false; if there are no more rows.
   **/
}

/**
 * Get information about a field.
 **/

function ibase_field_info( resource $result,  int $field_number) {

  /**
   * Returns an array with information about a field after a
   * select query has been run.
   **/
}

/**
 * Cancels a registered event handler.
 **/

function ibase_free_event_handler( resource $event) {

  /**
   * This function causes the registered event handler specified
   * by event to be cancelled. The callback function will no longer
   * be called for the events it was registered to handle.
   **/
}

/**
 * Free memory allocated by a prepared query.
 **/

function ibase_free_query( resource $query) {

  /**
   * Frees a prepared query.
   **/
}

/**
 * Free a result set.
 **/

function ibase_free_result( resource $result_identifier) {

  /**
   * Frees a result set.
   **/
}

/**
 * Increments the named generator and returns its new value.
 **/

function ibase_gen_id(
     string $generator
  ,  int $increment = 1
  ,  resource $link_identifier = null
  ) {

  /**
   **/
}

/**
 * Execute a maintenance command on the database server.
 **/

function ibase_maintain_db(
     resource $service_handle
  ,  string $db
  ,  int $action
  ,  int $argument = 0
  ) {

  /**
   **/
}

/**
 * Modify a user to a security database.
 **/

function ibase_modify_user(
     resource $service_handle
  ,  string $user_name
  ,  string $password
  ,  string $first_name
  ,  string $middle_name
  ,  string $last_name
  ) {

  /**
   **/
}

/**
 * Assigns a name to a result set.
 **/

function ibase_name_result( resource $result,  string $name) {

  /**
   * This function assigns a name to a result set. This name can
   * be used later in UPDATE|DELETE ... WHERE CURRENT OF name
   * statements.
   **/
}

/**
 * Get the number of fields in a result set.
 **/

function ibase_num_fields( resource $result_id) {

  /**
   * Get the number of fields in a result set.
   **/
}

/**
 * Return the number of parameters in a prepared query.
 **/

function ibase_num_params( resource $query) {

  /**
   * This function returns the number of parameters in the
   * prepared query specified by query. This is the number of
   * binding arguments that must be present when calling
   * ibase_execute.
   **/
}

/**
 * Return information about a parameter in a prepared query.
 **/

function ibase_param_info( resource $query,  int $param_number) {

  /**
   * Returns an array with information about a parameter after a
   * query has been prepared.
   **/
}

/**
 * Open a persistent connection to an InterBase database.
 **/

function ibase_pconnect(
     string $database
  ,  string $username
  ,  string $password
  ,  string $charset
  ,  int $buffers
  ,  int $dialect
  ,  string $role
  ,  int $sync
  ) {

  /**
   * Opens a persistent connection to an InterBase database.
   *
   * ibase_pconnect acts very much like ibase_connect with two
   * major differences.
   *
   * First, when connecting, the function will first try to find a
   * (persistent) link that's already opened with the same
   * parameters. If one is found, an identifier for it will be
   * returned instead of opening a new connection.
   *
   * Second, the connection to the InterBase server will not be
   * closed when the execution of the script ends. Instead, the
   * link will remain open for future use (ibase_close will not
   * close links established by ibase_pconnect). This type of link
   * is therefore called 'persistent'.
   **/
}

/**
 * Prepare a query for later binding of parameter placeholders.
 * and execution.
 **/

function ibase_prepare( string $query) {

  /**
   **/
}

/**
 * Execute a query on an InterBase database.
 **/

function ibase_query(
     resource $link_identifier
  ,  string $query
  ,  int $bind_args
  ) {

  /**
   **/
}

/**
 * Initiates a restore task in the service manager and returns.
 * immediately.
 **/

function ibase_restore(
     resource $service_handle
  ,  string $source_file
  ,  string $dest_db
  ,  int $options = 0
  ,  bool $verbose = false
  ) {

  /**
   * This function passes the arguments to the (remote) database
   * server. There it starts a new restore process. Therefore you
   * won't get any responses.
   **/
}

/**
 * Roll back a transaction without closing it.
 **/

function ibase_rollback_ret(
     resource $link_or_trans_identifier = null
  ) {

  /**
   * Rolls back a transaction without closing it.
   **/
}

/**
 * Roll back a transaction.
 **/

function ibase_rollback( resource $link_or_trans_identifier = null) {

  /**
   * Rolls back a transaction.
   **/
}

/**
 * Request information about a database server.
 **/

function ibase_server_info( resource $service_handle,  int $action) {

  /**
   **/
}

/**
 * Connect to the service manager.
 **/

function ibase_service_attach(
     string $host
  ,  string $dba_username
  ,  string $dba_password
  ) {

  /**
   **/
}

/**
 * Disconnect from the service manager.
 **/

function ibase_service_detach( resource $service_handle) {

  /**
   **/
}

/**
 * Register a callback function to be called when events are.
 * posted.
 **/

function ibase_set_event_handler(
     callable $event_handler
  ,  string $event_name
  ,  string $even_names
  ) {

  /**
   * This function registers a PHP user function as event handler
   * for the specified events.
   **/
}

/**
 * Begin a transaction.
 **/

function ibase_trans( int $trans_args,  resource $link_identifier) {

  /**
   * Begins a transaction.
   *
   * The first call to ibase_trans will not return the default
   * transaction of a connection. All transactions started by
   * ibase_trans will be rolled back at the end of the script if
   * they were not committed or rolled back by either ibase_commit
   * or ibase_rollback.
   *
   * This function will accept multiple trans_args and
   * link_identifier arguments. This allows transactions over
   * multiple database connections, which are committed using a
   * 2-phase commit algorithm. This means you can rely on the
   * updates to either succeed in every database, or fail in every
   * database. It does NOT mean you can use tables from different
   * databases in the same query!
   *
   * If you use transactions over multiple databases, you will
   * have to specify both the link_id and transaction_id in calls
   * to ibase_query and ibase_prepare.
   **/
}

/**
 * Wait for an event to be posted by the database.
 **/

function ibase_wait_event( string $event_name,  string $event_names) {

  /**
   * This function suspends execution of the script until one of
   * the specified events is posted by the database. The name of
   * the event that was posted is returned. This function accepts
   * up to 15 event arguments.
   **/
}

/**
 * Returns or sets the AUTOCOMMIT state for a database.
 * connection.
 **/

function db2_autocommit( resource $connection,  int $value) {

  /**
   * Sets or gets the AUTOCOMMIT behavior of the specified
   * connection resource.
   **/
}

/**
 * Binds a PHP variable to an SQL statement parameter.
 **/

function db2_bind_param(
     resource $stmt
  ,  int $parameter_number
  ,  string $variable_name
  ,  int $parameter_type = DB2_PARAM_IN
  ,  int $data_type = 0
  ,  int $precision = -1
  ,  int $scale = 0
  ) {

  /**
   * Binds a PHP variable to an SQL statement parameter in a
   * statement resource returned by db2_prepare. This function
   * gives you more control over the parameter type, data type,
   * precision, and scale for the parameter than simply passing the
   * variable as part of the optional input array to db2_execute.
   **/
}

/**
 * Returns an object with properties that describe the DB2.
 * database client.
 **/

function db2_client_info( resource $connection) {

  /**
   * This function returns an object with read-only properties
   * that return information about the DB2 database client. The
   * following table lists the DB2 client properties: DB2 client
   * properties Property name Return type Description APPL_CODEPAGE
   * int The application code page. CONN_CODEPAGE int The code page
   * for the current connection. DATA_SOURCE_NAME string The data
   * source name (DSN) used to create the current connection to the
   * database. DRIVER_NAME string The name of the library that
   * implements the DB2 Call Level Interface (CLI) specification.
   * DRIVER_ODBC_VER string The version of ODBC that the DB2 client
   * supports. This returns a string "MM.mm" where MM is the major
   * version and mm is the minor version. The DB2 client always
   * returns "03.51". DRIVER_VER string The version of the client,
   * in the form of a string "MM.mm.uuuu" where MM is the major
   * version, mm is the minor version, and uuuu is the update. For
   * example, "08.02.0001" represents major version 8, minor
   * version 2, update 1. ODBC_SQL_CONFORMANCE string The level of
   * ODBC SQL grammar supported by the client: MINIMUM Supports the
   * minimum ODBC SQL grammar. CORE Supports the core ODBC SQL
   * grammar. EXTENDED Supports extended ODBC SQL grammar. ODBC_VER
   * string The version of ODBC that the ODBC driver manager
   * supports. This returns a string "MM.mm.rrrr" where MM is the
   * major version, mm is the minor version, and rrrr is the
   * release. The DB2 client always returns "03.01.0000".
   *
   * The level of ODBC SQL grammar supported by the client: MINIMUM
   * Supports the minimum ODBC SQL grammar. CORE Supports the core
   * ODBC SQL grammar. EXTENDED Supports extended ODBC SQL grammar.
   *
   * Supports the minimum ODBC SQL grammar.
   *
   * Supports the core ODBC SQL grammar.
   *
   * Supports extended ODBC SQL grammar.
   **/
}

/**
 * Closes a database connection.
 **/

function db2_close( resource $connection) {

  /**
   * This function closes a DB2 client connection created with
   * db2_connect and returns the corresponding resources to the
   * database server.
   *
   * If you attempt to close a persistent DB2 client connection
   * created with db2_pconnect, the close request is ignored and
   * the persistent DB2 client connection remains available for the
   * next caller.
   **/
}

/**
 * Returns a result set listing the columns and associated.
 * privileges for a table.
 **/

function db2_column_privileges(
     resource $connection
  , $qualifier = null
  , $schema = null
  , $table_name = null
  , $column_name = null
  ) {

  /**
   * Returns a result set listing the columns and associated
   * privileges for a table.
   **/
}

/**
 * Returns a result set listing the columns and associated.
 * metadata for a table.
 **/

function db2_columns(
     resource $connection
  , $qualifier = null
  , $schema = null
  , $table_name = null
  , $column_name = null
  ) {

  /**
   * Returns a result set listing the columns and associated
   * metadata for a table.
   **/
}

/**
 * Commits a transaction.
 **/

function db2_commit( resource $connection) {

  /**
   * Commits an in-progress transaction on the specified
   * connection resource and begins a new transaction. PHP
   * applications normally default to AUTOCOMMIT mode, so
   * db2_commit is not necessary unless AUTOCOMMIT has been turned
   * off for the connection resource.
   **/
}

/**
 * Returns a string containing the SQLSTATE returned by the last.
 * connection attempt.
 **/

function db2_conn_error($connection = null) {

  /**
   * db2_conn_error returns an SQLSTATE value representing the
   * reason the last attempt to connect to a database failed. As
   * db2_connect returns &false; in the event of a failed
   * connection attempt, you do not pass any parameters to
   * db2_conn_error to retrieve the SQLSTATE value.
   *
   * If, however, the connection was successful but becomes
   * invalid over time, you can pass the connection parameter to
   * retrieve the SQLSTATE value for a specific connection.
   *
   * To learn what the SQLSTATE value means, you can issue the
   * following command at a DB2 Command Line Processor prompt: db2
   * '? sqlstate-value'. You can also call db2_conn_errormsg to
   * retrieve an explicit error message and the associated SQLCODE
   * value.
   **/
}

/**
 * Returns the last connection error message and SQLCODE value.
 **/

function db2_conn_errormsg($connection = null) {

  /**
   * db2_conn_errormsg returns an error message and SQLCODE value
   * representing the reason the last database connection attempt
   * failed. As db2_connect returns &false; in the event of a
   * failed connection attempt, do not pass any parameters to
   * db2_conn_errormsg to retrieve the associated error message and
   * SQLCODE value.
   *
   * If, however, the connection was successful but becomes
   * invalid over time, you can pass the connection parameter to
   * retrieve the associated error message and SQLCODE value for a
   * specific connection.
   **/
}

/**
 * Returns a connection to a database.
 **/

function db2_connect(
     string $database
  , $username
  , $password
  ,  array $options = []
  ) {

  /**
   * Creates a new connection to an IBM DB2 Universal Database,
   * IBM Cloudscape, or Apache Derby database.
   **/
}

/**
 * Returns the cursor type used by a statement resource.
 **/

function db2_cursor_type( resource $stmt) {

  /**
   * Returns the cursor type used by a statement resource. Use
   * this to determine if you are working with a forward-only
   * cursor or scrollable cursor.
   **/
}

/**
 * Used to escape certain characters.
 **/

function db2_escape_string( string $string_literal) {

  /**
   * Prepends backslashes to special characters in the string
   * argument.
   **/
}

/**
 * Executes an SQL statement directly.
 **/

function db2_exec(
     resource $connection
  ,  string $statement
  ,  array $options = []
  ) {

  /**
   * Executes an SQL statement directly.
   *
   * If you plan to interpolate PHP variables into the SQL
   * statement, understand that this is one of the more common
   * security exposures. Consider calling db2_prepare to prepare an
   * SQL statement with parameter markers for input values. Then
   * you can call db2_execute to pass in the input values and avoid
   * SQL injection attacks.
   *
   * If you plan to repeatedly issue the same SQL statement with
   * different parameters, consider calling db2_prepare and
   * db2_execute to enable the database server to reuse its access
   * plan and increase the efficiency of your database access.
   **/
}

/**
 * Executes a prepared SQL statement.
 **/

function db2_execute( resource $stmt,  array $parameters = []) {

  /**
   * db2_execute executes an SQL statement that was prepared by
   * db2_prepare.
   *
   * If the SQL statement returns a result set, for example, a
   * SELECT statement or a CALL to a stored procedure that returns
   * one or more result sets, you can retrieve a row as an array
   * from the stmt resource using db2_fetch_assoc, db2_fetch_both,
   * or db2_fetch_array. Alternatively, you can use db2_fetch_row
   * to move the result set pointer to the next row and fetch a
   * column at a time from that row with db2_result.
   *
   * Refer to db2_prepare for a brief discussion of the advantages
   * of using db2_prepare and db2_execute rather than db2_exec.
   **/
}

/**
 * Returns an array, indexed by column position, representing a.
 * row in a result set.
 **/

function db2_fetch_array( resource $stmt,  int $row_number = -1) {

  /**
   * Returns an array, indexed by column position, representing a
   * row in a result set. The columns are 0-indexed.
   **/
}

/**
 * Returns an array, indexed by column name, representing a row.
 * in a result set.
 **/

function db2_fetch_assoc( resource $stmt,  int $row_number = -1) {

  /**
   * Returns an array, indexed by column name, representing a row
   * in a result set.
   **/
}

/**
 * Returns an array, indexed by both column name and position,.
 * representing a row in a result set.
 **/

function db2_fetch_both( resource $stmt,  int $row_number = -1) {

  /**
   * Returns an array, indexed by both column name and position,
   * representing a row in a result set. Note that the row returned
   * by db2_fetch_both requires more memory than the single-indexed
   * arrays returned by db2_fetch_assoc or db2_fetch_array.
   **/
}

/**
 * Returns an object with properties representing columns in the.
 * fetched row.
 **/

function db2_fetch_object( resource $stmt,  int $row_number = -1) {

  /**
   * Returns an object in which each property represents a column
   * returned in the row fetched from a result set.
   **/
}

/**
 * Sets the result set pointer to the next row or requested row.
 **/

function db2_fetch_row( resource $stmt,  int $row_number = -1) {

  /**
   * Use db2_fetch_row to iterate through a result set, or to
   * point to a specific row in a result set if you requested a
   * scrollable cursor.
   *
   * To retrieve individual fields from the result set, call the
   * db2_result function.
   *
   * Rather than calling db2_fetch_row and db2_result, most
   * applications will call one of db2_fetch_assoc, db2_fetch_both,
   * or db2_fetch_array to advance the result set pointer and
   * return a complete row as an array.
   **/
}

/**
 * Returns the maximum number of bytes required to display a.
 * column.
 **/

function db2_field_display_size( resource $stmt, $column) {

  /**
   * Returns the maximum number of bytes required to display a
   * column in a result set.
   **/
}

/**
 * Returns the name of the column in the result set.
 **/

function db2_field_name( resource $stmt, $column) {

  /**
   * Returns the name of the specified column in the result set.
   **/
}

/**
 * Returns the position of the named column in a result set.
 **/

function db2_field_num( resource $stmt, $column) {

  /**
   * Returns the position of the named column in a result set.
   **/
}

/**
 * Returns the precision of the indicated column in a result set.
 **/

function db2_field_precision( resource $stmt, $column) {

  /**
   * Returns the precision of the indicated column in a result
   * set.
   **/
}

/**
 * Returns the scale of the indicated column in a result set.
 **/

function db2_field_scale( resource $stmt, $column) {

  /**
   * Returns the scale of the indicated column in a result set.
   **/
}

/**
 * Returns the data type of the indicated column in a result set.
 **/

function db2_field_type( resource $stmt, $column) {

  /**
   * Returns the data type of the indicated column in a result
   * set.
   **/
}

/**
 * Returns the width of the current value of the indicated.
 * column in a result set.
 **/

function db2_field_width( resource $stmt, $column) {

  /**
   * Returns the width of the current value of the indicated
   * column in a result set. This is the maximum width of the
   * column for a fixed-length data type, or the actual width of
   * the column for a variable-length data type.
   **/
}

/**
 * Returns a result set listing the foreign keys for a table.
 **/

function db2_foreign_keys(
     resource $connection
  , $qualifier
  , $schema
  ,  string $table_name
  ) {

  /**
   * Returns a result set listing the foreign keys for a table.
   **/
}

/**
 * Frees resources associated with a result set.
 **/

function db2_free_result( resource $stmt) {

  /**
   * Frees the system and database resources that are associated
   * with a result set. These resources are freed implicitly when a
   * script finishes, but you can call db2_free_result to
   * explicitly free the result set resources before the end of the
   * script.
   **/
}

/**
 * Frees resources associated with the indicated statement.
 * resource.
 **/

function db2_free_stmt( resource $stmt) {

  /**
   * Frees the system and database resources that are associated
   * with a statement resource. These resources are freed
   * implicitly when a script finishes, but you can call
   * db2_free_stmt to explicitly free the statement resources
   * before the end of the script.
   **/
}

/**
 * Retrieves an option value for a statement resource or a.
 * connection resource.
 **/

function db2_get_option( resource $resource,  string $option) {

  /**
   * Retrieves the value of a specified option value for a
   * statement resource or a connection resource.
   **/
}

/**
 * Returns the auto generated ID of the last insert query that.
 * successfully executed on this connection.
 **/

function db2_last_insert_id( resource $resource) {

  /**
   * Returns the auto generated ID of the last insert query that
   * successfully executed on this connection.
   *
   * The result of this function is not affected by any of the
   * following: A single row INSERT statement with a VALUES clause
   * for a table without an identity column. A multiple row INSERT
   * statement with a VALUES clause. An INSERT statement with a
   * fullselect. A ROLLBACK TO SAVEPOINT statement.
   *
   * A single row INSERT statement with a VALUES clause for a
   * table without an identity column.
   *
   * A multiple row INSERT statement with a VALUES clause.
   *
   * An INSERT statement with a fullselect.
   *
   * A ROLLBACK TO SAVEPOINT statement.
   **/
}

/**
 * Gets a user defined size of LOB files with each invocation.
 **/

function db2_lob_read( resource $stmt,  int $colnum,  int $length) {

  /**
   * Use db2_lob_read to iterate through a specified column of a
   * result set and retrieve a user defined size of LOB data.
   **/
}

/**
 * Requests the next result set from a stored procedure.
 **/

function db2_next_result( resource $stmt) {

  /**
   * A stored procedure can return zero or more result sets. While
   * you handle the first result set in exactly the same way you
   * would handle the results returned by a simple SELECT
   * statement, to fetch the second and subsequent result sets from
   * a stored procedure you must call the db2_next_result function
   * and return the result to a uniquely named PHP variable.
   **/
}

/**
 * Returns the number of fields contained in a result set.
 **/

function db2_num_fields( resource $stmt) {

  /**
   * Returns the number of fields contained in a result set. This
   * is most useful for handling the result sets returned by
   * dynamically generated queries, or for result sets returned by
   * stored procedures, where your application cannot otherwise
   * know how to retrieve and use the results.
   **/
}

/**
 * Returns the number of rows affected by an SQL statement.
 **/

function db2_num_rows( resource $stmt) {

  /**
   * Returns the number of rows deleted, inserted, or updated by
   * an SQL statement.
   *
   * To determine the number of rows that will be returned by a
   * SELECT statement, issue SELECT COUNT(*) with the same
   * predicates as your intended SELECT statement and retrieve the
   * value.
   *
   * If your application logic checks the number of rows returned
   * by a SELECT statement and branches if the number of rows is 0,
   * consider modifying your application to attempt to return the
   * first row with one of db2_fetch_assoc, db2_fetch_both,
   * db2_fetch_array, or db2_fetch_row, and branch if the fetch
   * function returns &false;.
   *
   * If you issue a SELECT statement using a scrollable cursor,
   * db2_num_rows returns the number of rows returned by the SELECT
   * statement. However, the overhead associated with scrollable
   * cursors significantly degrades the performance of your
   * application, so if this is the only reason you are considering
   * using scrollable cursors, you should use a forward-only cursor
   * and either call SELECT COUNT(*) or rely on the bool return
   * value of the fetch functions to achieve the equivalent
   * functionality with much better performance.
   **/
}

/**
 * Closes a persistent database connection.
 **/

function db2_pclose( resource $connection) {

  /**
   * This function closes a DB2 client connection created with
   * db2_pconnect and returns the corresponding resources to the
   * database server. This function is only available on i5/OS in
   * response to i5/OS system administration requests.
   *
   * This function is only available on i5/OS in response to i5/OS
   * system administration requests.
   *
   * If you have a persistent DB2 client connection created with
   * db2_pconnect, you may use this function to close the
   * connection. To avoid substantial connection performance
   * penalties, this function should only be used in rare cases
   * when the persistent connection has become unresponsive or the
   * persistent connection will not be needed for a long period of
   * time.
   **/
}

/**
 * Returns a persistent connection to a database.
 **/

function db2_pconnect(
     string $database
  , $username
  , $password
  ,  array $options = []
  ) {

  /**
   * Returns a persistent connection to an IBM DB2 Universal
   * Database, IBM Cloudscape, or Apache Derby database.
   *
   * For more information on persistent connections, refer to .
   *
   * Calling db2_close on a persistent connection always returns
   * &true;, but the underlying DB2 client connection remains open
   * and waiting to serve the next matching db2_pconnect request.
   *
   * Users running version 1.9.0 or later of ibm_db2 should be
   * aware that the extension will perform a transaction rollback
   * on persistent connections at the end of a request, thus ending
   * the transaction. This prevents the transaction block from
   * carrying over to the next request which uses that connection
   * if script execution ends before the transaction block does.
   **/
}

/**
 * Prepares an SQL statement to be executed.
 **/

function db2_prepare(
     resource $connection
  ,  string $statement
  ,  array $options = []
  ) {

  /**
   * db2_prepare creates a prepared SQL statement which can
   * include 0 or more parameter markers (? characters)
   * representing parameters for input, output, or input/output.
   * You can pass parameters to the prepared statement using
   * db2_bind_param, or for input values only, as an array passed
   * to db2_execute.
   *
   * There are three main advantages to using prepared statements
   * in your application: Performance: when you prepare a
   * statement, the database server creates an optimized access
   * plan for retrieving data with that statement. Subsequently
   * issuing the prepared statement with db2_execute enables the
   * statements to reuse that access plan and avoids the overhead
   * of dynamically creating a new access plan for every statement
   * you issue. Security: when you prepare a statement, you can
   * include parameter markers for input values. When you execute a
   * prepared statement with input values for placeholders, the
   * database server checks each input value to ensure that the
   * type matches the column definition or parameter definition.
   * Advanced functionality: Parameter markers not only enable you
   * to pass input values to prepared SQL statements, they also
   * enable you to retrieve OUT and INOUT parameters from stored
   * procedures using db2_bind_param.
   *
   * Performance: when you prepare a statement, the database
   * server creates an optimized access plan for retrieving data
   * with that statement. Subsequently issuing the prepared
   * statement with db2_execute enables the statements to reuse
   * that access plan and avoids the overhead of dynamically
   * creating a new access plan for every statement you issue.
   *
   * Security: when you prepare a statement, you can include
   * parameter markers for input values. When you execute a
   * prepared statement with input values for placeholders, the
   * database server checks each input value to ensure that the
   * type matches the column definition or parameter definition.
   *
   * Advanced functionality: Parameter markers not only enable you
   * to pass input values to prepared SQL statements, they also
   * enable you to retrieve OUT and INOUT parameters from stored
   * procedures using db2_bind_param.
   **/
}

/**
 * Returns a result set listing primary keys for a table.
 **/

function db2_primary_keys(
     resource $connection
  , $qualifier
  , $schema
  ,  string $table_name
  ) {

  /**
   * Returns a result set listing the primary keys for a table.
   **/
}

/**
 * Returns a result set listing stored procedure parameters.
 **/

function db2_procedure_columns(
     resource $connection
  , $qualifier
  ,  string $schema
  ,  string $procedure
  , $parameter
  ) {

  /**
   * Returns a result set listing the parameters for one or more
   * stored procedures.
   **/
}

/**
 * Returns a result set listing the stored procedures registered.
 * in a database.
 **/

function db2_procedures(
     resource $connection
  , $qualifier
  ,  string $schema
  ,  string $procedure
  ) {

  /**
   * Returns a result set listing the stored procedures registered
   * in a database.
   **/
}

/**
 * Returns a single column from a row in the result set.
 **/

function db2_result( resource $stmt, $column) {

  /**
   * Use db2_result to return the value of a specified column in
   * the current row of a result set. You must call db2_fetch_row
   * before calling db2_result to set the location of the result
   * set pointer.
   **/
}

/**
 * Rolls back a transaction.
 **/

function db2_rollback( resource $connection) {

  /**
   * Rolls back an in-progress transaction on the specified
   * connection resource and begins a new transaction. PHP
   * applications normally default to AUTOCOMMIT mode, so
   * db2_rollback normally has no effect unless AUTOCOMMIT has been
   * turned off for the connection resource.
   **/
}

/**
 * Returns an object with properties that describe the DB2.
 * database server.
 **/

function db2_server_info( resource $connection) {

  /**
   * This function returns an object with read-only properties
   * that return information about the IBM DB2, Cloudscape, or
   * Apache Derby database server. The following table lists the
   * database server properties: Database server properties
   * Property name Return type Description DBMS_NAME string The
   * name of the database server to which you are connected. For
   * DB2 servers this is a combination of DB2 followed by the
   * operating system on which the database server is running.
   * DBMS_VER string The version of the database server, in the
   * form of a string "MM.mm.uuuu" where MM is the major version,
   * mm is the minor version, and uuuu is the update. For example,
   * "08.02.0001" represents major version 8, minor version 2,
   * update 1. DB_CODEPAGE int The code page of the database to
   * which you are connected. DB_NAME string The name of the
   * database to which you are connected. DFT_ISOLATION string The
   * default transaction isolation level supported by the server:
   * UR Uncommitted read: changes are immediately visible by all
   * concurrent transactions. CS Cursor stability: a row read by
   * one transaction can be altered and committed by a second
   * concurrent transaction. RS Read stability: a transaction can
   * add or remove rows matching a search condition or a pending
   * transaction. RR Repeatable read: data affected by pending
   * transaction is not available to other transactions. NC No
   * commit: any changes are visible at the end of a successful
   * operation. Explicit commits and rollbacks are not allowed.
   * IDENTIFIER_QUOTE_CHAR string The character used to delimit an
   * identifier. INST_NAME string The instance on the database
   * server that contains the database. ISOLATION_OPTION array An
   * array of the isolation options supported by the database
   * server. The isolation options are described in the
   * DFT_ISOLATION property. KEYWORDS array An array of the
   * keywords reserved by the database server. LIKE_ESCAPE_CLAUSE
   * bool &true; if the database server supports the use of % and _
   * wildcard characters. &false; if the database server does not
   * support these wildcard characters. MAX_COL_NAME_LEN int
   * Maximum length of a column name supported by the database
   * server, expressed in bytes. MAX_IDENTIFIER_LEN int Maximum
   * length of an SQL identifier supported by the database server,
   * expressed in characters. MAX_INDEX_SIZE int Maximum size of
   * columns combined in an index supported by the database server,
   * expressed in bytes. MAX_PROC_NAME_LEN int Maximum length of a
   * procedure name supported by the database server, expressed in
   * bytes. MAX_ROW_SIZE int Maximum length of a row in a base
   * table supported by the database server, expressed in bytes.
   * MAX_SCHEMA_NAME_LEN int Maximum length of a schema name
   * supported by the database server, expressed in bytes.
   * MAX_STATEMENT_LEN int Maximum length of an SQL statement
   * supported by the database server, expressed in bytes.
   * MAX_TABLE_NAME_LEN int Maximum length of a table name
   * supported by the database server, expressed in bytes.
   * NON_NULLABLE_COLUMNS bool &true; if the database server
   * supports columns that can be defined as NOT NULL, &false; if
   * the database server does not support columns defined as NOT
   * NULL. PROCEDURES bool &true; if the database server supports
   * the use of the CALL statement to call stored procedures,
   * &false; if the database server does not support the CALL
   * statement. SPECIAL_CHARS string A string containing all of the
   * characters other than a-Z, 0-9, and underscore that can be
   * used in an identifier name. SQL_CONFORMANCE string The level
   * of conformance to the ANSI/ISO SQL-92 specification offered by
   * the database server: ENTRY Entry-level SQL-92 compliance.
   * FIPS127 FIPS-127-2 transitional compliance. FULL Full level
   * SQL-92 compliance. INTERMEDIATE Intermediate level SQL-92
   * compliance.
   *
   * The default transaction isolation level supported by the
   * server: UR Uncommitted read: changes are immediately visible
   * by all concurrent transactions. CS Cursor stability: a row
   * read by one transaction can be altered and committed by a
   * second concurrent transaction. RS Read stability: a
   * transaction can add or remove rows matching a search condition
   * or a pending transaction. RR Repeatable read: data affected by
   * pending transaction is not available to other transactions. NC
   * No commit: any changes are visible at the end of a successful
   * operation. Explicit commits and rollbacks are not allowed.
   *
   * Uncommitted read: changes are immediately visible by all
   * concurrent transactions.
   *
   * Cursor stability: a row read by one transaction can be
   * altered and committed by a second concurrent transaction.
   *
   * Read stability: a transaction can add or remove rows matching
   * a search condition or a pending transaction.
   *
   * Repeatable read: data affected by pending transaction is not
   * available to other transactions.
   *
   * No commit: any changes are visible at the end of a successful
   * operation. Explicit commits and rollbacks are not allowed.
   *
   * The level of conformance to the ANSI/ISO SQL-92 specification
   * offered by the database server: ENTRY Entry-level SQL-92
   * compliance. FIPS127 FIPS-127-2 transitional compliance. FULL
   * Full level SQL-92 compliance. INTERMEDIATE Intermediate level
   * SQL-92 compliance.
   *
   * Entry-level SQL-92 compliance.
   *
   * FIPS-127-2 transitional compliance.
   *
   * Full level SQL-92 compliance.
   *
   * Intermediate level SQL-92 compliance.
   **/
}

/**
 * Set options for connection or statement resources.
 **/

function db2_set_option(
     resource $resource
  ,  array $options
  ,  int $type
  ) {

  /**
   * Sets options for a statement resource or a connection
   * resource. You cannot set options for result set resources.
   **/
}

/**
 * Returns a result set listing the unique row identifier.
 * columns for a table.
 **/

function db2_special_columns(
     resource $connection
  , $qualifier
  ,  string $schema
  ,  string $table_name
  ,  int $scope
  ) {

  /**
   * Returns a result set listing the unique row identifier
   * columns for a table.
   **/
}

/**
 * Returns a result set listing the index and statistics for a.
 * table.
 **/

function db2_statistics(
     resource $connection
  , $qualifier
  , $schema
  ,  string $table_name
  ,  bool $unique
  ) {

  /**
   * Returns a result set listing the index and statistics for a
   * table.
   **/
}

/**
 * Returns a string containing the SQLSTATE returned by an SQL.
 * statement.
 **/

function db2_stmt_error($stmt = null) {

  /**
   * Returns a string containing the SQLSTATE value returned by an
   * SQL statement.
   *
   * If you do not pass a statement resource as an argument to
   * db2_stmt_error, the driver returns the SQLSTATE value
   * associated with the last attempt to return a statement
   * resource, for example, from db2_prepare or db2_exec.
   *
   * To learn what the SQLSTATE value means, you can issue the
   * following command at a DB2 Command Line Processor prompt: db2
   * '? sqlstate-value'. You can also call db2_stmt_errormsg to
   * retrieve an explicit error message and the associated SQLCODE
   * value.
   **/
}

/**
 * Returns a string containing the last SQL statement error.
 * message.
 **/

function db2_stmt_errormsg($stmt = null) {

  /**
   * Returns a string containing the last SQL statement error
   * message.
   *
   * If you do not pass a statement resource as an argument to
   * db2_stmt_errormsg, the driver returns the error message
   * associated with the last attempt to return a statement
   * resource, for example, from db2_prepare or db2_exec.
   **/
}

/**
 * Returns a result set listing the tables and associated.
 * privileges in a database.
 **/

function db2_table_privileges(
     resource $connection
  , $qualifier = null
  , $schema = null
  , $table_name = null
  ) {

  /**
   * Returns a result set listing the tables and associated
   * privileges in a database.
   **/
}

/**
 * Returns a result set listing the tables and associated.
 * metadata in a database.
 **/

function db2_tables(
     resource $connection
  , $qualifier = null
  , $schema = null
  , $table_name = null
  , $table_type = null
  ) {

  /**
   * Returns a result set listing the tables and associated
   * metadata in a database.
   **/
}

/**
 * Retrieve internal configuration variables of iconv extension.
 **/

function iconv_get_encoding( string $type = "all") {

  /**
   * Retrieve internal configuration variables of iconv extension.
   **/
}

/**
 * Decodes multiple MIME header fields at once.
 **/

function iconv_mime_decode_headers(
     string $headers
  ,  int $mode = 0
  , $encoding = null
  ) {

  /**
   * Decodes multiple MIME header fields at once.
   **/
}

/**
 * Decodes a MIME header field.
 **/

function iconv_mime_decode(
     string $string
  ,  int $mode = 0
  , $encoding = null
  ) {

  /**
   * Decodes a MIME header field.
   **/
}

/**
 * Composes a MIME header field.
 **/

function iconv_mime_encode(
     string $field_name
  ,  string $field_value
  ,  array $options = []
  ) {

  /**
   * Composes and returns a string that represents a valid MIME
   * header field, which looks like the following: In the above
   * example, "Subject" is the field name and the portion that
   * begins with "=?ISO-8859-1?..." is the field value.
   **/
}

/**
 * Set current setting for character encoding conversion.
 **/

function iconv_set_encoding( string $type,  string $encoding) {

  /**
   * Changes the value of the internal configuration variable
   * specified by type to encoding.
   **/
}

/**
 * Returns the character count of string.
 **/

function iconv_strlen( string $string, $encoding = null) {

  /**
   * In contrast to strlen, iconv_strlen counts the occurrences of
   * characters in the given byte sequence string on the basis of
   * the specified character set, the result of which is not
   * necessarily identical to the length of the string in byte.
   **/
}

/**
 * Finds position of first occurrence of a needle within a.
 * haystack.
 **/

function iconv_strpos(
     string $haystack
  ,  string $needle
  ,  int $offset = 0
  , $encoding = null
  ) {

  /**
   * Finds position of first occurrence of a needle within a
   * haystack.
   *
   * In contrast to strpos, the return value of iconv_strpos is
   * the number of characters that appear before the needle, rather
   * than the offset in bytes to the position where the needle has
   * been found. The characters are counted on the basis of the
   * specified character set encoding.
   **/
}

/**
 * Finds the last occurrence of a needle within a haystack.
 **/

function iconv_strrpos(
     string $haystack
  ,  string $needle
  , $encoding = null
  ) {

  /**
   * Finds the last occurrence of a needle within a haystack.
   *
   * In contrast to strrpos, the return value of iconv_strrpos is
   * the number of characters that appear before the needle, rather
   * than the offset in bytes to the position where the needle has
   * been found. The characters are counted on the basis of the
   * specified character set encoding.
   **/
}

/**
 * Cut out part of a string.
 **/

function iconv_substr(
     string $string
  ,  int $offset
  , $length = null
  , $encoding = null
  ) {

  /**
   * Cuts a portion of string specified by the offset and length
   * parameters.
   **/
}

/**
 * Convert a string from one character encoding to another.
 **/

function iconv(
     string $from_encoding
  ,  string $to_encoding
  ,  string $string
  ) {

  /**
   * Converts string from from_encoding to to_encoding.
   **/
}

/**
 * Convert character encoding as output buffer handler.
 **/

function ob_iconv_handler( string $contents,  int $status) {

  /**
   * Converts the string encoded in internal_encoding to
   * output_encoding.
   *
   * internal_encoding and output_encoding should be defined in
   * the &php.ini; file or in iconv_set_encoding.
   **/
}

/**
 * Generates a compact, storable binary representation of a value.
 **/

function igbinary_serialize( mixed $value) {

  /**
   * Generates a storable representation of a value.
   *
   * This is useful for storing or passing PHP values around
   * without losing their type and structure.
   *
   * To make the serialized string into a PHP value again,
   * igbinary_unserialize can be used.
   **/
}

/**
 * Creates a PHP value from a stored representation from.
 * igbinary_serialize.
 **/

function igbinary_unserialize( string $str) {

  /**
   * Untrusted user input must not be passed to
   * igbinary_unserialize. Unserialization can result in code being
   * loaded and executed due to object instantiation and
   * autoloading, and a malicious user may be able to exploit this.
   * Instead a safe, standard data interchange format such as JSON
   * (via json_decode and json_encode) should be used, if
   * serialized data needs to be passed to a client.
   *
   * If there is the need to unserialize externally-stored
   * serialized data, hash_hmac can be used for data validation. It
   * is important to ensure that nobody has tampered with the data.
   *
   * The igbinary serialization format does not provide a way to
   * distinguish between different reference groups for the same
   * value. All PHP references to a given value as treated as part
   * of the same reference group when unserialized, even if they
   * were parts of difference reference groups when serialized.
   **/
}

/**
 * Retrieve information about the currently installed GD library.
 **/

function gd_info() {

  /**
   * Gets information about the version and capabilities of the
   * installed GD library.
   **/
}

/**
 * Get the size of an image.
 **/

function getimagesize( string $filename,  array &$image_info = null) {

  /**
   * The getimagesize function will determine the size of any
   * supported given image file and return the dimensions along
   * with the file type and a height/width text string to be used
   * inside a normal HTML IMG tag and the correspondent HTTP
   * content type.
   *
   * getimagesize can also return some more information in
   * image_info parameter.
   *
   * This function expects filename to be a valid image file. If a
   * non-image file is supplied, it may be incorrectly detected as
   * an image and the function will return successfully, but the
   * array may contain nonsensical values.
   *
   * Do not use getimagesize to check that a given file is a valid
   * image. Use a purpose-built solution such as the Fileinfo
   * extension instead.
   **/
}

/**
 * Get the size of an image from a string.
 **/

function getimagesizefromstring(
     string $string
  ,  array &$image_info = null
  ) {

  /**
   * Identical to getimagesize except that getimagesizefromstring
   * accepts a string instead of a file name as the first
   * parameter.
   *
   * See the getimagesize documentation for details on how this
   * function works.
   **/
}

/**
 * Get file extension for image type.
 **/

function image_type_to_extension(
     int $image_type
  ,  bool $include_dot = true
  ) {

  /**
   * Returns the extension for the given IMAGETYPE_XXX constant.
   **/
}

/**
 * Get Mime-Type for image-type returned by getimagesize,.
 * exif_read_data, exif_thumbnail, exif_imagetype.
 **/

function image_type_to_mime_type( int $image_type) {

  /**
   * The image_type_to_mime_type function will determine the
   * Mime-Type for an IMAGETYPE constant.
   **/
}

/**
 * &gd.image.output;.
 **/

function image2wbmp(
     resource $image
  ,  string $filename
  ,  int $foreground
  ) {

  /**
   * image2wbmp outputs or save a WBMP version of the given image.
   **/
}

/**
 * Return an image containing the affine transformed src image,.
 * using an optional clipping area.
 **/

function imageaffine( GdImage $image,  array $affine, $clip = null) {

  /**
   **/
}

/**
 * Concatenate two affine transformation matrices.
 **/

function imageaffinematrixconcat( array $matrix1,  array $matrix2) {

  /**
   * Returns the concatenation of two affine transformation
   * matrices, what is useful if multiple transformations should be
   * applied to the same image in one go.
   **/
}

/**
 * Get an affine transformation matrix.
 **/

function imageaffinematrixget( int $type, $options) {

  /**
   * Returns an affine transformation matrix.
   **/
}

/**
 * Set the blending mode for an image.
 **/

function imagealphablending( GdImage $image,  bool $enable) {

  /**
   * imagealphablending allows for two different modes of drawing
   * on truecolor images. In blending mode, the alpha channel
   * component of the color supplied to all drawing function, such
   * as imagesetpixel determines how much of the underlying color
   * should be allowed to shine through. As a result, gd
   * automatically blends the existing color at that point with the
   * drawing color, and stores the result in the image. The
   * resulting pixel is opaque. In non-blending mode, the drawing
   * color is copied literally with its alpha channel information,
   * replacing the destination pixel. Blending mode is not
   * available when drawing on palette images.
   **/
}

/**
 * Should antialias functions be used or not.
 **/

function imageantialias( GdImage $image,  bool $enable) {

  /**
   * Activate the fast drawing antialiased methods for lines and
   * wired polygons. It does not support alpha components. It works
   * using a direct blend operation. It works only with truecolor
   * images.
   *
   * Thickness and styled are not supported.
   *
   * Using antialiased primitives with transparent background
   * color can end with some unexpected results. The blend method
   * uses the background color as any other colors. The lack of
   * alpha component support does not allow an alpha based
   * antialiasing method.
   **/
}

/**
 * Draws an arc.
 **/

function imagearc(
     GdImage $image
  ,  int $center_x
  ,  int $center_y
  ,  int $width
  ,  int $height
  ,  int $start_angle
  ,  int $end_angle
  ,  int $color
  ) {

  /**
   * imagearc draws an arc of circle centered at the given
   * coordinates.
   **/
}

/**
 * &gd.image.output;.
 **/

function imageavif(
     GdImage $image
  , $file = null
  ,  int $quality = -1
  ,  int $speed = -1
  ) {

  /**
   * Outputs or saves a AVIF Raster image from the given image.
   **/
}

/**
 * Output a BMP image to browser or file.
 **/

function imagebmp(
     GdImage $image
  , $file = null
  ,  bool $compressed = true
  ) {

  /**
   * Outputs or saves a BMP version of the given image.
   **/
}

/**
 * Draw a character horizontally.
 **/

function imagechar(
     GdImage $image
  , $font
  ,  int $x
  ,  int $y
  ,  string $char
  ,  int $color
  ) {

  /**
   * imagechar draws the first character of char in the image
   * identified by image with its upper-left at x,y (top left is 0,
   * 0) with the color color.
   **/
}

/**
 * Draw a character vertically.
 **/

function imagecharup(
     GdImage $image
  , $font
  ,  int $x
  ,  int $y
  ,  string $char
  ,  int $color
  ) {

  /**
   * Draws the character char vertically at the specified
   * coordinate on the given image.
   **/
}

/**
 * Allocate a color for an image.
 **/

function imagecolorallocate(
     GdImage $image
  ,  int $red
  ,  int $green
  ,  int $blue
  ) {

  /**
   * Returns a color identifier representing the color composed of
   * the given RGB components.
   *
   * imagecolorallocate must be called to create each color that
   * is to be used in the image represented by image.
   *
   * The first call to imagecolorallocate fills the background
   * color in palette-based images - images created using
   * imagecreate.
   **/
}

/**
 * Allocate a color for an image.
 **/

function imagecolorallocatealpha(
     GdImage $image
  ,  int $red
  ,  int $green
  ,  int $blue
  ,  int $alpha
  ) {

  /**
   * imagecolorallocatealpha behaves identically to
   * imagecolorallocate with the addition of the transparency
   * parameter alpha.
   **/
}

/**
 * Get the index of the color of a pixel.
 **/

function imagecolorat( GdImage $image,  int $x,  int $y) {

  /**
   * Returns the index of the color of the pixel at the specified
   * location in the image specified by image.
   *
   * If the image is a truecolor image, this function returns the
   * RGB value of that pixel as integer. Use bitshifting and
   * masking to access the distinct red, green and blue component
   * values:
   **/
}

/**
 * Get the index of the closest color to the specified color.
 **/

function imagecolorclosest(
     GdImage $image
  ,  int $red
  ,  int $green
  ,  int $blue
  ) {

  /**
   * Returns the index of the color in the palette of the image
   * which is "closest" to the specified RGB value.
   *
   * The "distance" between the desired color and each color in
   * the palette is calculated as if the RGB values represented
   * points in three-dimensional space.
   *
   * &gd.image.colors;
   **/
}

/**
 * Get the index of the closest color to the specified color +.
 * alpha.
 **/

function imagecolorclosestalpha(
     GdImage $image
  ,  int $red
  ,  int $green
  ,  int $blue
  ,  int $alpha
  ) {

  /**
   * Returns the index of the color in the palette of the image
   * which is "closest" to the specified RGB value and alpha level.
   **/
}

/**
 * Get the index of the color which has the hue, white and.
 * blackness.
 **/

function imagecolorclosesthwb(
     GdImage $image
  ,  int $red
  ,  int $green
  ,  int $blue
  ) {

  /**
   * Get the index of the color which has the hue, white and
   * blackness nearest the given color.
   **/
}

/**
 * De-allocate a color for an image.
 **/

function imagecolordeallocate( GdImage $image,  int $color) {

  /**
   * De-allocates a color previously allocated with
   * imagecolorallocate or imagecolorallocatealpha.
   **/
}

/**
 * Get the index of the specified color.
 **/

function imagecolorexact(
     GdImage $image
  ,  int $red
  ,  int $green
  ,  int $blue
  ) {

  /**
   * Returns the index of the specified color in the palette of
   * the image.
   *
   * &gd.image.colors;
   **/
}

/**
 * Get the index of the specified color + alpha.
 **/

function imagecolorexactalpha(
     GdImage $image
  ,  int $red
  ,  int $green
  ,  int $blue
  ,  int $alpha
  ) {

  /**
   * Returns the index of the specified color+alpha in the palette
   * of the image.
   **/
}

/**
 * Makes the colors of the palette version of an image more.
 * closely match the true color version.
 **/

function imagecolormatch( GdImage $image1,  GdImage $image2) {

  /**
   * Makes the colors of the palette version of an image more
   * closely match the true color version.
   **/
}

/**
 * Get the index of the specified color or its closest possible.
 * alternative.
 **/

function imagecolorresolve(
     GdImage $image
  ,  int $red
  ,  int $green
  ,  int $blue
  ) {

  /**
   * This function is guaranteed to return a color index for a
   * requested color, either the exact color or the closest
   * possible alternative.
   *
   * &gd.image.colors;
   **/
}

/**
 * Get the index of the specified color + alpha or its closest.
 * possible alternative.
 **/

function imagecolorresolvealpha(
     GdImage $image
  ,  int $red
  ,  int $green
  ,  int $blue
  ,  int $alpha
  ) {

  /**
   * This function is guaranteed to return a color index for a
   * requested color, either the exact color or the closest
   * possible alternative.
   **/
}

/**
 * Set the color for the specified palette index.
 **/

function imagecolorset(
     GdImage $image
  ,  int $color
  ,  int $red
  ,  int $green
  ,  int $blue
  ,  int $alpha = 0
  ) {

  /**
   * This sets the specified index in the palette to the specified
   * color. This is useful for creating flood-fill-like effects in
   * palleted images without the overhead of performing the actual
   * flood-fill.
   **/
}

/**
 * Get the colors for an index.
 **/

function imagecolorsforindex( GdImage $image,  int $color) {

  /**
   * Gets the color for a specified index.
   **/
}

/**
 * Find out the number of colors in an image's palette.
 **/

function imagecolorstotal( GdImage $image) {

  /**
   * Returns the number of colors in an image palette.
   **/
}

/**
 * Define a color as transparent.
 **/

function imagecolortransparent( GdImage $image, $color = null) {

  /**
   * Gets or sets the transparent color in the given image.
   **/
}

/**
 * Apply a 3x3 convolution matrix, using coefficient and offset.
 **/

function imageconvolution(
     GdImage $image
  ,  array $matrix
  ,  float $divisor
  ,  float $offset
  ) {

  /**
   * Applies a convolution matrix on the image, using the given
   * coefficient and offset.
   **/
}

/**
 * Copy part of an image.
 **/

function imagecopy(
     GdImage $dst_image
  ,  GdImage $src_image
  ,  int $dst_x
  ,  int $dst_y
  ,  int $src_x
  ,  int $src_y
  ,  int $src_width
  ,  int $src_height
  ) {

  /**
   * Copy a part of src_image onto dst_image starting at the x,y
   * coordinates src_x, src_y with a width of src_width and a
   * height of src_height. The portion defined will be copied onto
   * the x,y coordinates, dst_x and dst_y.
   **/
}

/**
 * Copy and merge part of an image.
 **/

function imagecopymerge(
     GdImage $dst_image
  ,  GdImage $src_image
  ,  int $dst_x
  ,  int $dst_y
  ,  int $src_x
  ,  int $src_y
  ,  int $src_width
  ,  int $src_height
  ,  int $pct
  ) {

  /**
   * Copy a part of src_image onto dst_image starting at the x,y
   * coordinates src_x, src_y with a width of src_width and a
   * height of src_height. The portion defined will be copied onto
   * the x,y coordinates, dst_x and dst_y.
   **/
}

/**
 * Copy and merge part of an image with gray scale.
 **/

function imagecopymergegray(
     GdImage $dst_image
  ,  GdImage $src_image
  ,  int $dst_x
  ,  int $dst_y
  ,  int $src_x
  ,  int $src_y
  ,  int $src_width
  ,  int $src_height
  ,  int $pct
  ) {

  /**
   * imagecopymergegray copy a part of src_image onto dst_image
   * starting at the x,y coordinates src_x, src_y with a width of
   * src_width and a height of src_height. The portion defined will
   * be copied onto the x,y coordinates, dst_x and dst_y.
   *
   * This function is identical to imagecopymerge except that when
   * merging it preserves the hue of the source by converting the
   * destination pixels to gray scale before the copy operation.
   **/
}

/**
 * Copy and resize part of an image with resampling.
 **/

function imagecopyresampled(
     GdImage $dst_image
  ,  GdImage $src_image
  ,  int $dst_x
  ,  int $dst_y
  ,  int $src_x
  ,  int $src_y
  ,  int $dst_width
  ,  int $dst_height
  ,  int $src_width
  ,  int $src_height
  ) {

  /**
   * imagecopyresampled copies a rectangular portion of one image
   * to another image, smoothly interpolating pixel values so that,
   * in particular, reducing the size of an image still retains a
   * great deal of clarity.
   *
   * In other words, imagecopyresampled will take a rectangular
   * area from src_image of width src_width and height src_height
   * at position (src_x,src_y) and place it in a rectangular area
   * of dst_image of width dst_width and height dst_height at
   * position (dst_x,dst_y).
   *
   * If the source and destination coordinates and width and
   * heights differ, appropriate stretching or shrinking of the
   * image fragment will be performed. The coordinates refer to the
   * upper left corner. This function can be used to copy regions
   * within the same image (if dst_image is the same as src_image)
   * but if the regions overlap the results will be unpredictable.
   **/
}

/**
 * Copy and resize part of an image.
 **/

function imagecopyresized(
     GdImage $dst_image
  ,  GdImage $src_image
  ,  int $dst_x
  ,  int $dst_y
  ,  int $src_x
  ,  int $src_y
  ,  int $dst_width
  ,  int $dst_height
  ,  int $src_width
  ,  int $src_height
  ) {

  /**
   * imagecopyresized copies a rectangular portion of one image to
   * another image. dst_image is the destination image, src_image
   * is the source image identifier.
   *
   * In other words, imagecopyresized will take a rectangular area
   * from src_image of width src_width and height src_height at
   * position (src_x,src_y) and place it in a rectangular area of
   * dst_image of width dst_width and height dst_height at position
   * (dst_x,dst_y).
   *
   * If the source and destination coordinates and width and
   * heights differ, appropriate stretching or shrinking of the
   * image fragment will be performed. The coordinates refer to the
   * upper left corner. This function can be used to copy regions
   * within the same image (if dst_image is the same as src_image)
   * but if the regions overlap the results will be unpredictable.
   **/
}

/**
 * Create a new palette based image.
 **/

function imagecreate( int $width,  int $height) {

  /**
   * imagecreate returns an image identifier representing a blank
   * image of specified size.
   *
   * In general, we recommend the use of imagecreatetruecolor
   * instead of imagecreate so that image processing occurs on the
   * highest quality image possible. If you want to output a
   * palette image, then imagetruecolortopalette should be called
   * immediately before saving the image with imagepng or imagegif.
   **/
}

/**
 * &gd.image.new;.
 **/

function imagecreatefromavif( string $filename) {

  /**
   * imagecreatefromavif returns an image object representing the
   * image obtained from the given filename.
   **/
}

/**
 * &gd.image.new;.
 **/

function imagecreatefrombmp( string $filename) {

  /**
   * imagecreatefrombmp returns an image identifier representing
   * the image obtained from the given filename.
   **/
}

/**
 * Create a new image from GD file or URL.
 **/

function imagecreatefromgd( string $filename) {

  /**
   * Create a new image from GD file or URL.
   **/
}

/**
 * Create a new image from GD2 file or URL.
 **/

function imagecreatefromgd2( string $filename) {

  /**
   * Create a new image from GD2 file or URL.
   **/
}

/**
 * Create a new image from a given part of GD2 file or URL.
 **/

function imagecreatefromgd2part(
     string $filename
  ,  int $x
  ,  int $y
  ,  int $width
  ,  int $height
  ) {

  /**
   * Create a new image from a given part of GD2 file or URL.
   **/
}

/**
 * &gd.image.new;.
 **/

function imagecreatefromgif( string $filename) {

  /**
   * imagecreatefromgif returns an image identifier representing
   * the image obtained from the given filename.
   *
   * When reading GIF files into memory, only the first frame is
   * returned in the image object. The size of the image is not
   * necessarily what is reported by getimagesize.
   **/
}

/**
 * &gd.image.new;.
 **/

function imagecreatefromjpeg( string $filename) {

  /**
   * imagecreatefromjpeg returns an image identifier representing
   * the image obtained from the given filename.
   **/
}

/**
 * &gd.image.new;.
 **/

function imagecreatefrompng( string $filename) {

  /**
   * imagecreatefrompng returns an image identifier representing
   * the image obtained from the given filename.
   **/
}

/**
 * Create a new image from the image stream in the string.
 **/

function imagecreatefromstring( string $data) {

  /**
   * imagecreatefromstring returns an image identifier
   * representing the image obtained from the given data. These
   * types will be automatically detected if your build of PHP
   * supports them: JPEG, PNG, GIF, BMP, WBMP, GD2, WEBP and AVIF.
   **/
}

/**
 * &gd.image.new;.
 **/

function imagecreatefromtga( string $filename) {

  /**
   * imagecreatefromtga returns an image object representing the
   * image obtained from the given filename.
   **/
}

/**
 * &gd.image.new;.
 **/

function imagecreatefromwbmp( string $filename) {

  /**
   * imagecreatefromwbmp returns an image identifier representing
   * the image obtained from the given filename.
   **/
}

/**
 * &gd.image.new;.
 **/

function imagecreatefromwebp( string $filename) {

  /**
   * imagecreatefromwebp returns an image identifier representing
   * the image obtained from the given filename. Note that animated
   * WebP files cannot be read.
   **/
}

/**
 * &gd.image.new;.
 **/

function imagecreatefromxbm( string $filename) {

  /**
   * imagecreatefromxbm returns an image identifier representing
   * the image obtained from the given filename.
   **/
}

/**
 * &gd.image.new;.
 **/

function imagecreatefromxpm( string $filename) {

  /**
   * imagecreatefromxpm returns an image identifier representing
   * the image obtained from the given filename.
   **/
}

/**
 * Create a new true color image.
 **/

function imagecreatetruecolor( int $width,  int $height) {

  /**
   * imagecreatetruecolor returns an image object representing a
   * black image of the specified size.
   **/
}

/**
 * Crop an image to the given rectangle.
 **/

function imagecrop( GdImage $image,  array $rectangle) {

  /**
   * Crops an image to the given rectangular area and returns the
   * resulting image. The given image is not modified.
   **/
}

/**
 * Crop an image automatically using one of the available modes.
 **/

function imagecropauto(
     GdImage $image
  ,  int $mode = IMG_CROP_DEFAULT
  ,  float $threshold = 0.5
  ,  int $color = -1
  ) {

  /**
   * Automatically crops an image according to the given mode.
   **/
}

/**
 * Draw a dashed line.
 **/

function imagedashedline(
     GdImage $image
  ,  int $x1
  ,  int $y1
  ,  int $x2
  ,  int $y2
  ,  int $color
  ) {

  /**
   * This function is deprecated. Use combination of imagesetstyle
   * and imageline instead.
   **/
}

/**
 * Destroy an image.
 **/

function imagedestroy( GdImage $image) {

  /**
   * Prior to PHP 8.0.0, imagedestroy freed any memory associated
   * with image image.
   **/
}

/**
 * Draw an ellipse.
 **/

function imageellipse(
     GdImage $image
  ,  int $center_x
  ,  int $center_y
  ,  int $width
  ,  int $height
  ,  int $color
  ) {

  /**
   * Draws an ellipse centered at the specified coordinates.
   **/
}

/**
 * Flood fill.
 **/

function imagefill( GdImage $image,  int $x,  int $y,  int $color) {

  /**
   * Performs a flood fill starting at the given coordinate (top
   * left is 0, 0) with the given color in the image.
   **/
}

/**
 * Draw a partial arc and fill it.
 **/

function imagefilledarc(
     GdImage $image
  ,  int $center_x
  ,  int $center_y
  ,  int $width
  ,  int $height
  ,  int $start_angle
  ,  int $end_angle
  ,  int $color
  ,  int $style
  ) {

  /**
   * Draws a partial arc centered at the specified coordinate in
   * the given image.
   **/
}

/**
 * Draw a filled ellipse.
 **/

function imagefilledellipse(
     GdImage $image
  ,  int $center_x
  ,  int $center_y
  ,  int $width
  ,  int $height
  ,  int $color
  ) {

  /**
   * Draws an ellipse centered at the specified coordinate on the
   * given image.
   **/
}

/**
 * Draw a filled polygon.
 **/

function imagefilledpolygon() {

  /**
   * imagefilledpolygon creates a filled polygon in the given
   * image.
   **/
}

/**
 * Draw a filled rectangle.
 **/

function imagefilledrectangle(
     GdImage $image
  ,  int $x1
  ,  int $y1
  ,  int $x2
  ,  int $y2
  ,  int $color
  ) {

  /**
   * Creates a rectangle filled with color in the given image
   * starting at point 1 and ending at point 2. 0, 0 is the top
   * left corner of the image.
   **/
}

/**
 * Flood fill to specific color.
 **/

function imagefilltoborder(
     GdImage $image
  ,  int $x
  ,  int $y
  ,  int $border_color
  ,  int $color
  ) {

  /**
   * imagefilltoborder performs a flood fill whose border color is
   * defined by border_color. The starting point for the fill is x,
   * y (top left is 0, 0) and the region is filled with color
   * color.
   **/
}

/**
 * Applies a filter to an image.
 **/

function imagefilter( GdImage $image,  int $filter, $args) {

  /**
   * imagefilter applies the given filter filter on the image.
   **/
}

/**
 * Flips an image using a given mode.
 **/

function imageflip( GdImage $image,  int $mode) {

  /**
   * Flips the image image using the given mode.
   **/
}

/**
 * Get font height.
 **/

function imagefontheight($font) {

  /**
   * Returns the pixel height of a character in the specified
   * font.
   **/
}

/**
 * Get font width.
 **/

function imagefontwidth($font) {

  /**
   * Returns the pixel width of a character in font.
   **/
}

/**
 * Give the bounding box of a text using fonts via freetype2.
 **/

function imageftbbox(
     float $size
  ,  float $angle
  ,  string $font_filename
  ,  string $string
  ,  array $options = []
  ) {

  /**
   * This function calculates and returns the bounding box in
   * pixels for a FreeType text.
   *
   * Prior to PHP 8.0.0, imageftbbox was an extended variant of
   * imagettfbbox which additionally supported the options. As of
   * PHP 8.0.0, imagettfbbox is an alias of imageftbbox.
   **/
}

/**
 * Write text to the image using fonts using FreeType 2.
 **/

function imagefttext(
     GdImage $image
  ,  float $size
  ,  float $angle
  ,  int $x
  ,  int $y
  ,  int $color
  ,  string $font_filename
  ,  string $text
  ,  array $options = []
  ) {

  /**
   * Prior to PHP 8.0.0, imagefttext was an extended variant of
   * imagettftext which additionally supported the options. As of
   * PHP 8.0.0, imagettftext is an alias of imagefttext.
   **/
}

/**
 * Apply a gamma correction to a GD image.
 **/

function imagegammacorrect(
     GdImage $image
  ,  float $input_gamma
  ,  float $output_gamma
  ) {

  /**
   * Applies gamma correction to the given gd image given an input
   * and an output gamma.
   **/
}

/**
 * Output GD image to browser or file.
 **/

function imagegd( GdImage $image, $file = null) {

  /**
   * Outputs a GD image to the given file.
   **/
}

/**
 * Output GD2 image to browser or file.
 **/

function imagegd2(
     GdImage $image
  , $file = null
  ,  int $chunk_size = 128
  ,  int $mode = IMG_GD2_RAW
  ) {

  /**
   * Outputs a GD2 image to the given file.
   **/
}

/**
 * Get the clipping rectangle.
 **/

function imagegetclip() {

  /**
   * imagegetclip retrieves the current clipping rectangle, i.e.
   * the area beyond which no pixels will be drawn.
   **/
}

/**
 * Get the interpolation method.
 **/

function imagegetinterpolation( GdImage $image) {

  /**
   * Gets the currently set interpolation method of the image.
   **/
}

/**
 * &gd.image.output;.
 **/

function imagegif( GdImage $image, $file = null) {

  /**
   * imagegif creates the GIF file in file from the image image.
   * The image argument is the return from the imagecreate or
   * imagecreatefrom* function.
   *
   * The image format will be GIF87a unless the image has been
   * made transparent with imagecolortransparent, in which case the
   * image format will be GIF89a.
   **/
}

/**
 * Captures the whole screen.
 **/

function imagegrabscreen() {

  /**
   * Grabs a screenshot of the whole screen.
   *
   * This function is only available on Windows.
   **/
}

/**
 * Captures a window.
 **/

function imagegrabwindow( int $handle,  bool $client_area = false) {

  /**
   * Grabs a window or its client area using a windows handle
   * (HWND property in COM instance)
   *
   * This function is only available on Windows.
   **/
}

/**
 * Enable or disable interlace.
 **/

function imageinterlace( GdImage $image, $enable = null) {

  /**
   * imageinterlace turns the interlace bit on or off.
   *
   * If the interlace bit is set and the image is used as a JPEG
   * image, the image is created as a progressive JPEG.
   **/
}

/**
 * Finds whether an image is a truecolor image.
 **/

function imageistruecolor( GdImage $image) {

  /**
   * imageistruecolor finds whether the image image is a truecolor
   * image.
   **/
}

/**
 * &gd.image.output;.
 **/

function imagejpeg( GdImage $image, $file = null,  int $quality = -1) {

  /**
   * imagejpeg creates a JPEG file from the given image.
   **/
}

/**
 * Set the alpha blending flag to use layering effects.
 **/

function imagelayereffect( GdImage $image,  int $effect) {

  /**
   * Set the alpha blending flag to use layering effects.
   **/
}

/**
 * Draw a line.
 **/

function imageline(
     GdImage $image
  ,  int $x1
  ,  int $y1
  ,  int $x2
  ,  int $y2
  ,  int $color
  ) {

  /**
   * Draws a line between the two given points.
   **/
}

/**
 * Load a new font.
 **/

function imageloadfont( string $filename) {

  /**
   * imageloadfont loads a user-defined bitmap and returns its
   * identifier.
   **/
}

/**
 * Draws an open polygon.
 **/

function imageopenpolygon() {

  /**
   * imageopenpolygon draws an open polygon on the given image.
   * Contrary to imagepolygon, no line is drawn between the last
   * and the first point.
   **/
}

/**
 * Copy the palette from one image to another.
 **/

function imagepalettecopy( GdImage $dst,  GdImage $src) {

  /**
   * imagepalettecopy copies the palette from the src image to the
   * dst image.
   **/
}

/**
 * Converts a palette based image to true color.
 **/

function imagepalettetotruecolor( GdImage $image) {

  /**
   * Converts a palette based image, created by functions like
   * imagecreate to a true color image, like imagecreatetruecolor.
   **/
}

/**
 * Output a PNG image to either the browser or a file.
 **/

function imagepng(
     GdImage $image
  , $file = null
  ,  int $quality = -1
  ,  int $filters = -1
  ) {

  /**
   * Outputs or saves a PNG image from the given image.
   **/
}

/**
 * Draws a polygon.
 **/

function imagepolygon() {

  /**
   * imagepolygon creates a polygon in the given image.
   **/
}

/**
 * Draw a rectangle.
 **/

function imagerectangle(
     GdImage $image
  ,  int $x1
  ,  int $y1
  ,  int $x2
  ,  int $y2
  ,  int $color
  ) {

  /**
   * imagerectangle creates a rectangle starting at the specified
   * coordinates.
   **/
}

/**
 * Get or set the resolution of the image.
 **/

function imageresolution() {

  /**
   * imageresolution allows to set and get the resolution of an
   * image in DPI (dots per inch). If the optional parameters are
   * &null;, the current resolution is returned as an indexed
   * array. If only resolution_x is not &null;, the horizontal and
   * vertical resolution are set to this value. If none of the
   * optional parameters are &null;, the horizontal and vertical
   * resolution are set to these values, respectively.
   *
   * The resolution is only used as meta information when images
   * are read from and written to formats supporting this kind of
   * information (curently PNG and JPEG). It does not affect any
   * drawing operations. The default resolution for new images is
   * 96 DPI.
   **/
}

/**
 * Rotate an image with a given angle.
 **/

function imagerotate(
     GdImage $image
  ,  float $angle
  ,  int $background_color
  ) {

  /**
   * Rotates the image image using the given angle in degrees.
   *
   * The center of rotation is the center of the image, and the
   * rotated image may have different dimensions than the original
   * image.
   **/
}

/**
 * Whether to retain full alpha channel information when saving.
 * images.
 **/

function imagesavealpha( GdImage $image,  bool $enable) {

  /**
   * imagesavealpha sets the flag which determines whether to
   * retain full alpha channel information (as opposed to
   * single-color transparency) when saving images. This is only
   * supported for image formats which support full alpha channel
   * information, i.e. PNG, WebP and AVIF. imagesavealpha is only
   * meaningful for PNG images, since the full alpha channel is
   * always saved for WebP and AVIF. It is not recommended to rely
   * on this behavior, as it may change in the future. Thus,
   * imagesavealpha should be called deliberately also for WebP and
   * AVIF images.
   *
   * Alphablending has to be disabled (imagealphablending($im,
   * false)) to retain the alpha-channel in the first place.
   **/
}

/**
 * Scale an image using the given new width and height.
 **/

function imagescale(
     GdImage $image
  ,  int $width
  ,  int $height = -1
  ,  int $mode = IMG_BILINEAR_FIXED
  ) {

  /**
   * imagescale scales an image using the given interpolation
   * algorithm.
   *
   * Unlike many of other image functions, imagescale does not
   * modify the passed image; instead, a new image is returned.
   **/
}

/**
 * Set the brush image for line drawing.
 **/

function imagesetbrush( GdImage $image,  GdImage $brush) {

  /**
   * imagesetbrush sets the brush image to be used by all line
   * drawing functions (such as imageline and imagepolygon) when
   * drawing with the special colors IMG_COLOR_BRUSHED or
   * IMG_COLOR_STYLEDBRUSHED.
   *
   * You need not take special action when you are finished with a
   * brush, but if you destroy the brush image (or let PHP destroy
   * it), you must not use the IMG_COLOR_BRUSHED or
   * IMG_COLOR_STYLEDBRUSHED colors until you have set a new brush
   * image!
   **/
}

/**
 * Set the clipping rectangle.
 **/

function imagesetclip() {

  /**
   * imagesetclip sets the current clipping rectangle, i.e. the
   * area beyond which no pixels will be drawn.
   **/
}

/**
 * Set the interpolation method.
 **/

function imagesetinterpolation(
     GdImage $image
  ,  int $method = IMG_BILINEAR_FIXED
  ) {

  /**
   * Sets the interpolation method, setting an interpolation
   * method affects the rendering of various functions in GD, such
   * as the imagerotate function.
   **/
}

/**
 * Set a single pixel.
 **/

function imagesetpixel(
     GdImage $image
  ,  int $x
  ,  int $y
  ,  int $color
  ) {

  /**
   * imagesetpixel draws a pixel at the specified coordinate.
   **/
}

/**
 * Set the style for line drawing.
 **/

function imagesetstyle( GdImage $image,  array $style) {

  /**
   * imagesetstyle sets the style to be used by all line drawing
   * functions (such as imageline and imagepolygon) when drawing
   * with the special color IMG_COLOR_STYLED or lines of images
   * with color IMG_COLOR_STYLEDBRUSHED.
   **/
}

/**
 * Set the thickness for line drawing.
 **/

function imagesetthickness( GdImage $image,  int $thickness) {

  /**
   * imagesetthickness sets the thickness of the lines drawn when
   * drawing rectangles, polygons, arcs etc. to thickness pixels.
   **/
}

/**
 * Set the tile image for filling.
 **/

function imagesettile( GdImage $image,  GdImage $tile) {

  /**
   * imagesettile sets the tile image to be used by all region
   * filling functions (such as imagefill and imagefilledpolygon)
   * when filling with the special color IMG_COLOR_TILED.
   *
   * A tile is an image used to fill an area with a repeated
   * pattern. Any GD image can be used as a tile, and by setting
   * the transparent color index of the tile image with
   * imagecolortransparent, a tile allows certain parts of the
   * underlying area to shine through can be created.
   *
   * You need not take special action when you are finished with a
   * tile, but if you destroy the tile image (or let PHP destroy
   * it), you must not use the IMG_COLOR_TILED color until you have
   * set a new tile image!
   **/
}

/**
 * Draw a string horizontally.
 **/

function imagestring(
     GdImage $image
  , $font
  ,  int $x
  ,  int $y
  ,  string $string
  ,  int $color
  ) {

  /**
   * Draws a string at the given coordinates.
   **/
}

/**
 * Draw a string vertically.
 **/

function imagestringup(
     GdImage $image
  , $font
  ,  int $x
  ,  int $y
  ,  string $string
  ,  int $color
  ) {

  /**
   * Draws a string vertically at the given coordinates.
   **/
}

/**
 * Get image width.
 **/

function imagesx( GdImage $image) {

  /**
   * Returns the width of the given image object.
   **/
}

/**
 * Get image height.
 **/

function imagesy( GdImage $image) {

  /**
   * Returns the height of the given image object.
   **/
}

/**
 * Convert a true color image to a palette image.
 **/

function imagetruecolortopalette(
     GdImage $image
  ,  bool $dither
  ,  int $num_colors
  ) {

  /**
   * imagetruecolortopalette converts a truecolor image to a
   * palette image. The code for this function was originally drawn
   * from the Independent JPEG Group library code, which is
   * excellent. The code has been modified to preserve as much
   * alpha channel information as possible in the resulting
   * palette, in addition to preserving colors as well as possible.
   * This does not work as well as might be hoped. It is usually
   * best to simply produce a truecolor output image instead, which
   * guarantees the highest output quality.
   **/
}

/**
 * Give the bounding box of a text using TrueType fonts.
 **/

function imagettfbbox(
     float $size
  ,  float $angle
  ,  string $font_filename
  ,  string $string
  ,  array $options = []
  ) {

  /**
   * This function calculates and returns the bounding box in
   * pixels for a TrueType text.
   *
   * Prior to PHP 8.0.0, imageftbbox was an extended variant of
   * imagettfbbox which additionally supported the extrainfo. As of
   * PHP 8.0.0, imagettfbbox is an alias of imageftbbox.
   **/
}

/**
 * Write text to the image using TrueType fonts.
 **/

function imagettftext(
     GdImage $image
  ,  float $size
  ,  float $angle
  ,  int $x
  ,  int $y
  ,  int $color
  ,  string $font_filename
  ,  string $text
  ,  array $options = []
  ) {

  /**
   * Writes the given text into the image using TrueType fonts.
   *
   * Prior to PHP 8.0.0, imagefttext was an extended variant of
   * imagettftext which additionally supported the extrainfo. As of
   * PHP 8.0.0, imagettftext is an alias of imagefttext.
   **/
}

/**
 * Return the image types supported by this PHP build.
 **/

function imagetypes() {

  /**
   * Returns the image types supported by the current PHP
   * installation.
   **/
}

/**
 * &gd.image.output;.
 **/

function imagewbmp(
     GdImage $image
  , $file = null
  , $foreground_color = null
  ) {

  /**
   * imagewbmp outputs or save a WBMP version of the given image.
   **/
}

/**
 * Output a WebP image to browser or file.
 **/

function imagewebp( GdImage $image, $file = null,  int $quality = -1) {

  /**
   * Outputs or saves a WebP version of the given image.
   **/
}

/**
 * Output an XBM image to browser or file.
 **/

function imagexbm(
     GdImage $image
  , $filename
  , $foreground_color = null
  ) {

  /**
   * Outputs or save an XBM version of the given image.
   **/
}

/**
 * Embeds binary IPTC data into a JPEG image.
 **/

function iptcembed(
     string $iptc_data
  ,  string $filename
  ,  int $spool = 0
  ) {

  /**
   * Embeds binary IPTC data into a JPEG image.
   **/
}

/**
 * Parse a binary IPTC block into single tags.
 **/

function iptcparse( string $iptc_block) {

  /**
   * Parses an IPTC block into its single tags.
   **/
}

/**
 * Convert JPEG image file to WBMP image file.
 **/

function jpeg2wbmp(
     string $jpegname
  ,  string $wbmpname
  ,  int $dest_height
  ,  int $dest_width
  ,  int $threshold
  ) {

  /**
   * Converts a JPEG file into a WBMP file.
   **/
}

/**
 * Convert PNG image file to WBMP image file.
 **/

function png2wbmp(
     string $pngname
  ,  string $wbmpname
  ,  int $dest_height
  ,  int $dest_width
  ,  int $threshold
  ) {

  /**
   * Converts a PNG file into a WBMP file.
   **/
}

/**
 * Convert an 8bit string to a quoted-printable string.
 **/

function imap_8bit( string $string) {

  /**
   * Convert an 8bit string to a quoted-printable string
   * (according to RFC2045, section 6.7).
   **/
}

/**
 * Returns all IMAP alert messages that have occurred.
 **/

function imap_alerts() {

  /**
   * Returns all of the IMAP alert messages generated since the
   * last imap_alerts call, or the beginning of the page.
   *
   * When imap_alerts is called, the alert stack is subsequently
   * cleared. The IMAP specification requires that these messages
   * be passed to the user.
   **/
}

/**
 * Append a string message to a specified mailbox.
 **/

function imap_append(
     IMAP\Connection $imap
  ,  string $folder
  ,  string $message
  , $options = null
  , $internal_date = null
  ) {

  /**
   * Appends a string message to the specified folder.
   **/
}

/**
 * Decode BASE64 encoded text.
 **/

function imap_base64( string $string) {

  /**
   * Decodes the given BASE-64 encoded string.
   **/
}

/**
 * Convert an 8bit string to a base64 string.
 **/

function imap_binary( string $string) {

  /**
   * Convert an 8bit string to a base64 string according to
   * RFC2045, Section 6.8.
   **/
}

/**
 * Read the message body.
 **/

function imap_body(
     IMAP\Connection $imap
  ,  int $message_num
  ,  int $flags = 0
  ) {

  /**
   * imap_body returns the body of the message, numbered
   * message_num in the current mailbox.
   *
   * imap_body will only return a verbatim copy of the message
   * body. To extract single parts of a multipart MIME-encoded
   * message you have to use imap_fetchstructure to analyze its
   * structure and imap_fetchbody to extract a copy of a single
   * body component.
   **/
}

/**
 * Read the structure of a specified body section of a specific.
 * message.
 **/

function imap_bodystruct(
     IMAP\Connection $imap
  ,  int $message_num
  ,  string $section
  ) {

  /**
   * Read the structure of a specified body section of a specific
   * message.
   **/
}

/**
 * Check current mailbox.
 **/

function imap_check( IMAP\Connection $imap) {

  /**
   * Checks information about the current mailbox.
   **/
}

/**
 * Clears flags on messages.
 **/

function imap_clearflag_full(
     IMAP\Connection $imap
  ,  string $sequence
  ,  string $flag
  ,  int $options = 0
  ) {

  /**
   * This function causes a store to delete the specified flag to
   * the flags set for the messages in the specified sequence.
   **/
}

/**
 * Close an IMAP stream.
 **/

function imap_close( IMAP\Connection $imap,  int $flags = 0) {

  /**
   * Closes the imap stream.
   **/
}

/**
 * &Alias; imap_createmailbox.
 **/

function () {

  /**
   **/
}

/**
 * Create a new mailbox.
 **/

function imap_createmailbox( IMAP\Connection $imap,  string $mailbox) {

  /**
   * Creates a new mailbox specified by mailbox.
   **/
}

/**
 * Mark a message for deletion from current mailbox.
 **/

function imap_delete(
     IMAP\Connection $imap
  ,  string $message_nums
  ,  int $flags = 0
  ) {

  /**
   * Marks messages listed in message_nums for deletion. Messages
   * marked for deletion will stay in the mailbox until either
   * imap_expunge is called or imap_close is called with the
   * optional parameter CL_EXPUNGE.
   **/
}

/**
 * Delete a mailbox.
 **/

function imap_deletemailbox( IMAP\Connection $imap,  string $mailbox) {

  /**
   * Deletes the specified mailbox.
   **/
}

/**
 * Returns all of the IMAP errors that have occurred.
 **/

function imap_errors() {

  /**
   * Gets all of the IMAP errors (if any) that have occurred
   * during this page request or since the error stack was reset.
   *
   * When imap_errors is called, the error stack is subsequently
   * cleared.
   **/
}

/**
 * Delete all messages marked for deletion.
 **/

function imap_expunge( IMAP\Connection $imap) {

  /**
   * Deletes all the messages marked for deletion by imap_delete,
   * imap_mail_move, or imap_setflag_full.
   **/
}

/**
 * Read an overview of the information in the headers of the.
 * given message.
 **/

function imap_fetch_overview(
     IMAP\Connection $imap
  ,  string $sequence
  ,  int $flags = 0
  ) {

  /**
   * This function fetches mail headers for the given sequence and
   * returns an overview of their contents.
   **/
}

/**
 * Fetch a particular section of the body of the message.
 **/

function imap_fetchbody(
     IMAP\Connection $imap
  ,  int $message_num
  ,  string $section
  ,  int $flags = 0
  ) {

  /**
   * Fetch of a particular section of the body of the specified
   * messages. Body parts are not decoded by this function.
   **/
}

/**
 * Returns header for a message.
 **/

function imap_fetchheader(
     IMAP\Connection $imap
  ,  int $message_num
  ,  int $flags = 0
  ) {

  /**
   * This function causes a fetch of the complete, unfiltered
   * RFC2822 format header of the specified message.
   **/
}

/**
 * Fetch MIME headers for a particular section of the message.
 **/

function imap_fetchmime(
     IMAP\Connection $imap
  ,  int $message_num
  ,  string $section
  ,  int $flags = 0
  ) {

  /**
   * Fetch the MIME headers of a particular section of the body of
   * the specified messages.
   **/
}

/**
 * Read the structure of a particular message.
 **/

function imap_fetchstructure(
     IMAP\Connection $imap
  ,  int $message_num
  ,  int $flags = 0
  ) {

  /**
   * Fetches all the structured information for a given message.
   **/
}

/**
 * &Alias; imap_body.
 **/

function () {

  /**
   **/
}

/**
 * Clears IMAP cache.
 **/

function imap_gc( IMAP\Connection $imap,  int $flags) {

  /**
   * Purges the cache of entries of a specific type.
   **/
}

/**
 * Retrieve the quota level settings, and usage statics per.
 * mailbox.
 **/

function imap_get_quota( IMAP\Connection $imap,  string $quota_root) {

  /**
   * Retrieve the quota level settings, and usage statics per
   * mailbox.
   *
   * For a non-admin user version of this function, please see the
   * imap_get_quotaroot function of PHP.
   **/
}

/**
 * Retrieve the quota settings per user.
 **/

function imap_get_quotaroot( IMAP\Connection $imap,  string $mailbox) {

  /**
   * Retrieve the quota settings per user. The limit value
   * represents the total amount of space allowed for this user's
   * total mailbox usage. The usage value represents the user's
   * current total mailbox capacity.
   **/
}

/**
 * Gets the ACL for a given mailbox.
 **/

function imap_getacl( IMAP\Connection $imap,  string $mailbox) {

  /**
   * Gets the ACL for a given mailbox.
   **/
}

/**
 * Read the list of mailboxes, returning detailed information on.
 * each one.
 **/

function imap_getmailboxes(
     IMAP\Connection $imap
  ,  string $reference
  ,  string $pattern
  ) {

  /**
   * Gets information on the mailboxes.
   **/
}

/**
 * List all the subscribed mailboxes.
 **/

function imap_getsubscribed(
     IMAP\Connection $imap
  ,  string $reference
  ,  string $pattern
  ) {

  /**
   * Gets information about the subscribed mailboxes.
   *
   * Identical to imap_getmailboxes, except that it only returns
   * mailboxes that the user is subscribed to.
   **/
}

/**
 * &Alias; imap_headerinfo.
 **/

function () {

  /**
   **/
}

/**
 * Read the header of the message.
 **/

function imap_headerinfo(
     IMAP\Connection $imap
  ,  int $message_num
  ,  int $from_length = 0
  ,  int $subject_length = 0
  ) {

  /**
   * Gets information about the given message number by reading
   * its headers.
   **/
}

/**
 * Returns headers for all messages in a mailbox.
 **/

function imap_headers( IMAP\Connection $imap) {

  /**
   * Returns headers for all messages in a mailbox.
   **/
}

/**
 * Check if the IMAP stream is still valid.
 **/

function imap_is_open( IMAP\Connection $imap) {

  /**
   * Check if the IMAP stream is still valid.
   **/
}

/**
 * Gets the last IMAP error that occurred during this page.
 * request.
 **/

function imap_last_error() {

  /**
   * Gets the full text of the last IMAP error message that
   * occurred on the current page. The error stack is untouched;
   * calling imap_last_error subsequently, with no intervening
   * errors, will return the same error.
   **/
}

/**
 * Read the list of mailboxes.
 **/

function imap_list(
     IMAP\Connection $imap
  ,  string $reference
  ,  string $pattern
  ) {

  /**
   * Read the list of mailboxes.
   **/
}

/**
 * &Alias; imap_list.
 **/

function () {

  /**
   **/
}

/**
 * Returns the list of mailboxes that matches the given text.
 **/

function imap_listscan(
     IMAP\Connection $imap
  ,  string $reference
  ,  string $pattern
  ,  string $content
  ) {

  /**
   * Returns an array containing the names of the mailboxes that
   * have content in the text of the mailbox.
   *
   * This function is similar to imap_listmailbox, but it will
   * additionally check for the presence of the string content
   * inside the mailbox data.
   **/
}

/**
 * &Alias; imap_lsub.
 **/

function () {

  /**
   **/
}

/**
 * List all the subscribed mailboxes.
 **/

function imap_lsub(
     IMAP\Connection $imap
  ,  string $reference
  ,  string $pattern
  ) {

  /**
   * Gets an array of all the mailboxes that you have subscribed.
   **/
}

/**
 * Create a MIME message based on given envelope and body.
 * sections.
 **/

function imap_mail_compose( array $envelope,  array $bodies) {

  /**
   * Create a MIME message based on the given envelope and bodies
   * sections.
   **/
}

/**
 * Copy specified messages to a mailbox.
 **/

function imap_mail_copy(
     IMAP\Connection $imap
  ,  string $message_nums
  ,  string $mailbox
  ,  int $flags = 0
  ) {

  /**
   * Copies mail messages specified by message_nums to specified
   * mailbox.
   **/
}

/**
 * Move specified messages to a mailbox.
 **/

function imap_mail_move(
     IMAP\Connection $imap
  ,  string $message_nums
  ,  string $mailbox
  ,  int $flags = 0
  ) {

  /**
   * Moves mail messages specified by message_nums to the
   * specified mailbox. Note that the mail messages are actually
   * copied to the mailbox, and the original messages are flagged
   * for deletion. That implies that the messages in mailbox are
   * assigned new UIDs.
   **/
}

/**
 * Send an email message.
 **/

function imap_mail(
     string $to
  ,  string $subject
  ,  string $message
  , $additional_headers = null
  , $cc = null
  , $bcc = null
  , $return_path = null
  ) {

  /**
   * This function allows sending of emails with correct handling
   * of Cc and Bcc receivers.
   *
   * The parameters to, cc and bcc are all strings and are all
   * parsed as RFC822 address lists.
   **/
}

/**
 * Get information about the current mailbox.
 **/

function imap_mailboxmsginfo( IMAP\Connection $imap) {

  /**
   * Checks the current mailbox status on the server. It is
   * similar to imap_status, but will additionally sum up the size
   * of all messages in the mailbox, which will take some
   * additional time to execute.
   **/
}

/**
 * Decode MIME header elements.
 **/

function imap_mime_header_decode( string $string) {

  /**
   * Decodes MIME message header extensions that are non ASCII
   * text (see RFC2047).
   **/
}

/**
 * Gets the message sequence number for the given UID.
 **/

function imap_msgno( IMAP\Connection $imap,  int $message_uid) {

  /**
   * Returns the message sequence number for the given
   * message_uid.
   *
   * This function is the inverse of imap_uid.
   **/
}

/**
 * Decode a modified UTF-7 string to UTF-8.
 **/

function imap_mutf7_to_utf8() {

  /**
   * Decode a modified UTF-7 (as specified in RFC 2060, section
   * 5.1.3) string to UTF-8.
   *
   * This function is only available, if libcclient exports
   * utf8_to_mutf7().
   **/
}

/**
 * Gets the number of messages in the current mailbox.
 **/

function imap_num_msg( IMAP\Connection $imap) {

  /**
   * Gets the number of messages in the current mailbox.
   **/
}

/**
 * Gets the number of recent messages in current mailbox.
 **/

function imap_num_recent( IMAP\Connection $imap) {

  /**
   * Gets the number of recent messages in the current mailbox.
   **/
}

/**
 * Open an IMAP stream to a mailbox.
 **/

function imap_open(
     string $mailbox
  ,  string $user
  ,  string $password
  ,  int $flags = 0
  ,  int $retries = 0
  ,  array $options = []
  ) {

  /**
   * Opens an IMAP stream to a mailbox.
   *
   * This function can also be used to open streams to POP3 and
   * NNTP servers, but some functions and features are only
   * available on IMAP servers.
   **/
}

/**
 * Check if the IMAP stream is still active.
 **/

function imap_ping( IMAP\Connection $imap) {

  /**
   * imap_ping pings the stream to see if it's still active. It
   * may discover new mail; this is the preferred method for a
   * periodic "new mail check" as well as a "keep alive" for
   * servers which have inactivity timeout.
   **/
}

/**
 * Convert a quoted-printable string to an 8 bit string.
 **/

function imap_qprint( string $string) {

  /**
   * Convert a quoted-printable string to an 8 bit string
   * according to RFC2045, section 6.7.
   **/
}

/**
 * &Alias; imap_renamemailbox.
 **/

function () {

  /**
   **/
}

/**
 * Rename an old mailbox to new mailbox.
 **/

function imap_renamemailbox(
     IMAP\Connection $imap
  ,  string $from
  ,  string $to
  ) {

  /**
   * This function renames on old mailbox to new mailbox (see
   * imap_open for the format of mbox names).
   **/
}

/**
 * Reopen IMAP stream to new mailbox.
 **/

function imap_reopen(
     IMAP\Connection $imap
  ,  string $mailbox
  ,  int $flags = 0
  ,  int $retries = 0
  ) {

  /**
   * Reopens the specified stream to a new mailbox on an IMAP or
   * NNTP server.
   **/
}

/**
 * Parses an address string.
 **/

function imap_rfc822_parse_adrlist(
     string $string
  ,  string $default_hostname
  ) {

  /**
   * Parses the address string as defined in RFC2822 and for each
   * address.
   **/
}

/**
 * Parse mail headers from a string.
 **/

function imap_rfc822_parse_headers(
     string $headers
  ,  string $default_hostname = "UNKNOWN"
  ) {

  /**
   * Gets an object of various header elements, similar to
   * imap_header.
   **/
}

/**
 * Returns a properly formatted email address given the mailbox,.
 * host, and personal info.
 **/

function imap_rfc822_write_address(
     string $mailbox
  ,  string $hostname
  ,  string $personal
  ) {

  /**
   * Returns a properly formatted email address as defined in
   * RFC2822 given the needed information.
   **/
}

/**
 * Save a specific body section to a file.
 **/

function imap_savebody(
     IMAP\Connection $imap
  , $file
  ,  int $message_num
  ,  string $section = ""
  ,  int $flags = 0
  ) {

  /**
   * Saves a part or the whole body of the specified message.
   **/
}

/**
 * &Alias; imap_listscan.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; imap_listscan.
 **/

function () {

  /**
   **/
}

/**
 * This function returns an array of messages matching the given.
 * search criteria.
 **/

function imap_search(
     IMAP\Connection $imap
  ,  string $criteria
  ,  int $flags = SE_FREE
  ,  string $charset = ""
  ) {

  /**
   * This function performs a search on the mailbox currently
   * opened in the given IMAP stream.
   *
   * For example, to match all unanswered messages sent by Mom,
   * you'd use: "UNANSWERED FROM mom". Searches appear to be case
   * insensitive. This list of criteria is from a reading of the UW
   * c-client source code and may be incomplete or inaccurate (see
   * also RFC1176, section "tag SEARCH search_criteria").
   **/
}

/**
 * Sets a quota for a given mailbox.
 **/

function imap_set_quota(
     IMAP\Connection $imap
  ,  string $quota_root
  ,  int $mailbox_size
  ) {

  /**
   * Sets an upper limit quota on a per mailbox basis.
   **/
}

/**
 * Sets the ACL for a given mailbox.
 **/

function imap_setacl(
     IMAP\Connection $imap
  ,  string $mailbox
  ,  string $user_id
  ,  string $rights
  ) {

  /**
   * Sets the ACL for a giving mailbox.
   **/
}

/**
 * Sets flags on messages.
 **/

function imap_setflag_full(
     IMAP\Connection $imap
  ,  string $sequence
  ,  string $flag
  ,  int $options = 0
  ) {

  /**
   * Causes a store to add the specified flag to the flags set for
   * the messages in the specified sequence.
   **/
}

/**
 * Gets and sort messages.
 **/

function imap_sort(
     IMAP\Connection $imap
  ,  int $criteria
  ,  bool $reverse
  ,  int $flags = 0
  , $search_criteria = null
  , $charset = null
  ) {

  /**
   * Gets and sorts message numbers by the given parameters.
   **/
}

/**
 * Returns status information on a mailbox.
 **/

function imap_status(
     IMAP\Connection $imap
  ,  string $mailbox
  ,  int $flags
  ) {

  /**
   * Gets status information about the given mailbox.
   **/
}

/**
 * Subscribe to a mailbox.
 **/

function imap_subscribe( IMAP\Connection $imap,  string $mailbox) {

  /**
   * Subscribe to a new mailbox.
   **/
}

/**
 * Returns a tree of threaded message.
 **/

function imap_thread( IMAP\Connection $imap,  int $flags = SE_FREE) {

  /**
   * Gets a tree of a threaded message.
   **/
}

/**
 * Set or fetch imap timeout.
 **/

function imap_timeout( int $timeout_type,  int $timeout = -1) {

  /**
   * Sets or fetches the imap timeout.
   **/
}

/**
 * This function returns the UID for the given message sequence.
 * number.
 **/

function imap_uid( IMAP\Connection $imap,  int $message_num) {

  /**
   * This function returns the UID for the given message sequence
   * number. An UID is a unique identifier that will not change
   * over time while a message sequence number may change whenever
   * the content of the mailbox changes.
   *
   * This function is the inverse of imap_msgno.
   **/
}

/**
 * Unmark the message which is marked deleted.
 **/

function imap_undelete(
     IMAP\Connection $imap
  ,  string $message_nums
  ,  int $flags = 0
  ) {

  /**
   * Removes the deletion flag for a specified message, which is
   * set by imap_delete or imap_mail_move.
   **/
}

/**
 * Unsubscribe from a mailbox.
 **/

function imap_unsubscribe( IMAP\Connection $imap,  string $mailbox) {

  /**
   * Unsubscribe from the specified mailbox.
   **/
}

/**
 * Decodes a modified UTF-7 encoded string.
 **/

function imap_utf7_decode( string $string) {

  /**
   * Decodes modified UTF-7 string into ISO-8859-1 string.
   *
   * This function is needed to decode mailbox names that contain
   * certain characters which are not in range of printable ASCII
   * characters.
   **/
}

/**
 * Converts ISO-8859-1 string to modified UTF-7 text.
 **/

function imap_utf7_encode( string $string) {

  /**
   * Converts string to modified UTF-7 text.
   *
   * This is needed to encode mailbox names that contain certain
   * characters which are not in range of printable ASCII
   * characters.
   **/
}

/**
 * Encode a UTF-8 string to modified UTF-7.
 **/

function imap_utf8_to_mutf7() {

  /**
   * Encode a UTF-8 string to modified UTF-7 (as specified in RFC
   * 2060, section 5.1.3).
   *
   * This function is only available, if libcclient exports
   * utf8_to_mutf7().
   **/
}

/**
 * Converts MIME-encoded text to UTF-8.
 **/

function imap_utf8( string $mime_encoded_text) {

  /**
   * Converts the given mime_encoded_text to UTF-8, if the
   * declared charset is known to libc-client. Otherwise the given
   * text is decoded, but not converted to UTF-8.
   **/
}

/**
 * Set/get the various assert flags.
 **/

function assert_options( int $option,  mixed $value) {

  /**
   * Set the various assert control options or just query their
   * current settings.
   **/
}

/**
 * Checks an assertion.
 **/

function assert( mixed $assertion, $description = null) {

  /**
   * assert allows for the definition of expectations: assertions
   * that take effect in development and testing environments, but
   * are optimised away to have zero cost in production.
   *
   * Assertions should be used as a debugging feature only. One
   * use case for them is to act as sanity-checks for preconditions
   * that should always be &true; and that if they aren't upheld
   * this indicates some programming errors. Another use case is to
   * ensure the presence of certain features like extension
   * functions or certain system limits and features.
   *
   * As assertions can be configured to be eliminated, they should
   * not be used for normal runtime operations like input parameter
   * checks. As a rule of thumb code should behave as expected even
   * if assertion checking is deactivated.
   *
   * assert will check that the expectation given in assertion
   * holds. If not, and thus the result is &false;, it will take
   * the appropriate action depending on how assert was configured.
   *
   * The behaviour of assert is dictated by the following INI
   * settings: Assert &ConfigureOptions; &Name; &Default;
   * &Description; &Changelog; zend.assertions 1 1: generate and
   * execute code (development mode) 0: generate code but jump
   * around it at runtime -1: do not generate code (production
   * mode) assert.active &true; If &false;, assert does not check
   * the expectation and returns &true;, unconditionally.
   * Deprecated as of PHP 8.3.0. assert.callback &null; A user
   * defined function to call when an assertion fails. It's
   * signature should be: voidassert_callback stringfile intline
   * nullassertion stringdescription Prior to PHP 8.0.0, the
   * signature of the callback should be: voidassert_callback
   * stringfile intline stringassertion stringdescription
   * Deprecated as of PHP 8.3.0. assert.exception &true; If &true;
   * will throw an AssertionError if the expectation isn't upheld.
   * Deprecated as of PHP 8.3.0. assert.bail &false; If &true; will
   * abort execution of the PHP script if the expectation isn't
   * upheld. Deprecated as of PHP 8.3.0. assert.warning &true; If
   * &true;, will emit an E_WARNING if the expectation isn't
   * upheld. This INI setting is ineffective if assert.exception is
   * enabled. Deprecated as of PHP 8.3.0.
   *
   * A user defined function to call when an assertion fails. It's
   * signature should be: voidassert_callback stringfile intline
   * nullassertion stringdescription
   *
   * Prior to PHP 8.0.0, the signature of the callback should be:
   * voidassert_callback stringfile intline stringassertion
   * stringdescription
   **/
}

/**
 * Returns the current process title.
 **/

function cli_get_process_title() {

  /**
   * Returns the current process title, as set by
   * cli_set_process_title. Note that this may not exactly match
   * what is shown in ps or top, depending on your operating
   * system.
   *
   * This function is available only in CLI mode.
   **/
}

/**
 * Sets the process title.
 **/

function cli_set_process_title( string $title) {

  /**
   * Sets the process title visible in tools such as top and ps.
   * This function is available only in CLI mode.
   **/
}

/**
 * Loads a PHP extension at runtime.
 **/

function dl( string $extension_filename) {

  /**
   * Loads the PHP extension given by the parameter
   * extension_filename.
   *
   * Use extension_loaded to test whether a given extension is
   * already available or not. This works on both built-in
   * extensions and dynamically loaded ones (either through
   * &php.ini; or dl).
   **/
}

/**
 * Find out whether an extension is loaded.
 **/

function extension_loaded( string $extension) {

  /**
   * Finds out whether the extension is loaded.
   **/
}

/**
 * Forces collection of any existing garbage cycles.
 **/

function gc_collect_cycles() {

  /**
   * Forces collection of any existing garbage cycles.
   **/
}

/**
 * Deactivates the circular reference collector.
 **/

function gc_disable() {

  /**
   * Deactivates the circular reference collector, setting
   * zend.enable_gc to 0.
   **/
}

/**
 * Activates the circular reference collector.
 **/

function gc_enable() {

  /**
   * Activates the circular reference collector, setting
   * zend.enable_gc to 1.
   **/
}

/**
 * Returns status of the circular reference collector.
 **/

function gc_enabled() {

  /**
   * Returns status of the circular reference collector.
   **/
}

/**
 * Reclaims memory used by the Zend Engine memory manager.
 **/

function gc_mem_caches() {

  /**
   * Reclaims memory used by the Zend Engine memory manager.
   **/
}

/**
 * Gets information about the garbage collector.
 **/

function gc_status() {

  /**
   * Gets information about the current state of the garbage
   * collector.
   **/
}

/**
 * Gets the value of a PHP configuration option.
 **/

function get_cfg_var( string $option) {

  /**
   * Gets the value of a PHP configuration option.
   *
   * This function will not return configuration information set
   * when the PHP was compiled, or read from an Apache
   * configuration file.
   *
   * To check whether the system is using a configuration file,
   * try retrieving the value of the cfg_file_path configuration
   * setting. If this is available, a configuration file is being
   * used.
   **/
}

/**
 * Gets the name of the owner of the current PHP script.
 **/

function get_current_user() {

  /**
   **/
}

/**
 * Returns an associative array with the names of all the.
 * constants and their values.
 **/

function get_defined_constants( bool $categorize = false) {

  /**
   * Returns the names and values of all the constants currently
   * defined. This includes those created by extensions as well as
   * those created with the define function.
   **/
}

/**
 * Returns an array with the names of the functions of a module.
 **/

function get_extension_funcs( string $extension) {

  /**
   * This function returns the names of all the functions defined
   * in the module indicated by extension.
   **/
}

/**
 * Gets the current include_path configuration option.
 **/

function get_include_path() {

  /**
   **/
}

/**
 * Returns an array with the names of included or required files.
 **/

function get_included_files() {

  /**
   * Gets the names of all files that have been included using
   * include, include_once, require or require_once.
   **/
}

/**
 * Returns an array with the names of all modules compiled and.
 * loaded.
 **/

function get_loaded_extensions( bool $zend_extensions = false) {

  /**
   * This function returns the names of all the modules compiled
   * and loaded in the PHP interpreter.
   **/
}

/**
 * Gets the current configuration setting of magic_quotes_gpc.
 **/

function get_magic_quotes_gpc() {

  /**
   * Always returns &false;.
   **/
}

/**
 * Gets the current active configuration setting of.
 * magic_quotes_runtime.
 **/

function get_magic_quotes_runtime() {

  /**
   **/
}

/**
 * &Alias; get_included_files.
 **/

function () {

  /**
   **/
}

/**
 * Returns active resources.
 **/

function get_resources($type = null) {

  /**
   * Returns an array of all currently active resources,
   * optionally filtered by resource type.
   **/
}

/**
 * Gets the value of a single or all environment variables.
 **/

function getenv($name = null,  bool $local_only = false) {

  /**
   * Gets the value of a single or all environment variables.
   *
   * You can see a list of all the environmental variables by
   * using phpinfo. Many of these variables are listed within RFC
   * 3875, specifically section 4.1, "Request Meta-Variables".
   **/
}

/**
 * Gets time of last page modification.
 **/

function getlastmod() {

  /**
   * Gets the time of the last modification of the main script of
   * execution.
   *
   * If you're interested in getting the last modification time of
   * a different file, consider using filemtime.
   **/
}

/**
 * Get PHP script owner's GID.
 **/

function getmygid() {

  /**
   **/
}

/**
 * Gets the inode of the current script.
 **/

function getmyinode() {

  /**
   * Gets the inode of the current script.
   **/
}

/**
 * Gets PHP's process ID.
 **/

function getmypid() {

  /**
   * Gets the current PHP process ID.
   **/
}

/**
 * Gets PHP script owner's UID.
 **/

function getmyuid() {

  /**
   **/
}

/**
 * Gets options from the command line argument list.
 **/

function getopt(
     string $short_options
  ,  array $long_options = []
  ,  int &$rest_index = null
  ) {

  /**
   * Parses options passed to the script.
   **/
}

/**
 * Gets the current resource usages.
 **/

function getrusage( int $mode = 0) {

  /**
   * This is an interface to getrusage(2). It gets data returned
   * from the system call.
   **/
}

/**
 * &Alias; ini_set.
 **/

function () {

  /**
   **/
}

/**
 * Gets all configuration options.
 **/

function ini_get_all($extension = null,  bool $details = true) {

  /**
   * Returns all the registered configuration options.
   **/
}

/**
 * Gets the value of a configuration option.
 **/

function ini_get( string $option) {

  /**
   * Returns the value of the configuration option on success.
   **/
}

/**
 * Get interpreted size from ini shorthand syntax.
 **/

function ini_parse_quantity( string $shorthand) {

  /**
   * Returns the interpreted size in bytes on success from an ini
   * shorthand.
   **/
}

/**
 * Restores the value of a configuration option.
 **/

function ini_restore( string $option) {

  /**
   * Restores a given configuration option to its original value.
   **/
}

/**
 * Sets the value of a configuration option.
 **/

function ini_set( string $option, $value) {

  /**
   * Sets the value of the given configuration option. The
   * configuration option will keep this new value during the
   * script's execution, and will be restored at the script's
   * ending.
   **/
}

/**
 * Returns the peak of memory allocated by PHP.
 **/

function memory_get_peak_usage( bool $real_usage = false) {

  /**
   * Returns the peak of memory, in bytes, that's been allocated
   * to your PHP script.
   **/
}

/**
 * Returns the amount of memory allocated to PHP.
 **/

function memory_get_usage( bool $real_usage = false) {

  /**
   * Returns the amount of memory, in bytes, that's currently
   * being allocated to your PHP script.
   **/
}

/**
 * Reset the peak memory usage.
 **/

function memory_reset_peak_usage() {

  /**
   * Resets the peak memory usage returned by the
   * memory_get_peak_usage function.
   **/
}

/**
 * Retrieve a path to the loaded php.ini file.
 **/

function php_ini_loaded_file() {

  /**
   * Check if a &php.ini; file is loaded, and retrieve its path.
   **/
}

/**
 * Return a list of .ini files parsed from the additional ini dir.
 **/

function php_ini_scanned_files() {

  /**
   * php_ini_scanned_files returns a comma-separated list of
   * configuration files parsed after &php.ini;. The directories
   * searched are set by a compile time option and, optionally, by
   * an environment variable at run time: more information can be
   * found in the installation guide.
   *
   * The returned configuration files include the full path.
   **/
}

/**
 * Returns the type of interface between web server and PHP.
 **/

function php_sapi_name() {

  /**
   **/
}

/**
 * Returns information about the operating system PHP is running.
 * on.
 **/

function php_uname( string $mode = "a") {

  /**
   * php_uname returns a description of the operating system PHP
   * is running on. This is the same string you see at the very top
   * of the phpinfo output. For the name of just the operating
   * system, consider using the PHP_OS constant, but keep in mind
   * this constant will contain the operating system PHP was built
   * on.
   *
   * On some older UNIX platforms, it may not be able to determine
   * the current OS information in which case it will revert to
   * displaying the OS PHP was built on. This will only happen if
   * your uname() library call either doesn't exist or doesn't
   * work.
   **/
}

/**
 * Prints out the credits for PHP.
 **/

function phpcredits( int $flags = CREDITS_ALL) {

  /**
   * This function prints out the credits listing the PHP
   * developers, modules, etc. It generates the appropriate HTML
   * codes to insert the information in a page.
   **/
}

/**
 * Outputs information about PHP's configuration.
 **/

function phpinfo( int $flags = INFO_ALL) {

  /**
   * Outputs a large amount of information about the current state
   * of PHP. This includes information about PHP compilation
   * options and extensions, the PHP version, server information
   * and environment (if compiled as a module), the PHP
   * environment, OS version information, paths, master and local
   * values of configuration options, HTTP headers, and the PHP
   * License.
   *
   * Because every system is setup differently, phpinfo is
   * commonly used to check configuration settings and for
   * available predefined variables on a given system.
   *
   * phpinfo is also a valuable debugging tool as it contains all
   * EGPCS (Environment, GET, POST, Cookie, Server) data.
   **/
}

/**
 * Gets the current PHP version.
 **/

function phpversion($extension = null) {

  /**
   * Returns a string containing the version of the currently
   * running PHP parser or extension.
   **/
}

/**
 * Sets the value of an environment variable.
 **/

function putenv( string $assignment) {

  /**
   * Adds assignment to the server environment. The environment
   * variable will only exist for the duration of the current
   * request. At the end of the request the environment is restored
   * to its original state.
   **/
}

/**
 * Restores the value of the include_path configuration option.
 **/

function restore_include_path() {

  /**
   **/
}

/**
 * Sets the include_path configuration option.
 **/

function set_include_path( string $include_path) {

  /**
   * Sets the include_path configuration option for the duration
   * of the script.
   **/
}

/**
 * Limits the maximum execution time.
 **/

function set_time_limit( int $seconds) {

  /**
   * Set the number of seconds a script is allowed to run. If this
   * is reached, the script returns a fatal error. The default
   * limit is 30 seconds or, if it exists, the max_execution_time
   * value defined in the &php.ini;.
   *
   * When called, set_time_limit restarts the timeout counter from
   * zero. In other words, if the timeout is the default 30
   * seconds, and 25 seconds into script execution a call such as
   * set_time_limit(20) is made, the script will run for a total of
   * 45 seconds before timing out.
   **/
}

/**
 * Returns directory path used for temporary files.
 **/

function sys_get_temp_dir() {

  /**
   * Returns the path of the directory PHP stores temporary files
   * in by default.
   **/
}

/**
 * Compares two "PHP-standardized" version number strings.
 **/

function version_compare(
     string $version1
  ,  string $version2
  , $operator = null
  ) {

  /**
   * version_compare compares two "PHP-standardized" version
   * number strings.
   *
   * The function first replaces _, - and + with a dot . in the
   * version strings and also inserts dots . before and after any
   * non number so that for example '4.3.2RC1' becomes
   * '4.3.2.RC.1'. Then it compares the parts starting from left to
   * right. If a part contains special version strings these are
   * handled in the following order: any string not found in this
   * list < dev < alpha = a < beta = b < RC = rc < # < pl = p. This
   * way not only versions with different levels like '4.1' and
   * '4.1.2' can be compared but also any PHP specific version
   * containing development state.
   **/
}

/**
 * Returns a unique identifier for the current thread.
 **/

function zend_thread_id() {

  /**
   * This function returns a unique identifier for the current
   * thread.
   **/
}

/**
 * Gets the version of the current Zend engine.
 **/

function zend_version() {

  /**
   * Returns a string containing the version of the currently
   * running Zend Engine.
   **/
}

/**
 * Add a watch to an initialized inotify instance.
 **/

function inotify_add_watch() {

  /**
   * inotify_add_watch adds a new watch or modify an existing
   * watch for the file or directory specified in pathname.
   *
   * Using inotify_add_watch on a watched object replaces the
   * existing watch. Using the IN_MASK_ADD constant adds (OR)
   * events to the existing watch.
   **/
}

/**
 * Initialize an inotify instance.
 **/

function inotify_init() {

  /**
   * Initialize an inotify instance for use with inotify_add_watch
   **/
}

/**
 * Return a number upper than zero if there are pending events.
 **/

function inotify_queue_len() {

  /**
   * This function allows to know if inotify_read will block or
   * not. If a number upper than zero is returned, there are
   * pending events and inotify_read will not block.
   **/
}

/**
 * Read events from an inotify instance.
 **/

function inotify_read() {

  /**
   * Read inotify events from an inotify instance.
   **/
}

/**
 * Remove an existing watch from an inotify instance.
 **/

function inotify_rm_watch() {

  /**
   * inotify_rm_watch removes the watch watch_descriptor from the
   * inotify instance inotify_instance.
   **/
}

/**
 * Get symbolic name for a given error code.
 **/

function intl_error_name( int $errorCode) {

  /**
   * Return ICU error code name.
   **/
}

/**
 * Get the last error code.
 **/

function intl_get_error_code() {

  /**
   * Useful to handle errors occurred in static methods when
   * there's no object to get error code from.
   **/
}

/**
 * Get description of the last error.
 **/

function intl_get_error_message() {

  /**
   * Get error message from last internationalization function
   * called.
   **/
}

/**
 * Check whether the given error code indicates failure.
 **/

function intl_is_failure( int $errorCode) {

  /**
   **/
}

/**
 * Decodes a JSON string.
 **/

function json_decode(
     string $json
  , $associative = null
  ,  int $depth = 512
  ,  int $flags = 0
  ) {

  /**
   * Takes a JSON encoded string and converts it into a PHP value.
   **/
}

/**
 * Returns the JSON representation of a value.
 **/

function json_encode(
     mixed $value
  ,  int $flags = 0
  ,  int $depth = 512
  ) {

  /**
   * Returns a string containing the JSON representation of the
   * supplied value. If the parameter is an &array; or &object;, it
   * will be serialized recursively.
   *
   * If a value to be serialized is an object, then by default
   * only publicly visible properties will be included.
   * Alternatively, a class may implement JsonSerializable to
   * control how its values are serialized to JSON.
   *
   * The encoding is affected by the supplied flags and
   * additionally the encoding of float values depends on the value
   * of serialize_precision.
   **/
}

/**
 * Returns the error string of the last json_encode() or.
 * json_decode() call.
 **/

function json_last_error_msg() {

  /**
   * Returns the error string of the last json_encode or
   * json_decode call, which did not specify JSON_THROW_ON_ERROR.
   **/
}

/**
 * Returns the last error occurred.
 **/

function json_last_error() {

  /**
   * Returns the last error (if any) occurred during the last JSON
   * encoding/decoding, which did not specify JSON_THROW_ON_ERROR.
   **/
}

/**
 * Checks if a string contains valid JSON.
 **/

function json_validate(
     string $json
  ,  int $depth = 512
  ,  int $flags = 0
  ) {

  /**
   * Returns whether the given &string; is syntactically valid
   * JSON. If json_validate returns &true;, json_decode will
   * successfully decode the given string when using the same depth
   * and flags.
   *
   * If json_validate returns &false;, the cause can be retrieved
   * using json_last_error and json_last_error_msg.
   *
   * json_validate uses less memory than json_decode if the
   * decoded JSON payload is not used, because it does not need to
   * build the array or object structure containing the payload.
   *
   * Calling json_validate immediately before json_decode will
   * unnecessarily parse the string twice, as json_decode
   * implicitly performs validation during decoding.
   *
   * json_validate should therefore only be used if the decode
   * JSON payload is not immediately used and knowing whether the
   * string contains valid JSON is needed.
   **/
}

/**
 * Translate 8859 characters to t61 characters.
 **/

function ldap_8859_to_t61( string $value) {

  /**
   * Translate ISO-8859 characters to t61 characters.
   *
   * This function is useful if you have to talk to a legacy
   * LDAPv2 server.
   **/
}

/**
 * Add entries to LDAP directory.
 **/

function ldap_add_ext(
     LDAP\Connection $ldap
  ,  string $dn
  ,  array $entry
  , $controls = null
  ) {

  /**
   * Does the same thing as ldap_add but returns an LDAP\Result
   * instance to be parsed with ldap_parse_result.
   **/
}

/**
 * Add entries to LDAP directory.
 **/

function ldap_add(
     LDAP\Connection $ldap
  ,  string $dn
  ,  array $entry
  , $controls = null
  ) {

  /**
   * Add entries in the LDAP directory.
   **/
}

/**
 * Bind to LDAP directory.
 **/

function ldap_bind_ext(
     LDAP\Connection $ldap
  , $dn = null
  , $password = null
  , $controls = null
  ) {

  /**
   * Does the same thing as ldap_bind but returns an LDAP\Result
   * instance to be parsed with ldap_parse_result.
   **/
}

/**
 * Bind to LDAP directory.
 **/

function ldap_bind(
     LDAP\Connection $ldap
  , $dn = null
  , $password = null
  ) {

  /**
   * Binds to the LDAP directory with specified RDN and password.
   **/
}

/**
 * &Alias; ldap_unbind.
 **/

function () {

  /**
   **/
}

/**
 * Compare value of attribute found in entry specified with DN.
 **/

function ldap_compare(
     LDAP\Connection $ldap
  ,  string $dn
  ,  string $attribute
  ,  string $value
  , $controls = null
  ) {

  /**
   * Compare value of attribute with value of same attribute in an
   * LDAP directory entry.
   **/
}

/**
 * Connect to an LDAP server.
 **/

function ldap_connect_wallet(
    $uri = null
  ,  string $wallet
  ,  string $password
  ,  int $auth_mode = GSLC_SSL_NO_AUTH
  ) {

  /**
   **/
}

/**
 * Connect to an LDAP server.
 **/

function ldap_connect($uri = null) {

  /**
   * Creates an LDAP\Connection connection and checks whether the
   * given uri is plausible.
   **/
}

/**
 * Retrieve the LDAP pagination cookie.
 **/

function ldap_control_paged_result_response(
     resource $link
  ,  resource $result
  ,  string &$cookie
  ,  int &$estimated
  ) {

  /**
   * Retrieve the pagination information send by the server.
   **/
}

/**
 * Send LDAP pagination control.
 **/

function ldap_control_paged_result(
     resource $link
  ,  int $pagesize
  ,  bool $iscritical = false
  ,  string $cookie = ""
  ) {

  /**
   * Enable LDAP pagination by sending the pagination control
   * (page size, cookie...).
   **/
}

/**
 * Count the number of entries in a search.
 **/

function ldap_count_entries(
     LDAP\Connection $ldap
  ,  LDAP\Result $result
  ) {

  /**
   * Returns the number of entries stored in the result of
   * previous search operations.
   **/
}

/**
 * Counts the number of references in a search result.
 **/

function ldap_count_references(
     LDAP\Connection $ldap
  ,  LDAP\Result $result
  ) {

  /**
   * Counts the number of references in a search result.
   **/
}

/**
 * Delete an entry from a directory.
 **/

function ldap_delete_ext(
     LDAP\Connection $ldap
  ,  string $dn
  , $controls = null
  ) {

  /**
   * Does the same thing as ldap_delete but returns an LDAP\Result
   * instance to be parsed with ldap_parse_result.
   **/
}

/**
 * Delete an entry from a directory.
 **/

function ldap_delete(
     LDAP\Connection $ldap
  ,  string $dn
  , $controls = null
  ) {

  /**
   * Deletes a particular entry in LDAP directory.
   **/
}

/**
 * Convert DN to User Friendly Naming format.
 **/

function ldap_dn2ufn( string $dn) {

  /**
   * Turns the specified dn, into a more user-friendly form,
   * stripping off type names.
   **/
}

/**
 * Convert LDAP error number into string error message.
 **/

function ldap_err2str( int $errno) {

  /**
   * Returns the string error message explaining the error number
   * errno. While LDAP errno numbers are standardized, different
   * libraries return different or even localized textual error
   * messages. Never check for a specific error message text, but
   * always use an error number to check.
   **/
}

/**
 * Return the LDAP error number of the last LDAP command.
 **/

function ldap_errno( LDAP\Connection $ldap) {

  /**
   * Returns the standardized error number returned by the last
   * LDAP command. This number can be converted into a textual
   * error message using ldap_err2str.
   **/
}

/**
 * Return the LDAP error message of the last LDAP command.
 **/

function ldap_error( LDAP\Connection $ldap) {

  /**
   * Returns the string error message explaining the error
   * generated by the last LDAP command for the given ldap. While
   * LDAP errno numbers are standardized, different libraries
   * return different or even localized textual error messages.
   * Never check for a specific error message text, but always use
   * an error number to check.
   *
   * Unless you lower your warning level in your &php.ini;
   * sufficiently or prefix your LDAP commands with @ (at)
   * characters to suppress warning output, the errors generated
   * will also show up in your HTML output.
   **/
}

/**
 * Escape a string for use in an LDAP filter or DN.
 **/

function ldap_escape(
     string $value
  ,  string $ignore = ""
  ,  int $flags = 0
  ) {

  /**
   * Escapes value for use in the context implied by flags.
   **/
}

/**
 * PASSWD extended operation helper.
 **/

function ldap_exop_passwd(
     LDAP\Connection $ldap
  ,  string $user = ""
  ,  string $old_password = ""
  ,  string $new_password = ""
  ,  array &$controls = null
  ) {

  /**
   * Performs a PASSWD extended operation.
   **/
}

/**
 * Refresh extended operation helper.
 **/

function ldap_exop_refresh(
     LDAP\Connection $ldap
  ,  string $dn
  ,  int $ttl
  ) {

  /**
   * Performs a Refresh extended operation and returns the data.
   **/
}

/**
 * Performs an extended operation.
 **/

function ldap_exop_sync(
     LDAP\Connection $ldap
  ,  string $request_oid
  , $request_data = null
  , $controls = null
  ,  string &$response_data = null
  ,  string &$response_oid = null
  ) {

  /**
   **/
}

/**
 * WHOAMI extended operation helper.
 **/

function ldap_exop_whoami( LDAP\Connection $ldap) {

  /**
   * Performs a WHOAMI extended operation and returns the data.
   **/
}

/**
 * Performs an extended operation.
 **/

function ldap_exop(
     LDAP\Connection $ldap
  ,  string $request_oid
  ,  string $request_data = null
  ,  array $controls = null
  ,  string &$response_data
  ,  string &$response_oid
  ) {

  /**
   * Performs an extended operation on the specified ldap with
   * request_oid the OID of the operation and request_data the
   * data.
   **/
}

/**
 * Splits DN into its component parts.
 **/

function ldap_explode_dn( string $dn,  int $with_attrib) {

  /**
   * Splits the DN returned by ldap_get_dn and breaks it up into
   * its component parts. Each part is known as Relative
   * Distinguished Name, or RDN.
   **/
}

/**
 * Return first attribute.
 **/

function ldap_first_attribute(
     LDAP\Connection $ldap
  ,  LDAP\ResultEntry $entry
  ) {

  /**
   * Gets the first attribute in the given entry. Remaining
   * attributes are retrieved by calling ldap_next_attribute
   * successively.
   *
   * Similar to reading entries, attributes are also read one by
   * one from a particular entry.
   **/
}

/**
 * Return first result id.
 **/

function ldap_first_entry(
     LDAP\Connection $ldap
  ,  LDAP\Result $result
  ) {

  /**
   * Returns the entry identifier for first entry in the result.
   * This entry identifier is then supplied to ldap_next_entry
   * routine to get successive entries from the result.
   *
   * Entries in the LDAP result are read sequentially using the
   * ldap_first_entry and ldap_next_entry functions.
   **/
}

/**
 * Return first reference.
 **/

function ldap_first_reference(
     LDAP\Connection $ldap
  ,  LDAP\Result $result
  ) {

  /**
   **/
}

/**
 * Free result memory.
 **/

function ldap_free_result( LDAP\Result $result) {

  /**
   * Frees up the memory allocated internally to store the result.
   * All result memory will be automatically freed when the script
   * terminates.
   *
   * Typically all the memory allocated for the LDAP result gets
   * freed at the end of the script. In case the script is making
   * successive searches which return large result sets,
   * ldap_free_result could be called to keep the runtime memory
   * usage by the script low.
   **/
}

/**
 * Get attributes from a search result entry.
 **/

function ldap_get_attributes(
     LDAP\Connection $ldap
  ,  LDAP\ResultEntry $entry
  ) {

  /**
   * Reads attributes and values from an entry in the search
   * result.
   *
   * Having located a specific entry in the directory, you can
   * find out what information is held for that entry by using this
   * call. You would use this call for an application which
   * "browses" directory entries and/or where you do not know the
   * structure of the directory entries. In many applications you
   * will be searching for a specific attribute such as an email
   * address or a surname, and won't care what other data is held.
   **/
}

/**
 * Get the DN of a result entry.
 **/

function ldap_get_dn(
     LDAP\Connection $ldap
  ,  LDAP\ResultEntry $entry
  ) {

  /**
   * Finds out the DN of an entry in the result.
   **/
}

/**
 * Get all result entries.
 **/

function ldap_get_entries(
     LDAP\Connection $ldap
  ,  LDAP\Result $result
  ) {

  /**
   * Reads multiple entries from the given result, and then
   * reading the attributes and multiple values.
   **/
}

/**
 * Get the current value for given option.
 **/

function ldap_get_option(
     LDAP\Connection $ldap
  ,  int $option
  , &$value = null
  ) {

  /**
   * Sets value to the value of the specified option.
   **/
}

/**
 * Get all binary values from a result entry.
 **/

function ldap_get_values_len(
     LDAP\Connection $ldap
  ,  LDAP\ResultEntry $entry
  ,  string $attribute
  ) {

  /**
   * Reads all the values of the attribute in the entry in the
   * result.
   *
   * This function is used exactly like ldap_get_values except
   * that it handles binary data and not string data.
   **/
}

/**
 * Get all values from a result entry.
 **/

function ldap_get_values(
     LDAP\Connection $ldap
  ,  LDAP\ResultEntry $entry
  ,  string $attribute
  ) {

  /**
   * Reads all the values of the attribute in the entry in the
   * result.
   *
   * This call needs a entry, so needs to be preceded by one of
   * the ldap search calls and one of the calls to get an
   * individual entry.
   *
   * You application will either be hard coded to look for certain
   * attributes (such as "surname" or "mail") or you will have to
   * use the ldap_get_attributes call to work out what attributes
   * exist for a given entry.
   **/
}

/**
 * Single-level search.
 **/

function ldap_list(
    $ldap
  , $base
  , $filter
  ,  array $attributes = []
  ,  int $attributes_only = 0
  ,  int $sizelimit = -1
  ,  int $timelimit = -1
  ,  int $deref = LDAP_DEREF_NEVER
  , $controls = null
  ) {

  /**
   * Performs the search for a specified filter on the directory
   * with the scope LDAP_SCOPE_ONELEVEL.
   *
   * LDAP_SCOPE_ONELEVEL means that the search should only return
   * information that is at the level immediately below the base
   * given in the call. (Equivalent to typing "ls" and getting a
   * list of files and folders in the current working directory.)
   **/
}

/**
 * Add attribute values to current attributes.
 **/

function ldap_mod_add_ext(
     LDAP\Connection $ldap
  ,  string $dn
  ,  array $entry
  , $controls = null
  ) {

  /**
   * Does the same thing as ldap_mod_add but returns an
   * LDAP\Result instance to be parsed with ldap_parse_result.
   **/
}

/**
 * Add attribute values to current attributes.
 **/

function ldap_mod_add(
     LDAP\Connection $ldap
  ,  string $dn
  ,  array $entry
  , $controls = null
  ) {

  /**
   * Adds one or more attribute values to the specified dn. To add
   * a whole new object see ldap_add function.
   **/
}

/**
 * Delete attribute values from current attributes.
 **/

function ldap_mod_del_ext(
     LDAP\Connection $ldap
  ,  string $dn
  ,  array $entry
  , $controls = null
  ) {

  /**
   * Does the same thing as ldap_mod_del but returns an
   * LDAP\Result instance to be parsed with ldap_parse_result.
   **/
}

/**
 * Delete attribute values from current attributes.
 **/

function ldap_mod_del(
     LDAP\Connection $ldap
  ,  string $dn
  ,  array $entry
  , $controls = null
  ) {

  /**
   * Removes one or more attribute values from the specified dn.
   * Object deletions are done by the ldap_delete function.
   **/
}

/**
 * Replace attribute values with new ones.
 **/

function ldap_mod_replace_ext(
     LDAP\Connection $ldap
  ,  string $dn
  ,  array $entry
  , $controls = null
  ) {

  /**
   * Does the same thing as ldap_mod_replace but returns an
   * LDAP\Result instance to be parsed with ldap_parse_result.
   **/
}

/**
 * Replace attribute values with new ones.
 **/

function ldap_mod_replace(
     LDAP\Connection $ldap
  ,  string $dn
  ,  array $entry
  , $controls = null
  ) {

  /**
   * Replaces one or more attributes from the specified dn. It may
   * also add or remove attributes.
   **/
}

/**
 * Batch and execute modifications on an LDAP entry.
 **/

function ldap_modify_batch(
     LDAP\Connection $ldap
  ,  string $dn
  ,  array $modifications_info
  , $controls = null
  ) {

  /**
   * Modifies an existing entry in the LDAP directory. Allows
   * detailed specification of the modifications to perform.
   **/
}

/**
 * &Alias; ldap_mod_replace.
 **/

function () {

  /**
   **/
}

/**
 * Get the next attribute in result.
 **/

function ldap_next_attribute(
     LDAP\Connection $ldap
  ,  LDAP\ResultEntry $entry
  ) {

  /**
   * Retrieves the attributes in an entry. The first call to
   * ldap_next_attribute is made with the entry returned from
   * ldap_first_attribute.
   **/
}

/**
 * Get next result entry.
 **/

function ldap_next_entry(
     LDAP\Connection $ldap
  ,  LDAP\ResultEntry $entry
  ) {

  /**
   * Retrieve the entries stored in the result. Successive calls
   * to the ldap_next_entry return entries one by one till there
   * are no more entries. The first call to ldap_next_entry is made
   * after the call to ldap_first_entry with the entry as returned
   * from the ldap_first_entry.
   **/
}

/**
 * Get next reference.
 **/

function ldap_next_reference(
     LDAP\Connection $ldap
  ,  LDAP\ResultEntry $entry
  ) {

  /**
   **/
}

/**
 * Parse result object from an LDAP extended operation.
 **/

function ldap_parse_exop(
     LDAP\Connection $ldap
  ,  LDAP\Result $result
  ,  string &$response_data = null
  ,  string &$response_oid = null
  ) {

  /**
   * Parse LDAP extended operation data from result object result
   **/
}

/**
 * Extract information from reference entry.
 **/

function ldap_parse_reference(
     LDAP\Connection $ldap
  ,  LDAP\ResultEntry $entry
  ,  array &$referrals
  ) {

  /**
   **/
}

/**
 * Extract information from result.
 **/

function ldap_parse_result(
     LDAP\Connection $ldap
  ,  LDAP\Result $result
  ,  int &$error_code
  ,  string &$matched_dn = null
  ,  string &$error_message = null
  ,  array &$referrals = null
  ,  array &$controls = null
  ) {

  /**
   * Parses an LDAP search result.
   **/
}

/**
 * Read an entry.
 **/

function ldap_read(
    $ldap
  , $base
  , $filter
  ,  array $attributes = []
  ,  int $attributes_only = 0
  ,  int $sizelimit = -1
  ,  int $timelimit = -1
  ,  int $deref = LDAP_DEREF_NEVER
  , $controls = null
  ) {

  /**
   * Performs the search for a specified filter on the directory
   * with the scope LDAP_SCOPE_BASE. So it is equivalent to reading
   * an entry from the directory.
   **/
}

/**
 * Modify the name of an entry.
 **/

function ldap_rename_ext(
     LDAP\Connection $ldap
  ,  string $dn
  ,  string $new_rdn
  ,  string $new_parent
  ,  bool $delete_old_rdn
  , $controls = null
  ) {

  /**
   * Does the same thing as ldap_rename but returns an LDAP\Result
   * instance to be parsed with ldap_parse_result.
   **/
}

/**
 * Modify the name of an entry.
 **/

function ldap_rename(
     LDAP\Connection $ldap
  ,  string $dn
  ,  string $new_rdn
  ,  string $new_parent
  ,  bool $delete_old_rdn
  , $controls = null
  ) {

  /**
   * The entry specified by dn is renamed/moved.
   **/
}

/**
 * Bind to LDAP directory using SASL.
 **/

function ldap_sasl_bind(
     LDAP\Connection $ldap
  , $dn = null
  , $password = null
  , $mech = null
  , $realm = null
  , $authc_id = null
  , $authz_id = null
  , $props = null
  ) {

  /**
   **/
}

/**
 * Search LDAP tree.
 **/

function ldap_search(
    $ldap
  , $base
  , $filter
  ,  array $attributes = []
  ,  int $attributes_only = 0
  ,  int $sizelimit = -1
  ,  int $timelimit = -1
  ,  int $deref = LDAP_DEREF_NEVER
  , $controls = null
  ) {

  /**
   * Performs the search for a specified filter on the directory
   * with the scope of LDAP_SCOPE_SUBTREE. This is equivalent to
   * searching the entire directory.
   **/
}

/**
 * Set the value of the given option.
 **/

function ldap_set_option($ldap,  int $option, $value) {

  /**
   * Sets the value of the specified option to be value.
   **/
}

/**
 * Set a callback function to do re-binds on referral chasing.
 **/

function ldap_set_rebind_proc( LDAP\Connection $ldap, $callback) {

  /**
   **/
}

/**
 * Sort LDAP result entries on the client side.
 **/

function ldap_sort(
     resource $link
  ,  resource $result
  ,  string $sortfilter
  ) {

  /**
   * Sort the result of a LDAP search, returned by ldap_search.
   *
   * As this function sorts the returned values on the client side
   * it is possible that you might not get the expected results in
   * case you reach the sizelimit either of the server or defined
   * within ldap_search.
   **/
}

/**
 * Start TLS.
 **/

function ldap_start_tls( LDAP\Connection $ldap) {

  /**
   **/
}

/**
 * Translate t61 characters to 8859 characters.
 **/

function ldap_t61_to_8859( string $value) {

  /**
   **/
}

/**
 * Unbind from LDAP directory.
 **/

function ldap_unbind( LDAP\Connection $ldap) {

  /**
   * Unbinds from the LDAP directory.
   **/
}

/**
 * Clear libxml error buffer.
 **/

function libxml_clear_errors() {

  /**
   * libxml_clear_errors clears the libxml error buffer.
   **/
}

/**
 * Disable the ability to load external entities.
 **/

function libxml_disable_entity_loader( bool $disable = true) {

  /**
   * Disable/enable the ability to load external entities. Note
   * that disabling the loading of external entities may cause
   * general issues with loading XML documents. However, as of
   * libxml 2.9.0 entity substitution is disabled by default, so
   * there is no need to disable the loading of external entities,
   * unless there is the need to resolve internal entity references
   * with LIBXML_NOENT. Generally, it is preferable to use
   * libxml_set_external_entity_loader to suppress loading of
   * external entities.
   **/
}

/**
 * Retrieve array of errors.
 **/

function libxml_get_errors() {

  /**
   * Retrieve array of errors.
   **/
}

/**
 * Get the current external entity loader.
 **/

function libxml_get_external_entity_loader() {

  /**
   * Get external entity loader previously installed by
   * libxml_set_external_entity_loader.
   **/
}

/**
 * Retrieve last error from libxml.
 **/

function libxml_get_last_error() {

  /**
   * Retrieve last error from libxml.
   **/
}

/**
 * Changes the default external entity loader.
 **/

function libxml_set_external_entity_loader($resolver_function) {

  /**
   * Changes the default external entity loader. This can be used
   * to suppress the expansion of arbitrary external entities to
   * avoid XXE attacks, even when LIBXML_NOENT has been set for the
   * respective operation, and is usually preferable over calling
   * libxml_disable_entity_loader.
   **/
}

/**
 * Set the streams context for the next libxml document load or.
 * write.
 **/

function libxml_set_streams_context( resource $context) {

  /**
   * Sets the streams context for the next libxml document load or
   * write.
   **/
}

/**
 * Disable libxml errors and allow user to fetch error.
 * information as needed.
 **/

function libxml_use_internal_errors($use_errors = null) {

  /**
   * libxml_use_internal_errors allows you to disable standard
   * libxml errors and enable user error handling.
   **/
}

/**
 * LZF compression.
 **/

function lzf_compress( string $data) {

  /**
   * lzf_compress compresses the given data string using LZF
   * encoding.
   **/
}

/**
 * LZF decompression.
 **/

function lzf_decompress( string $data) {

  /**
   * lzf_compress decompresses the given data string containing
   * lzf encoded data.
   **/
}

/**
 * Determines what LZF extension was optimized for.
 **/

function lzf_optimized_for() {

  /**
   * Determines what was LZF extension optimized for during
   * compilation.
   **/
}

/**
 * Calculate the hash value needed by EZMLM.
 **/

function ezmlm_hash( string $addr) {

  /**
   **/
}

/**
 * Send mail.
 **/

function mail(
     string $to
  ,  string $subject
  ,  string $message
  , $additional_headers = []
  ,  string $additional_params = ""
  ) {

  /**
   * Sends an email.
   **/
}

/**
 * Gets the best way of encoding.
 **/

function mailparse_determine_best_xfer_encoding( resource $fp) {

  /**
   * Figures out the best way of encoding the content read from
   * the given file pointer.
   **/
}

/**
 * Create a mime mail resource.
 **/

function mailparse_msg_create() {

  /**
   * Create a MIME mail resource.
   **/
}

/**
 * Extracts/decodes a message section.
 **/

function mailparse_msg_extract_part_file(
     resource $mimemail
  ,  mixed $filename
  ,  callable $callbackfunc
  ) {

  /**
   * Extracts/decodes a message section from the supplied
   * filename.
   *
   * The contents of the section will be decoded according to
   * their transfer encoding - base64, quoted-printable and
   * uuencoded text are supported.
   **/
}

/**
 * Extracts/decodes a message section.
 **/

function mailparse_msg_extract_part(
     resource $mimemail
  ,  string $msgbody
  ,  callable $callbackfunc
  ) {

  /**
   **/
}

/**
 * Extracts a message section including headers without decoding.
 * the transfer encoding.
 **/

function mailparse_msg_extract_whole_part_file(
     resource $mimemail
  ,  string $filename
  ,  callable $callbackfunc
  ) {

  /**
   **/
}

/**
 * Frees a MIME resource.
 **/

function mailparse_msg_free( resource $mimemail) {

  /**
   * Frees a MIME resource.
   **/
}

/**
 * Returns an associative array of info about the message.
 **/

function mailparse_msg_get_part_data( resource $mimemail) {

  /**
   **/
}

/**
 * Returns a handle on a given section in a mimemessage.
 **/

function mailparse_msg_get_part(
     resource $mimemail
  ,  string $mimesection
  ) {

  /**
   **/
}

/**
 * Returns an array of mime section names in the supplied message.
 **/

function mailparse_msg_get_structure( resource $mimemail) {

  /**
   **/
}

/**
 * Parses a file.
 **/

function mailparse_msg_parse_file( string $filename) {

  /**
   * Parses a file. This is the optimal way of parsing a mail file
   * that you have on disk.
   **/
}

/**
 * Incrementally parse data into buffer.
 **/

function mailparse_msg_parse( resource $mimemail,  string $data) {

  /**
   * Incrementally parse data into the supplied mime mail
   * resource.
   *
   * This function allow you to stream portions of a file at a
   * time, rather than read and parse the whole thing.
   **/
}

/**
 * Parse RFC 822 compliant addresses.
 **/

function mailparse_rfc822_parse_addresses( string $addresses) {

  /**
   * Parses a RFC 822 compliant recipient list, such as that found
   * in the To: header.
   **/
}

/**
 * Streams data from source file pointer, apply encoding and.
 * write to destfp.
 **/

function mailparse_stream_encode(
     resource $sourcefp
  ,  resource $destfp
  ,  string $encoding
  ) {

  /**
   * Streams data from the source file pointer, apply encoding and
   * write to the destination file pointer.
   **/
}

/**
 * Scans the data from fp and extract each embedded uuencoded.
 * file.
 **/

function mailparse_uudecode_all( resource $fp) {

  /**
   * Scans the data from the given file pointer and extract each
   * embedded uuencoded file into a temporary file.
   **/
}

/**
 * Absolute value.
 **/

function abs($num) {

  /**
   * Returns the absolute value of num.
   **/
}

/**
 * Arc cosine.
 **/

function acos( float $num) {

  /**
   * Returns the arc cosine of num in radians. acos is the inverse
   * function of cos, which means that $num == cos(acos($num)) for
   * every value of num that is in the domain of acos.
   **/
}

/**
 * Inverse hyperbolic cosine.
 **/

function acosh( float $num) {

  /**
   * Returns the inverse hyperbolic cosine of num, i.e. the value
   * whose hyperbolic cosine is num.
   **/
}

/**
 * Arc sine.
 **/

function asin( float $num) {

  /**
   * Returns the arc sine of num in radians. asin is the inverse
   * function of sin, which means that $num == sin(asin($num)) for
   * every value of num that is in the domain of asin.
   **/
}

/**
 * Inverse hyperbolic sine.
 **/

function asinh( float $num) {

  /**
   * Returns the inverse hyperbolic sine of num, i.e. the value
   * whose hyperbolic sine is num.
   **/
}

/**
 * Arc tangent.
 **/

function atan( float $num) {

  /**
   * Returns the arc tangent of num in radians. atan is the
   * inverse function of tan, which means that $num ==
   * tan(atan($num)) for every value of num that is in the domain
   * of atan.
   **/
}

/**
 * Arc tangent of two variables.
 **/

function atan2( float $y,  float $x) {

  /**
   **/
}

/**
 * Inverse hyperbolic tangent.
 **/

function atanh( float $num) {

  /**
   * Returns the inverse hyperbolic tangent of num, i.e. the value
   * whose hyperbolic tangent is num.
   **/
}

/**
 * Convert a number between arbitrary bases.
 **/

function base_convert( string $num,  int $from_base,  int $to_base) {

  /**
   * Returns a string containing num represented in base to_base.
   * The base in which num is given is specified in from_base. Both
   * from_base and to_base have to be between 2 and 36, inclusive.
   * Digits in numbers with a base higher than 10 will be
   * represented with the letters a-z, with a meaning 10, b meaning
   * 11 and z meaning 35. The case of the letters doesn't matter,
   * i.e. num is interpreted case-insensitively.
   **/
}

/**
 * Binary to decimal.
 **/

function bindec( string $binary_string) {

  /**
   * Returns the decimal equivalent of the binary number
   * represented by the binary_string argument.
   *
   * bindec converts a binary number to an int or, if needed for
   * size reasons, float.
   *
   * bindec interprets all binary_string values as unsigned
   * integers. This is because bindec sees the most significant bit
   * as another order of magnitude rather than as the sign bit.
   **/
}

/**
 * Round fractions up.
 **/

function ceil($num) {

  /**
   **/
}

/**
 * Cosine.
 **/

function cos( float $num) {

  /**
   * cos returns the cosine of the num parameter. The num
   * parameter is in radians.
   **/
}

/**
 * Hyperbolic cosine.
 **/

function cosh( float $num) {

  /**
   * Returns the hyperbolic cosine of num, defined as (exp($num) +
   * exp(-$num))/2.
   **/
}

/**
 * Decimal to binary.
 **/

function decbin( int $num) {

  /**
   * Returns a string containing a binary representation of the
   * given num argument.
   **/
}

/**
 * Decimal to hexadecimal.
 **/

function dechex( int $num) {

  /**
   * Returns a string containing a hexadecimal representation of
   * the given unsigned num argument.
   *
   * The largest number that can be converted is PHP_INT_MAX * 2 +
   * 1 (or -1): on 32-bit platforms, this will be 4294967295 in
   * decimal, which results in dechex returning ffffffff.
   **/
}

/**
 * Decimal to octal.
 **/

function decoct( int $num) {

  /**
   * Returns a string containing an octal representation of the
   * given num argument. The largest number that can be converted
   * depends on the platform in use. For 32-bit platforms this is
   * usually 4294967295 in decimal resulting in 37777777777. For
   * 64-bit platforms this is usually 9223372036854775807 in
   * decimal resulting in 777777777777777777777.
   **/
}

/**
 * Converts the number in degrees to the radian equivalent.
 **/

function deg2rad( float $num) {

  /**
   * This function converts num from degrees to the radian
   * equivalent.
   **/
}

/**
 * Calculates the exponent of e.
 **/

function exp( float $num) {

  /**
   * Returns e raised to the power of num.
   *
   * 'e' is the base of the natural system of logarithms, or
   * approximately 2.718282.
   **/
}

/**
 * Returns exp($num) - 1, computed in a way that is accurate.
 * even when the value of number is close to zero.
 **/

function expm1( float $num) {

  /**
   * expm1 returns the equivalent to exp($num) - 1 computed in a
   * way that is accurate even if the value of num is near zero, a
   * case where exp($num) - 1 would be inaccurate due to
   * subtraction of two numbers that are nearly equal.
   **/
}

/**
 * Divides two numbers, according to IEEE 754.
 **/

function fdiv( float $num1,  float $num2) {

  /**
   * Returns the floating point result of dividing the num1 by the
   * num2. If the num2 is zero, then one of INF, -INF, or NAN will
   * be returned.
   *
   * Note that in comparisons, NAN will never be equal (==) or
   * identical (===) to any value, including itself.
   **/
}

/**
 * Round fractions down.
 **/

function floor($num) {

  /**
   **/
}

/**
 * Returns the floating point remainder (modulo) of the division.
 * of the arguments.
 **/

function fmod( float $num1,  float $num2) {

  /**
   * Returns the floating point remainder of dividing the dividend
   * (num1) by the divisor (num2). The remainder (r) is defined as:
   * num1 = i * num2 + r, for some integer i. If num2 is non-zero,
   * r has the same sign as num1 and a magnitude less than the
   * magnitude of num2.
   **/
}

/**
 * Hexadecimal to decimal.
 **/

function hexdec( string $hex_string) {

  /**
   * Returns the decimal equivalent of the hexadecimal number
   * represented by the hex_string argument. hexdec converts a
   * hexadecimal string to a decimal number.
   *
   * hexdec will ignore any non-hexadecimal characters it
   * encounters. As of PHP 7.4.0 supplying any invalid characters
   * is deprecated.
   **/
}

/**
 * Calculate the length of the hypotenuse of a right-angle.
 * triangle.
 **/

function hypot( float $x,  float $y) {

  /**
   * hypot returns the length of the hypotenuse of a right-angle
   * triangle with sides of length x and y, or the distance of the
   * point (x, y) from the origin. This is equivalent to sqrt($x*$x
   * + $y*$y).
   **/
}

/**
 * Integer division.
 **/

function intdiv( int $num1,  int $num2) {

  /**
   * Returns the integer quotient of the division of num1 by num2.
   **/
}

/**
 * Checks whether a float is finite.
 **/

function is_finite( float $num) {

  /**
   * Returns whether the given num is a finite float.
   *
   * A finite float is neither NAN (is_nan), nor infinite
   * (is_infinite).
   **/
}

/**
 * Checks whether a float is infinite.
 **/

function is_infinite( float $num) {

  /**
   * Returns whether the given num is either INF or -INF.
   **/
}

/**
 * Checks whether a float is NAN.
 **/

function is_nan( float $num) {

  /**
   * Returns whether the given num is NAN (Not A Number).
   *
   * NAN is returned from mathematical operations that are
   * undefined, for example when passing parameters outside of
   * function’s input domain. The square root (sqrt) is only
   * defined for positive numbers, passing a negative number will
   * result in NAN. Other examples of operations returning NAN are
   * dividing INF by INF and any operation involving an existing
   * NAN value.
   *
   * Despite its name of Not A Number, NAN is a valid value of
   * type &float;.
   *
   * NAN does not compare equal to NAN. To check whether a float
   * is NAN, is_nan must be used. Checking $float === NAN will not
   * work.
   **/
}

/**
 * Natural logarithm.
 **/

function log( float $num,  float $base = M_E) {

  /**
   * If the optional base parameter is specified, log returns
   * logbase num, otherwise log returns the natural logarithm of
   * num.
   **/
}

/**
 * Base-10 logarithm.
 **/

function log10( float $num) {

  /**
   * Returns the base-10 logarithm of num.
   **/
}

/**
 * Returns log(1 + number), computed in a way that is accurate.
 * even when the value of number is close to zero.
 **/

function log1p( float $num) {

  /**
   * log1p returns log(1 + num) computed in a way that is accurate
   * even when the value of num is close to zero. log might only
   * return log(1) in this case due to lack of precision.
   **/
}

/**
 * Find highest value.
 **/

function max( mixed $value,  mixed $values) {

  /**
   * If the first and only parameter is an array, max returns the
   * highest value in that array. If at least two parameters are
   * provided, max returns the biggest of these values.
   *
   * Values of different types will be compared using the standard
   * comparison rules. For instance, a non-numeric string will be
   * compared to an int as though it were 0, but multiple
   * non-numeric string values will be compared alphanumerically.
   * The actual value returned will be of the original type with no
   * conversion applied.
   **/
}

/**
 * Find lowest value.
 **/

function min( mixed $value,  mixed $values) {

  /**
   * If the first and only parameter is an array, min returns the
   * lowest value in that array. If at least two parameters are
   * provided, min returns the smallest of these values.
   *
   * Values of different types will be compared using the standard
   * comparison rules. For instance, a non-numeric string will be
   * compared to an int as though it were 0, but multiple
   * non-numeric string values will be compared alphanumerically.
   * The actual value returned will be of the original type with no
   * conversion applied.
   **/
}

/**
 * Octal to decimal.
 **/

function octdec( string $octal_string) {

  /**
   * Returns the decimal equivalent of the octal number
   * represented by the octal_string argument.
   **/
}

/**
 * Get value of pi.
 **/

function pi() {

  /**
   **/
}

/**
 * Exponential expression.
 **/

function pow( mixed $num,  mixed $exponent) {

  /**
   * Returns num raised to the power of exponent.
   *
   * It is possible to use the ** operator instead.
   **/
}

/**
 * Converts the radian number to the equivalent number in.
 * degrees.
 **/

function rad2deg( float $num) {

  /**
   * This function converts num from radian to degrees.
   **/
}

/**
 * Rounds a float.
 **/

function round(
    $num
  ,  int $precision = 0
  ,  int $mode = PHP_ROUND_HALF_UP
  ) {

  /**
   * Returns the rounded value of num to specified precision
   * (number of digits after the decimal point). precision can also
   * be negative or zero (default).
   **/
}

/**
 * Sine.
 **/

function sin( float $num) {

  /**
   * sin returns the sine of the num parameter. The num parameter
   * is in radians.
   **/
}

/**
 * Hyperbolic sine.
 **/

function sinh( float $num) {

  /**
   * Returns the hyperbolic sine of num, defined as (exp($num) -
   * exp(-$num))/2.
   **/
}

/**
 * Square root.
 **/

function sqrt( float $num) {

  /**
   * Returns the square root of num.
   **/
}

/**
 * Tangent.
 **/

function tan( float $num) {

  /**
   * tan returns the tangent of the num parameter. The num
   * parameter is in radians.
   **/
}

/**
 * Hyperbolic tangent.
 **/

function tanh( float $num) {

  /**
   * Returns the hyperbolic tangent of num, defined as
   * sinh($num)/cosh($num).
   **/
}

/**
 * Check if strings are valid for the specified encoding.
 **/

function mb_check_encoding($value = null, $encoding = null) {

  /**
   * Checks if the specified byte stream is valid for the
   * specified encoding. If value is of type &array;, all keys and
   * values are validated recursively. It is useful to prevent
   * so-called "Invalid Encoding Attack".
   *
   **/
}

/**
 * Return character by Unicode code point value.
 **/

function mb_chr( int $codepoint, $encoding = null) {

  /**
   * Returns a string containing the character specified by the
   * Unicode code point value, encoded in the specified encoding.
   *
   * This function complements mb_ord.
   **/
}

/**
 * Perform case folding on a string.
 **/

function mb_convert_case(
     string $string
  ,  int $mode
  , $encoding = null
  ) {

  /**
   * Performs case folding on a string, converted in the way
   * specified by mode.
   **/
}

/**
 * Convert a string from one character encoding to another.
 **/

function mb_convert_encoding(
    $string
  ,  string $to_encoding
  , $from_encoding = null
  ) {

  /**
   * Converts string from from_encoding, or the current internal
   * encoding, to to_encoding. If string is an &array;, all its
   * &string; values will be converted recursively.
   **/
}

/**
 * Convert "kana" one from another ("zen-kaku", "han-kaku" and.
 * more).
 **/

function mb_convert_kana(
     string $string
  ,  string $mode = "KV"
  , $encoding = null
  ) {

  /**
   * Performs a "han-kaku" - "zen-kaku" conversion for string
   * string. This function is only useful for Japanese.
   **/
}

/**
 * Convert character code in variable(s).
 **/

function mb_convert_variables(
     string $to_encoding
  , $from_encoding
  ,  mixed &$var
  ,  mixed &$vars
  ) {

  /**
   * Converts character encoding of variables var and vars in
   * encoding from_encoding to encoding to_encoding.
   *
   * mb_convert_variables join strings in Array or Object to
   * detect encoding, since encoding detection tends to fail for
   * short strings. Therefore, it is impossible to mix encoding in
   * single array or object.
   **/
}

/**
 * Decode string in MIME header field.
 **/

function mb_decode_mimeheader( string $string) {

  /**
   * Decodes encoded-word string string in MIME header.
   **/
}

/**
 * Decode HTML numeric string reference to character.
 **/

function mb_decode_numericentity(
     string $string
  ,  array $map
  , $encoding = null
  ) {

  /**
   * Convert numeric string reference of string string in a
   * specified block to character.
   **/
}

/**
 * Detect character encoding.
 **/

function mb_detect_encoding(
     string $string
  , $encodings = null
  ,  bool $strict = false
  ) {

  /**
   * Detects the most likely character encoding for string string
   * from an ordered list of candidates.
   *
   * Automatic detection of the intended character encoding can
   * never be entirely reliable; without some additional
   * information, it is similar to decoding an encrypted string
   * without the key. It is always preferable to use an indication
   * of character encoding stored or transmitted with the data,
   * such as a "Content-Type" HTTP header.
   *
   * This function is most useful with multibyte encodings, where
   * not all sequences of bytes form a valid string. If the input
   * string contains such a sequence, that encoding will be
   * rejected, and the next encoding checked.
   **/
}

/**
 * Set/Get character encoding detection order.
 **/

function mb_detect_order($encoding = null) {

  /**
   * Sets the automatic character encoding detection order to
   * encoding.
   **/
}

/**
 * Encode string for MIME header.
 **/

function mb_encode_mimeheader(
     string $string
  , $charset = null
  , $transfer_encoding = null
  ,  string $newline = "\r\n"
  ,  int $indent = 0
  ) {

  /**
   * Encodes a given string string by the MIME header encoding
   * scheme.
   **/
}

/**
 * Encode character to HTML numeric string reference.
 **/

function mb_encode_numericentity(
     string $string
  ,  array $map
  , $encoding = null
  ,  bool $hex = false
  ) {

  /**
   * Converts specified character codes in string string from
   * character code to HTML numeric character reference.
   **/
}

/**
 * Get aliases of a known encoding type.
 **/

function mb_encoding_aliases( string $encoding) {

  /**
   * Returns an array of aliases for a known encoding type.
   **/
}

/**
 * Regular expression match for multibyte string.
 **/

function mb_ereg_match(
     string $pattern
  ,  string $string
  , $options = null
  ) {

  /**
   * A regular expression match for a multibyte string pattern is
   * only matched at the beginning of string.
   **/
}

/**
 * Perform a regular expression search and replace with multibyte.
 * support using a callback.
 **/

function mb_ereg_replace_callback(
     string $pattern
  ,  callable $callback
  ,  string $string
  , $options = null
  ) {

  /**
   * Scans string for matches to pattern, then replaces the
   * matched text with the output of callback function.
   *
   * The behavior of this function is almost identical to
   * mb_ereg_replace, except for the fact that instead of
   * replacement parameter, one should specify a callback.
   **/
}

/**
 * Replace regular expression with multibyte support.
 **/

function mb_ereg_replace(
     string $pattern
  ,  string $replacement
  ,  string $string
  , $options = null
  ) {

  /**
   **/
}

/**
 * Returns start point for next regular expression match.
 **/

function mb_ereg_search_getpos() {

  /**
   **/
}

/**
 * Retrieve the result from the last multibyte regular expression.
 * match.
 **/

function mb_ereg_search_getregs() {

  /**
   **/
}

/**
 * Setup string and regular expression for a multibyte regular.
 * expression match.
 **/

function mb_ereg_search_init(
     string $string
  , $pattern = null
  , $options = null
  ) {

  /**
   * mb_ereg_search_init sets string and pattern for a multibyte
   * regular expression. These values are used for mb_ereg_search,
   * mb_ereg_search_pos, and mb_ereg_search_regs.
   **/
}

/**
 * Returns position and length of a matched part of the multibyte.
 * regular expression for a predefined multibyte string.
 **/

function mb_ereg_search_pos($pattern = null, $options = null) {

  /**
   * Returns position and length of a matched part of the
   * multibyte regular expression for a predefined multibyte string
   *
   * The string for match is specified by mb_ereg_search_init. If
   * it is not specified, the previous one will be used.
   **/
}

/**
 * Returns the matched part of a multibyte regular expression.
 **/

function mb_ereg_search_regs($pattern = null, $options = null) {

  /**
   * Returns the matched part of a multibyte regular expression.
   **/
}

/**
 * Set start point of next regular expression match.
 **/

function mb_ereg_search_setpos( int $offset) {

  /**
   **/
}

/**
 * Multibyte regular expression match for predefined multibyte.
 * string.
 **/

function mb_ereg_search($pattern = null, $options = null) {

  /**
   * Performs a multibyte regular expression match for a
   * predefined multibyte string.
   **/
}

/**
 * Regular expression match with multibyte support.
 **/

function mb_ereg(
     string $pattern
  ,  string $string
  ,  array &$matches = null
  ) {

  /**
   **/
}

/**
 * Replace regular expression with multibyte support ignoring.
 * case.
 **/

function mb_eregi_replace(
     string $pattern
  ,  string $replacement
  ,  string $string
  , $options = null
  ) {

  /**
   **/
}

/**
 * Regular expression match ignoring case with multibyte support.
 **/

function mb_eregi(
     string $pattern
  ,  string $string
  ,  array &$matches = null
  ) {

  /**
   **/
}

/**
 * Get internal settings of mbstring.
 **/

function mb_get_info( string $type = "all") {

  /**
   **/
}

/**
 * Detect HTTP input character encoding.
 **/

function mb_http_input($type = null) {

  /**
   **/
}

/**
 * Set/Get HTTP output character encoding.
 **/

function mb_http_output($encoding = null) {

  /**
   * Set/Get the HTTP output character encoding. Output after this
   * function is called will be converted from the set internal
   * encoding to encoding.
   **/
}

/**
 * Set/Get internal character encoding.
 **/

function mb_internal_encoding($encoding = null) {

  /**
   * Set/Get the internal character encoding
   **/
}

/**
 * Set/Get current language.
 **/

function mb_language($language = null) {

  /**
   * Set/Get the current language.
   **/
}

/**
 * Returns an array of all supported encodings.
 **/

function mb_list_encodings() {

  /**
   * Returns an array containing all supported encodings.
   **/
}

/**
 * Get Unicode code point of character.
 **/

function mb_ord( string $string, $encoding = null) {

  /**
   * Returns the Unicode code point value of the given character.
   *
   * This function complements mb_chr.
   **/
}

/**
 * Callback function converts character encoding in output buffer.
 **/

function mb_output_handler( string $string,  int $status) {

  /**
   * mb_output_handler is ob_start callback function.
   * mb_output_handler converts characters in the output buffer
   * from internal character encoding to HTTP output character
   * encoding.
   **/
}

/**
 * Parse GET/POST/COOKIE data and set global variable.
 **/

function mb_parse_str( string $string,  array &$result) {

  /**
   * Parses GET/POST/COOKIE data and sets global variables. Since
   * PHP does not provide raw POST/COOKIE data, it can only be used
   * for GET data for now. It parses URL encoded data, detects
   * encoding, converts coding to internal encoding and set values
   * to the result array or global variables.
   **/
}

/**
 * Get MIME charset string.
 **/

function mb_preferred_mime_name( string $encoding) {

  /**
   * Get a MIME charset string for a specific encoding.
   **/
}

/**
 * Set/Get character encoding for multibyte regex.
 **/

function mb_regex_encoding($encoding = null) {

  /**
   * Set/Get character encoding for a multibyte regex.
   **/
}

/**
 * Set/Get the default options for mbregex functions.
 **/

function mb_regex_set_options($options = null) {

  /**
   **/
}

/**
 * Replace ill-formed byte sequences with the substitute.
 * character.
 **/

function mb_scrub( string $string, $encoding = null) {

  /**
   * Perform a character set conversion from the specified
   * encoding, or the default encoding if no encoding was
   * specified, to the same encoding. This has the effect of
   * replacing any invalid byte sequences with the substitute
   * character.
   **/
}

/**
 * Send encoded mail.
 **/

function mb_send_mail(
     string $to
  ,  string $subject
  ,  string $message
  , $additional_headers = []
  , $additional_params = null
  ) {

  /**
   * Sends email. Headers and messages are converted and encoded
   * according to the mb_language setting. It's a wrapper function
   * for mail, so see also mail for details.
   **/
}

/**
 * Split multibyte string using regular expression.
 **/

function mb_split(
     string $pattern
  ,  string $string
  ,  int $limit = -1
  ) {

  /**
   **/
}

/**
 * Pad a multibyte string to a certain length with another.
 * multibyte string.
 **/

function mb_str_pad(
     string $string
  ,  int $length
  ,  string $pad_string = " "
  ,  int $pad_type = STR_PAD_RIGHT
  , $encoding = null
  ) {

  /**
   * This function returns the string padded on the left, the
   * right, or both sides to the specified padding length, where
   * the length is measured in Unicode codepoints. If the optional
   * argument pad_string is not supplied, the string is padded with
   * spaces, otherwise it is padded with characters from pad_string
   * up to the limit.
   **/
}

/**
 * Given a multibyte string, return an array of its characters.
 **/

function mb_str_split(
     string $string
  ,  int $length = 1
  , $encoding = null
  ) {

  /**
   * This function will return an array of strings, it is a
   * version of str_split with support for encodings of variable
   * character size as well as fixed-size encodings of 1,2 or 4
   * byte characters. If the length parameter is specified, the
   * string is broken down into chunks of the specified length in
   * characters (not bytes). The encoding parameter can be
   * optionally specified and it is good practice to do so.
   **/
}

/**
 * Get part of string.
 **/

function mb_strcut(
     string $string
  ,  int $start
  , $length = null
  , $encoding = null
  ) {

  /**
   * mb_strcut extracts a substring from a string similarly to
   * mb_substr, but operates on bytes instead of characters. If the
   * cut position happens to be between two bytes of a multi-byte
   * character, the cut is performed starting from the first byte
   * of that character. This is also the difference to the substr
   * function, which would simply cut the string between the bytes
   * and thus result in a malformed byte sequence.
   **/
}

/**
 * Get truncated string with specified width.
 **/

function mb_strimwidth(
     string $string
  ,  int $start
  ,  int $width
  ,  string $trim_marker = ""
  , $encoding = null
  ) {

  /**
   * Truncates string string to specified width, where halfwidth
   * characters count as 1, and fullwidth characters count as 2.
   * See &url.unicode.reports.tr;11/ for details regarding East
   * Asian character widths.
   **/
}

/**
 * Finds position of first occurrence of a string within another,.
 * case insensitive.
 **/

function mb_stripos(
     string $haystack
  ,  string $needle
  ,  int $offset = 0
  , $encoding = null
  ) {

  /**
   * mb_stripos returns the numeric position of the first
   * occurrence of needle in the haystack string. Unlike mb_strpos,
   * mb_stripos is case-insensitive. If needle is not found, it
   * returns &false;.
   **/
}

/**
 * Finds first occurrence of a string within another, case.
 * insensitive.
 **/

function mb_stristr(
     string $haystack
  ,  string $needle
  ,  bool $before_needle = false
  , $encoding = null
  ) {

  /**
   * mb_stristr finds the first occurrence of needle in haystack
   * and returns the portion of haystack. Unlike mb_strstr,
   * mb_stristr is case-insensitive. If needle is not found, it
   * returns &false;.
   **/
}

/**
 * Get string length.
 **/

function mb_strlen( string $string, $encoding = null) {

  /**
   * Gets the length of a string.
   **/
}

/**
 * Find position of first occurrence of string in a string.
 **/

function mb_strpos(
     string $haystack
  ,  string $needle
  ,  int $offset = 0
  , $encoding = null
  ) {

  /**
   * Finds position of the first occurrence of a string in a
   * string.
   *
   * Performs a multi-byte safe strpos operation based on number
   * of characters. The first character's position is 0, the second
   * character position is 1, and so on.
   **/
}

/**
 * Finds the last occurrence of a character in a string within.
 * another.
 **/

function mb_strrchr(
     string $haystack
  ,  string $needle
  ,  bool $before_needle = false
  , $encoding = null
  ) {

  /**
   * mb_strrchr finds the last occurrence of needle in haystack
   * and returns the portion of haystack. If needle is not found,
   * it returns &false;.
   **/
}

/**
 * Finds the last occurrence of a character in a string within.
 * another, case insensitive.
 **/

function mb_strrichr(
     string $haystack
  ,  string $needle
  ,  bool $before_needle = false
  , $encoding = null
  ) {

  /**
   * mb_strrichr finds the last occurrence of needle in haystack
   * and returns the portion of haystack. Unlike mb_strrchr,
   * mb_strrichr is case-insensitive. If needle is not found, it
   * returns &false;.
   **/
}

/**
 * Finds position of last occurrence of a string within another,.
 * case insensitive.
 **/

function mb_strripos(
     string $haystack
  ,  string $needle
  ,  int $offset = 0
  , $encoding = null
  ) {

  /**
   * mb_strripos performs multi-byte safe strripos operation based
   * on number of characters. needle position is counted from the
   * beginning of haystack. First character's position is 0. Second
   * character position is 1. Unlike mb_strrpos, mb_strripos is
   * case-insensitive.
   **/
}

/**
 * Find position of last occurrence of a string in a string.
 **/

function mb_strrpos(
     string $haystack
  ,  string $needle
  ,  int $offset = 0
  , $encoding = null
  ) {

  /**
   * Performs a multibyte safe strrpos operation based on the
   * number of characters. needle position is counted from the
   * beginning of haystack. First character's position is 0. Second
   * character position is 1.
   **/
}

/**
 * Finds first occurrence of a string within another.
 **/

function mb_strstr(
     string $haystack
  ,  string $needle
  ,  bool $before_needle = false
  , $encoding = null
  ) {

  /**
   * mb_strstr finds the first occurrence of needle in haystack
   * and returns the portion of haystack. If needle is not found,
   * it returns &false;.
   **/
}

/**
 * Make a string lowercase.
 **/

function mb_strtolower( string $string, $encoding = null) {

  /**
   * Returns string with all alphabetic characters converted to
   * lowercase.
   **/
}

/**
 * Make a string uppercase.
 **/

function mb_strtoupper( string $string, $encoding = null) {

  /**
   * Returns string with all alphabetic characters converted to
   * uppercase.
   **/
}

/**
 * Return width of string.
 **/

function mb_strwidth( string $string, $encoding = null) {

  /**
   * Returns the width of string string, where halfwidth
   * characters count as 1, and fullwidth characters count as 2.
   * See &url.unicode.reports.tr;11/ for details regarding East
   * Asian character widths.
   *
   * The fullwidth characters are: U+1100-U+115F, U+11A3-U+11A7,
   * U+11FA-U+11FF, U+2329-U+232A, U+2E80-U+2E99, U+2E9B-U+2EF3,
   * U+2F00-U+2FD5, U+2FF0-U+2FFB, U+3000-U+303E, U+3041-U+3096,
   * U+3099-U+30FF, U+3105-U+312D, U+3131-U+318E, U+3190-U+31BA,
   * U+31C0-U+31E3, U+31F0-U+321E, U+3220-U+3247, U+3250-U+32FE,
   * U+3300-U+4DBF, U+4E00-U+A48C, U+A490-U+A4C6, U+A960-U+A97C,
   * U+AC00-U+D7A3, U+D7B0-U+D7C6, U+D7CB-U+D7FB, U+F900-U+FAFF,
   * U+FE10-U+FE19, U+FE30-U+FE52, U+FE54-U+FE66, U+FE68-U+FE6B,
   * U+FF01-U+FF60, U+FFE0-U+FFE6, U+1B000-U+1B001,
   * U+1F200-U+1F202, U+1F210-U+1F23A, U+1F240-U+1F248,
   * U+1F250-U+1F251, U+20000-U+2FFFD, U+30000-U+3FFFD. All other
   * characters are halfwidth characters.
   **/
}

/**
 * Set/Get substitution character.
 **/

function mb_substitute_character($substitute_character = null) {

  /**
   * Specifies a substitution character when input character
   * encoding is invalid or character code does not exist in output
   * character encoding. Invalid characters may be substituted
   * "none" (no output), string or int value (Unicode character
   * code value).
   *
   * This setting affects mb_convert_encoding,
   * mb_convert_variables, mb_output_handler, mb_scrub, and
   * mb_send_mail.
   **/
}

/**
 * Count the number of substring occurrences.
 **/

function mb_substr_count(
     string $haystack
  ,  string $needle
  , $encoding = null
  ) {

  /**
   * Counts the number of times the needle substring occurs in the
   * haystack string.
   **/
}

/**
 * Get part of string.
 **/

function mb_substr(
     string $string
  ,  int $start
  , $length = null
  , $encoding = null
  ) {

  /**
   * Performs a multi-byte safe substr operation based on number
   * of characters. Position is counted from the beginning of
   * string. First character's position is 0. Second character
   * position is 1, and so on.
   **/
}

/**
 * Creates an initialization vector (IV) from a random source.
 **/

function mcrypt_create_iv(
     int $size
  ,  int $source = MCRYPT_DEV_URANDOM
  ) {

  /**
   * Creates an initialization vector (IV) from a random source.
   *
   * The IV is only meant to give an alternative seed to the
   * encryption routines. This IV does not need to be secret at
   * all, though it can be desirable. You even can send it along
   * with your ciphertext without losing security.
   **/
}

/**
 * Decrypts crypttext with given parameters.
 **/

function mcrypt_decrypt(
     string $cipher
  ,  string $key
  ,  string $data
  ,  string $mode
  ,  string $iv
  ) {

  /**
   * Decrypts the data and returns the unencrypted data.
   **/
}

/**
 * Returns the name of the opened algorithm.
 **/

function mcrypt_enc_get_algorithms_name( resource $td) {

  /**
   * This function returns the name of the algorithm.
   **/
}

/**
 * Returns the blocksize of the opened algorithm.
 **/

function mcrypt_enc_get_block_size( resource $td) {

  /**
   * Gets the blocksize of the opened algorithm.
   **/
}

/**
 * Returns the size of the IV of the opened algorithm.
 **/

function mcrypt_enc_get_iv_size( resource $td) {

  /**
   * This function returns the size of the IV of the algorithm
   * specified by the encryption descriptor in bytes. An IV is used
   * in cbc, cfb and ofb modes, and in some algorithms in stream
   * mode.
   **/
}

/**
 * Returns the maximum supported keysize of the opened mode.
 **/

function mcrypt_enc_get_key_size( resource $td) {

  /**
   * Gets the maximum supported key size of the algorithm in
   * bytes.
   **/
}

/**
 * Returns the name of the opened mode.
 **/

function mcrypt_enc_get_modes_name( resource $td) {

  /**
   * This function returns the name of the mode.
   **/
}

/**
 * Returns an array with the supported keysizes of the opened.
 * algorithm.
 **/

function mcrypt_enc_get_supported_key_sizes( resource $td) {

  /**
   * Gets the supported key sizes of the opened algorithm.
   **/
}

/**
 * Checks whether the encryption of the opened mode works on.
 * blocks.
 **/

function mcrypt_enc_is_block_algorithm_mode( resource $td) {

  /**
   * Tells whether the algorithm of the opened mode works on
   * blocks (e.g. &false; for stream, and &true; for cbc, cfb,
   * ofb)..
   **/
}

/**
 * Checks whether the algorithm of the opened mode is a block.
 * algorithm.
 **/

function mcrypt_enc_is_block_algorithm( resource $td) {

  /**
   * Tells whether the algorithm of the opened mode is a block
   * algorithm.
   **/
}

/**
 * Checks whether the opened mode outputs blocks.
 **/

function mcrypt_enc_is_block_mode( resource $td) {

  /**
   * Tells whether the opened mode outputs blocks (e.g. &true; for
   * cbc and ecb, and &false; for cfb and stream).
   **/
}

/**
 * Runs a self test on the opened module.
 **/

function mcrypt_enc_self_test( resource $td) {

  /**
   * This function runs the self test on the algorithm specified
   * by the descriptor td.
   **/
}

/**
 * Encrypts plaintext with given parameters.
 **/

function mcrypt_encrypt(
     string $cipher
  ,  string $key
  ,  string $data
  ,  string $mode
  ,  string $iv
  ) {

  /**
   * Encrypts the data and returns it.
   **/
}

/**
 * This function deinitializes an encryption module.
 **/

function mcrypt_generic_deinit( resource $td) {

  /**
   * This function terminates encryption specified by the
   * encryption descriptor (td). It clears all buffers, but does
   * not close the module. You need to call mcrypt_module_close
   * yourself. (But PHP does this for you at the end of the
   * script.)
   **/
}

/**
 * This function initializes all buffers needed for encryption.
 **/

function mcrypt_generic_init(
     resource $td
  ,  string $key
  ,  string $iv
  ) {

  /**
   * You need to call this function before every call to
   * mcrypt_generic or mdecrypt_generic.
   **/
}

/**
 * This function encrypts data.
 **/

function mcrypt_generic( resource $td,  string $data) {

  /**
   * This function encrypts data. The data is padded with "\0" to
   * make sure the length of the data is n * blocksize. This
   * function returns the encrypted data. Note that the length of
   * the returned string can in fact be longer than the input, due
   * to the padding of the data.
   *
   * If you want to store the encrypted data in a database make
   * sure to store the entire string as returned by mcrypt_generic,
   * or the string will not entirely decrypt properly. If your
   * original string is 10 characters long and the block size is 8
   * (use mcrypt_enc_get_block_size to determine the blocksize),
   * you would need at least 16 characters in your database field.
   * Note the string returned by mdecrypt_generic will be 16
   * characters as well...use rtrim($str, "\0") to remove the
   * padding.
   *
   * If you are for example storing the data in a MySQL database
   * remember that varchar fields automatically have trailing
   * spaces removed during insertion. As encrypted data can end in
   * a space (ASCII 32), the data will be damaged by this removal.
   * Store data in a tinyblob/tinytext (or larger) field instead.
   **/
}

/**
 * Gets the block size of the specified cipher.
 **/

function mcrypt_get_block_size( int $cipher) {

  /**
   * The first prototype is when linked against libmcrypt 2.2.x,
   * the second when linked against libmcrypt 2.4.x or 2.5.x.
   *
   * mcrypt_get_block_size is used to get the size of a block of
   * the specified cipher (in combination with an encryption mode).
   *
   * It is more useful to use the mcrypt_enc_get_block_size
   * function as this uses the resource returned by
   * mcrypt_module_open.
   **/
}

/**
 * Gets the name of the specified cipher.
 **/

function mcrypt_get_cipher_name( int $cipher) {

  /**
   * mcrypt_get_cipher_name is used to get the name of the
   * specified cipher.
   *
   * mcrypt_get_cipher_name takes the cipher number as an argument
   * (libmcrypt 2.2.x) or takes the cipher name as an argument
   * (libmcrypt 2.4.x or higher) and returns the name of the cipher
   * or &false;, if the cipher does not exist.
   **/
}

/**
 * Returns the size of the IV belonging to a specific cipher/mode.
 * combination.
 **/

function mcrypt_get_iv_size( string $cipher,  string $mode) {

  /**
   * Gets the size of the IV belonging to a specific cipher/mode
   * combination.
   *
   * It is more useful to use the mcrypt_enc_get_iv_size function
   * as this uses the resource returned by mcrypt_module_open.
   **/
}

/**
 * Gets the key size of the specified cipher.
 **/

function mcrypt_get_key_size( int $cipher) {

  /**
   * The first prototype is when linked against libmcrypt 2.2.x,
   * the second when linked against libmcrypt 2.4.x or 2.5.x.
   *
   * mcrypt_get_key_size is used to get the size of a key of the
   * specified cipher (in combination with an encryption mode).
   *
   * It is more useful to use the mcrypt_enc_get_key_size function
   * as this uses the resource returned by mcrypt_module_open.
   **/
}

/**
 * Gets an array of all supported ciphers.
 **/

function mcrypt_list_algorithms(
     string $lib_dir = ini_get("mcrypt.algorithms_dir")
  ) {

  /**
   * Gets the list of all supported algorithms in the lib_dir
   * parameter.
   **/
}

/**
 * Gets an array of all supported modes.
 **/

function mcrypt_list_modes(
     string $lib_dir = ini_get("mcrypt.modes_dir")
  ) {

  /**
   * Gets the list of all supported modes in the lib_dir
   * parameter.
   **/
}

/**
 * Closes the mcrypt module.
 **/

function mcrypt_module_close( resource $td) {

  /**
   * Closes the specified encryption handle.
   **/
}

/**
 * Returns the blocksize of the specified algorithm.
 **/

function mcrypt_module_get_algo_block_size(
     string $algorithm
  ,  string $lib_dir
  ) {

  /**
   * Gets the blocksize of the specified algorithm.
   **/
}

/**
 * Returns the maximum supported keysize of the opened mode.
 **/

function mcrypt_module_get_algo_key_size(
     string $algorithm
  ,  string $lib_dir
  ) {

  /**
   * Gets the maximum supported keysize of the opened mode.
   **/
}

/**
 * Returns an array with the supported keysizes of the opened.
 * algorithm.
 **/

function mcrypt_module_get_supported_key_sizes(
     string $algorithm
  ,  string $lib_dir
  ) {

  /**
   * Returns an array with the key sizes supported by the
   * specified algorithm. If it returns an empty array then all key
   * sizes between 1 and mcrypt_module_get_algo_key_size are
   * supported by the algorithm.
   **/
}

/**
 * Returns if the specified module is a block algorithm or not.
 **/

function mcrypt_module_is_block_algorithm_mode(
     string $mode
  ,  string $lib_dir
  ) {

  /**
   * This function returns &true; if the mode is for use with
   * block algorithms, otherwise it returns &false;. (e.g. &false;
   * for stream, and &true; for cbc, cfb, ofb).
   **/
}

/**
 * This function checks whether the specified algorithm is a.
 * block algorithm.
 **/

function mcrypt_module_is_block_algorithm(
     string $algorithm
  ,  string $lib_dir
  ) {

  /**
   * This function returns &true; if the specified algorithm is a
   * block algorithm, or &false; if it is a stream one.
   **/
}

/**
 * Returns if the specified mode outputs blocks or not.
 **/

function mcrypt_module_is_block_mode( string $mode,  string $lib_dir) {

  /**
   * This function returns &true; if the mode outputs blocks of
   * bytes or &false; if it outputs just bytes. (e.g. &true; for
   * cbc and ecb, and &false; for cfb and stream).
   **/
}

/**
 * Opens the module of the algorithm and the mode to be used.
 **/

function mcrypt_module_open(
     string $algorithm
  ,  string $algorithm_directory
  ,  string $mode
  ,  string $mode_directory
  ) {

  /**
   * This function opens the module of the algorithm and the mode
   * to be used. The name of the algorithm is specified in
   * algorithm, e.g. "twofish" or is one of the MCRYPT_ciphername
   * constants. The module is closed by calling
   * mcrypt_module_close.
   **/
}

/**
 * This function runs a self test on the specified module.
 **/

function mcrypt_module_self_test(
     string $algorithm
  ,  string $lib_dir
  ) {

  /**
   * This function runs the self test on the algorithm specified.
   **/
}

/**
 * Decrypts data.
 **/

function mdecrypt_generic( resource $td,  string $data) {

  /**
   * This function decrypts data. Note that the length of the
   * returned string can in fact be longer than the unencrypted
   * string, due to the padding of the data.
   **/
}

/**
 * Turn debug output on/off.
 **/

function memcache_debug( bool $on_off) {

  /**
   * memcache_debug turns on debug output if parameter on_off is
   * equal to &true; and turns off if it's &false;. memcache_debug
   * is accessible only if PHP was built with --enable-debug option
   * and always returns &true; in this case. Otherwise, this
   * function has no effect and always returns &false;.
   *
   * memcache_debug is accessible only if PHP was built with
   * --enable-debug option and always returns &true; in this case.
   * Otherwise, this function has no effect and always returns
   * &false;.
   **/
}

/**
 * Gets the highest available hash ID.
 **/

function mhash_count() {

  /**
   * Gets the highest available hash ID.
   **/
}

/**
 * Gets the block size of the specified hash.
 **/

function mhash_get_block_size( int $algo) {

  /**
   * Gets the size of a block of the specified algo.
   **/
}

/**
 * Gets the name of the specified hash.
 **/

function mhash_get_hash_name( int $algo) {

  /**
   * Gets the name of the specified algo.
   **/
}

/**
 * Generates a key.
 **/

function mhash_keygen_s2k(
     int $algo
  ,  string $password
  ,  string $salt
  ,  int $length
  ) {

  /**
   * Generates a key according to the given algo, using an user
   * provided password.
   *
   * This is the Salted S2K algorithm as specified in the OpenPGP
   * document (RFC 2440).
   *
   * Keep in mind that user supplied passwords are not really
   * suitable to be used as keys in cryptographic algorithms, since
   * users normally choose keys they can write on keyboard. These
   * passwords use only 6 to 7 bits per character (or less). It is
   * highly recommended to use some kind of transformation (like
   * this function) to the user supplied key.
   **/
}

/**
 * Computes hash.
 **/

function mhash( int $algo,  string $data, $key = null) {

  /**
   * mhash applies a hash function specified by algo to the data.
   **/
}

/**
 * Check whether client disconnected.
 **/

function connection_aborted() {

  /**
   * Checks whether the client disconnected.
   **/
}

/**
 * Returns connection status bitfield.
 **/

function connection_status() {

  /**
   * Gets the connection status bitfield.
   **/
}

/**
 * Returns the value of a constant.
 **/

function constant( string $name) {

  /**
   **/
}

/**
 * Defines a named constant.
 **/

function define(
     string $constant_name
  ,  mixed $value
  ,  bool $case_insensitive = false
  ) {

  /**
   * Defines a named constant at runtime.
   **/
}

/**
 * Checks whether a constant with the given name exists.
 **/

function defined( string $constant_name) {

  /**
   * Checks whether a constant with the given constant_name is
   * defined.
   *
   * This function works also with class constants and enum cases.
   *
   * If you want to see if a variable exists, use isset as defined
   * only applies to constants. If you want to see if a function
   * exists, use function_exists.
   **/
}

/**
 * Equivalent to exit.
 **/

function () {

  /**
   * This language construct is equivalent to exit.
   **/
}

/**
 * Evaluate a string as PHP code.
 **/

function eval( string $code) {

  /**
   * Evaluates the given code as PHP.
   *
   * The code being evaluated inherits the variable scope of the
   * line on which the eval call occurs. Any variables available at
   * that line will be available for reading and modification in
   * the evaluated code. However, all functions and classes defined
   * will be defined in the global namespace. In other words, the
   * compiler considers the evaluated code as if it were a separate
   * included file.
   *
   * The eval language construct is very dangerous because it
   * allows execution of arbitrary PHP code. Its use thus is
   * discouraged. If you have carefully verified that there is no
   * other option than to use this construct, pay special attention
   * not to pass any user provided data into it without properly
   * validating it beforehand.
   **/
}

/**
 * Output a message and terminate the current script.
 **/

function exit( string $status) {

  /**
   * Terminates execution of the script. Shutdown functions and
   * object destructors will always be executed even if exit is
   * called.
   *
   * exit is a language construct and it can be called without
   * parentheses if no status is passed.
   **/
}

/**
 * Tells what the user's browser is capable of.
 **/

function get_browser($user_agent = null,  bool $return_array = false) {

  /**
   * Attempts to determine the capabilities of the user's browser,
   * by looking up the browser's information in the browscap.ini
   * file.
   **/
}

/**
 * Halts the compiler execution.
 **/

function __halt_compiler() {

  /**
   * Halts the execution of the compiler. This can be useful to
   * embed data in PHP scripts, like the installation files.
   *
   * Byte position of the data start can be determined by the
   * __COMPILER_HALT_OFFSET__ constant which is defined only if
   * there is a __halt_compiler presented in the file.
   **/
}

/**
 * Syntax highlighting of a file.
 **/

function highlight_file( string $filename,  bool $return = false) {

  /**
   * Prints out or returns a syntax highlighted version of the
   * code contained in filename using the colors defined in the
   * built-in syntax highlighter for PHP.
   *
   * Many servers are configured to automatically highlight files
   * with a phps extension. For example, example.phps when viewed
   * will show the syntax highlighted source of the file. To enable
   * this, add this line to the &httpd.conf;:
   **/
}

/**
 * Syntax highlighting of a string.
 **/

function highlight_string( string $string,  bool $return = false) {

  /**
   **/
}

/**
 * Get the system's high resolution time.
 **/

function hrtime( bool $as_number = false) {

  /**
   **/
}

/**
 * Set whether a client disconnect should abort script execution.
 **/

function ignore_user_abort($enable = null) {

  /**
   * Sets whether a client disconnect should cause a script to be
   * aborted.
   *
   * When running PHP as a command line script, and the script's
   * tty goes away without the script being terminated then the
   * script will die the next time it tries to write anything,
   * unless enable is set to &true;
   **/
}

/**
 * Pack data into binary string.
 **/

function pack( string $format,  mixed $values) {

  /**
   * Pack given arguments into a binary string according to
   * format.
   *
   * The idea for this function was taken from Perl and all
   * formatting codes work the same as in Perl. However, there are
   * some formatting codes that are missing such as Perl's "u"
   * format code.
   *
   * Note that the distinction between signed and unsigned values
   * only affects the function unpack, where as function pack gives
   * the same result for signed and unsigned format codes.
   **/
}

/**
 * Return source with stripped comments and whitespace.
 **/

function php_strip_whitespace( string $filename) {

  /**
   * Returns the PHP source code in filename with PHP comments and
   * whitespace removed. This may be useful for determining the
   * amount of actual code in your scripts compared with the amount
   * of comments. This is similar to using php -w from the
   * commandline.
   **/
}

/**
 * Convert string from one codepage to another.
 **/

function sapi_windows_cp_conv() {

  /**
   * Convert string from one codepage to another.
   **/
}

/**
 * Get current codepage.
 **/

function sapi_windows_cp_get() {

  /**
   * Gets the current codepage.
   **/
}

/**
 * Indicates whether the codepage is UTF-8 compatible.
 **/

function sapi_windows_cp_is_utf8() {

  /**
   * Indicates whether the codepage of the current process is
   * UTF-8 compatible.
   **/
}

/**
 * Set process codepage.
 **/

function sapi_windows_cp_set() {

  /**
   * Set the codepage of the current process.
   **/
}

/**
 * Send a CTRL event to another process.
 **/

function sapi_windows_generate_ctrl_event( int $event,  int $pid = 0) {

  /**
   * Sends a CTRL event to another process in the same process
   * group.
   **/
}

/**
 * Set or remove a CTRL event handler.
 **/

function sapi_windows_set_ctrl_handler($handler,  bool $add = true) {

  /**
   * Sets or removes a CTRL event handler, which allows Windows
   * CLI processes to intercept or ignore CTRL+C and CTRL+BREAK
   * events. Note that in multithreaded environments, this is only
   * possible when called from the main thread.
   **/
}

/**
 * Get or set VT100 support for the specified stream associated.
 * to an output buffer of a Windows console..
 **/

function sapi_windows_vt100_support() {

  /**
   * If enable is &null;, the function returns &true; if the
   * stream stream has VT100 control codes enabled, &false;
   * otherwise.
   *
   * If enable is a bool, the function will try to enable or
   * disable the VT100 features of the stream stream. If the
   * feature has been successfully enabled (or disabled), the
   * function will return &true;, or &false; otherwise.
   *
   * At startup, PHP tries to enable the VT100 feature of the
   * STDOUT/STDERR streams. By the way, if those streams are
   * redirected to a file, the VT100 features may not be enabled.
   *
   * If VT100 support is enabled, it is possible to use control
   * sequences as they are known from the VT100 terminal. They
   * allow the modification of the terminal's output. On Windows
   * these sequences are called Console Virtual Terminal Sequences.
   **/
}

/**
 * &Alias; highlight_file.
 **/

function () {

  /**
   **/
}

/**
 * Delay execution.
 **/

function sleep( int $seconds) {

  /**
   * In order to delay program execution for a fraction of a
   * second, use usleep as the sleep function expects an &integer;.
   * For example, sleep(0.25) will pause program execution for 0
   * seconds.
   **/
}

/**
 * Gets system load average.
 **/

function sys_getloadavg() {

  /**
   * Returns three samples representing the average system load
   * (the number of processes in the system run queue) over the
   * last 1, 5 and 15 minutes, respectively. Returns &false; on
   * failure.
   **/
}

/**
 * Delay for a number of seconds and nanoseconds.
 **/

function time_nanosleep( int $seconds,  int $nanoseconds) {

  /**
   * Delays program execution for the given number of seconds and
   * nanoseconds.
   **/
}

/**
 * Make the script sleep until the specified time.
 **/

function time_sleep_until( float $timestamp) {

  /**
   * Makes the script sleep until the specified timestamp.
   **/
}

/**
 * Generate a time-based identifier.
 **/

function uniqid( string $prefix = "",  bool $more_entropy = false) {

  /**
   * Gets an identifier based on the current time with microsecond
   * precision, prefixed with the given prefix and optionally
   * appending a randomly generated value.
   *
   * This function does not guarantee the uniqueness of the return
   * value because the value is based on the current time in
   * microseconds or the current time with a small amount of random
   * data appended if more_entropy is &true;.
   **/
}

/**
 * Unpack data from binary string.
 **/

function unpack( string $format,  string $string,  int $offset = 0) {

  /**
   * Unpacks from a binary string into an array according to the
   * given format.
   *
   * The unpacked data is stored in an associative array. To
   * accomplish this you have to name the different format codes
   * and separate them by a slash /. If a repeater argument is
   * present, then each of the array keys will have a sequence
   * number behind the given name.
   *
   * Changes were made to bring this function into line with Perl:
   * The "a" code now retains trailing NULL bytes. The "A" code now
   * strips all trailing ASCII whitespace (spaces, tabs, newlines,
   * carriage returns, and NULL bytes). The "Z" code was added for
   * NULL-padded strings, and removes trailing NULL bytes.
   **/
}

/**
 * Delay execution in microseconds.
 **/

function usleep( int $microseconds) {

  /**
   * Delays program execution for the given number of
   * microseconds.
   **/
}

/**
 * MQSeries MQBACK.
 **/

function mqseries_back(
     resource $hconn
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_back (MQBACK) call indicates to the queue
   * manager that all the message gets and puts that have occurred
   * since the last syncpoint are to be backed out. Messages put as
   * part of a unit of work are deleted; messages retrieved as part
   * of a unit of work are reinstated on the queue.
   *
   * Using mqseries_back only works in conjunction with
   * mqseries_begin and only function when connecting directly to a
   * Queueu manager. Not via the mqclient interface.
   **/
}

/**
 * MQseries MQBEGIN.
 **/

function mqseries_begin(
     resource $hconn
  ,  array $beginOptions
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_begin (MQBEGIN) call begins a unit of work that
   * is coordinated by the queue manager, and that may involve
   * external resource managers.
   *
   * Using mqseries_begin starts the unit of work. Either
   * mqseries_back or mqseries_cmit ends the unit of work.
   **/
}

/**
 * MQSeries MQCLOSE.
 **/

function mqseries_close(
     resource $hconn
  ,  resource $hobj
  ,  int $options
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_close (MQCLOSE) call relinquishes access to an
   * object, and is the inverse of the mqseries_open (MQOPEN) call.
   **/
}

/**
 * MQSeries MQCMIT.
 **/

function mqseries_cmit(
     resource $hconn
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_cmit (MQCMIT) call indicates to the queue
   * manager that the application has reached a syncpoint, and that
   * all of the message gets and puts that have occurred since the
   * last syncpoint are to be made permanent. Messages put as part
   * of a unit of work are made available to other applications;
   * messages retrieved as part of a unit of work are deleted.
   **/
}

/**
 * MQSeries MQCONN.
 **/

function mqseries_conn(
     string $qManagerName
  ,  resource &$hconn
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_conn (MQCONN) call connects an application
   * program to a queue manager. It provides a queue manager
   * connection handle, which is used by the application on
   * subsequent message queuing calls.
   **/
}

/**
 * MQSeries MQCONNX.
 **/

function mqseries_connx(
     string $qManagerName
  ,  array &$connOptions
  ,  resource &$hconn
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_connx (MQCONNX) call connects an application
   * program to a queue manager. It provides a queue manager
   * connection handle, which is used by the application on
   * subsequent MQ calls.
   *
   * The mqseries_connx call is like the mqseries_conn (MQCONN)
   * call, except that MQCONNX allows options to be specified to
   * control the way that the call works.
   **/
}

/**
 * MQSeries MQDISC.
 **/

function mqseries_disc(
     resource $hconn
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_disc (MQDISC) call breaks the connection between
   * the queue manager and the application program, and is the
   * inverse of the mqseries_conn (MQCONN) or mqseries_connx
   * (MQCONNX) call.
   **/
}

/**
 * MQSeries MQGET.
 **/

function mqseries_get(
     resource $hConn
  ,  resource $hObj
  ,  array &$md
  ,  array &$gmo
  ,  int &$bufferLength
  ,  string &$msg
  ,  int &$data_length
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_get (MQGET) call retrieves a message from a
   * local queue that has been opened using the mqseries_open
   * (MQOPEN) call
   **/
}

/**
 * MQSeries MQINQ.
 **/

function mqseries_inq(
     resource $hconn
  ,  resource $hobj
  ,  int $selectorCount
  ,  array $selectors
  ,  int $intAttrCount
  ,  resource &$intAttr
  ,  int $charAttrLength
  ,  resource &$charAttr
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_inq (MQINQ) call returns an array of integers
   * and a set of character strings containing the attributes of an
   * object.
   **/
}

/**
 * MQSeries MQOPEN.
 **/

function mqseries_open(
     resource $hconn
  ,  array &$objDesc
  ,  int $option
  ,  resource &$hobj
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_open (MQOPEN) call establishes access to an
   * object.
   **/
}

/**
 * MQSeries MQPUT.
 **/

function mqseries_put(
     resource $hConn
  ,  resource $hObj
  ,  array &$md
  ,  array &$pmo
  ,  string $message
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_put (MQPUT) call puts a message on a queue or
   * distribution list. The queue or distribution list must already
   * be open.
   **/
}

/**
 * MQSeries MQPUT1.
 **/

function mqseries_put1(
     resource $hconn
  ,  resource &$objDesc
  ,  resource &$msgDesc
  ,  resource &$pmo
  ,  string $buffer
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_put1 (MQPUT1) call puts one message on a queue.
   * The queue need not be open.
   *
   * You can use both the mqseries_put and mqseries_put1 calls to
   * put messages on a queue; which call to use depends on the
   * circumstances. Use the mqseries_put (MQPUT) call to place
   * multiple messages on the same queue. Use the mqseries_put1
   * (MQPUT1) call to put only one message on a queue. This call
   * encapsulates the MQOPEN, MQPUT, and MQCLOSE calls into a
   * single call, minimizing the number of calls that must be
   * issued.
   **/
}

/**
 * MQSeries MQSET.
 **/

function mqseries_set(
     resource $hConn
  ,  resource $hObj
  ,  int $selectorCount
  ,  array $selectors
  ,  int $intAttrCount
  ,  array $intAttrs
  ,  int $charAttrLength
  ,  array $charAttrs
  ,  resource &$compCode
  ,  resource &$reason
  ) {

  /**
   * The mqseries_set (MQSET) call is used to change the
   * attributes of an object represented by a handle. The object
   * must be a queue.
   **/
}

/**
 * Returns the error message corresponding to a result code.
 * (MQRC).
 **/

function mqseries_strerror( int $reason) {

  /**
   * mqseries_strerror returns the message that correspond to the
   * reason result code.
   **/
}

/**
 * Get number of affected rows in previous MySQL operation.
 **/

function PDOStatement::rowCount( resource $link_identifier = NULL) {

  /**
   * Get the number of affected rows by the last INSERT, UPDATE,
   * REPLACE or DELETE query associated with link_identifier.
   **/
}

/**
 * Returns the name of the character set.
 **/

function mysql_client_encoding( resource $link_identifier = NULL) {

  /**
   * Retrieves the character_set variable from MySQL.
   **/
}

/**
 * Close MySQL connection.
 **/

function mysql_close( resource $link_identifier = NULL) {

  /**
   * mysql_close closes the non-persistent connection to the MySQL
   * server that's associated with the specified link identifier.
   * If link_identifier isn't specified, the last opened link is
   * used.
   **/
}

/**
 * Open a connection to a MySQL Server.
 **/

function PDO::__construct(
     string $server = ini_get("mysql.default_host")
  ,  string $username = ini_get("mysql.default_user")
  ,  string $password = ini_get("mysql.default_password")
  ,  bool $new_link = false
  ,  int $client_flags = 0
  ) {

  /**
   * Opens or reuses a connection to a MySQL server.
   **/
}

/**
 * Create a MySQL database.
 **/

function PDO::query(
     string $database_name
  ,  resource $link_identifier = NULL
  ) {

  /**
   * mysql_create_db attempts to create a new database on the
   * server associated with the specified link identifier.
   **/
}

/**
 * Move internal result pointer.
 **/

function mysql_data_seek( resource $result,  int $row_number) {

  /**
   * mysql_data_seek moves the internal row pointer of the MySQL
   * result associated with the specified result identifier to
   * point to the specified row number. The next call to a MySQL
   * fetch function, such as mysql_fetch_assoc, would return that
   * row.
   *
   * row_number starts at 0. The row_number should be a value in
   * the range from 0 to mysql_num_rows - 1. However if the result
   * set is empty (mysql_num_rows == 0), a seek to 0 will fail with
   * an E_WARNING and mysql_data_seek will return &false;.
   **/
}

/**
 * Retrieves database name from the call to mysql_list_dbs.
 **/

function mysql_db_name(
     resource $result
  ,  int $row
  ,  mixed $field = NULL
  ) {

  /**
   * Retrieve the database name from a call to mysql_list_dbs.
   **/
}

/**
 * Selects a database and executes a query on it.
 **/

function PDO::__construct(
     string $database
  ,  string $query
  ,  resource $link_identifier = NULL
  ) {

  /**
   * mysql_db_query selects a database, and executes a query on
   * it.
   **/
}

/**
 * Drop (delete) a MySQL database.
 **/

function mysql_drop_db(
     string $database_name
  ,  resource $link_identifier = NULL
  ) {

  /**
   * mysql_drop_db attempts to drop (remove) an entire database
   * from the server associated with the specified link identifier.
   * This function is deprecated, it is preferable to use
   * mysql_query to issue an sql DROP DATABASE statement instead.
   **/
}

/**
 * Returns the numerical value of the error message from previous.
 * MySQL operation.
 **/

function PDO::errorCode( resource $link_identifier = NULL) {

  /**
   * Returns the error number from the last MySQL function.
   *
   * Errors coming back from the MySQL database backend no longer
   * issue warnings. Instead, use mysql_errno to retrieve the error
   * code. Note that this function only returns the error code from
   * the most recently executed MySQL function (not including
   * mysql_error and mysql_errno), so if you want to use it, make
   * sure you check the value before calling another MySQL
   * function.
   **/
}

/**
 * Returns the text of the error message from previous MySQL.
 * operation.
 **/

function PDO::errorInfo( resource $link_identifier = NULL) {

  /**
   * Returns the error text from the last MySQL function. Errors
   * coming back from the MySQL database backend no longer issue
   * warnings. Instead, use mysql_error to retrieve the error text.
   * Note that this function only returns the error text from the
   * most recently executed MySQL function (not including
   * mysql_error and mysql_errno), so if you want to use it, make
   * sure you check the value before calling another MySQL
   * function.
   **/
}

/**
 * Escapes a string for use in a mysql_query.
 **/

function PDO::quote( string $unescaped_string) {

  /**
   * This function will escape the unescaped_string, so that it is
   * safe to place it in a mysql_query. This function is
   * deprecated.
   *
   * This function is identical to mysql_real_escape_string except
   * that mysql_real_escape_string takes a connection handler and
   * escapes the string according to the current character set.
   * mysql_escape_string does not take a connection argument and
   * does not respect the current charset setting.
   **/
}

/**
 * Fetch a result row as an associative array, a numeric array,.
 * or both.
 **/

function PDOStatement::fetch(
     resource $result
  ,  int $result_type = MYSQL_BOTH
  ) {

  /**
   * Returns an array that corresponds to the fetched row and
   * moves the internal data pointer ahead.
   **/
}

/**
 * Fetch a result row as an associative array.
 **/

function PDOStatement::fetch( resource $result) {

  /**
   * Returns an associative array that corresponds to the fetched
   * row and moves the internal data pointer ahead.
   * mysql_fetch_assoc is equivalent to calling mysql_fetch_array
   * with MYSQL_ASSOC for the optional second parameter. It only
   * returns an associative array.
   **/
}

/**
 * Get column information from a result and return as an object.
 **/

function PDOStatement::getColumnMeta( resource $result,  int $field_offset = 0) {

  /**
   * Returns an object containing field information. This function
   * can be used to obtain information about fields in the provided
   * query result.
   **/
}

/**
 * Get the length of each output in a result.
 **/

function PDOStatement::getColumnMeta( resource $result) {

  /**
   * Returns an array that corresponds to the lengths of each
   * field in the last row fetched by MySQL.
   *
   * mysql_fetch_lengths stores the lengths of each result column
   * in the last row returned by mysql_fetch_row,
   * mysql_fetch_assoc, mysql_fetch_array, and mysql_fetch_object
   * in an array, starting at offset 0.
   **/
}

/**
 * Fetch a result row as an object.
 **/

function PDOStatement::fetch(
     resource $result
  ,  string $class_name
  ,  array $params
  ) {

  /**
   * Returns an object with properties that correspond to the
   * fetched row and moves the internal data pointer ahead.
   **/
}

/**
 * Get a result row as an enumerated array.
 **/

function PDOStatement::fetch( resource $result) {

  /**
   * Returns a numerical array that corresponds to the fetched row
   * and moves the internal data pointer ahead.
   **/
}

/**
 * Get the flags associated with the specified field in a result.
 **/

function PDOStatement::getColumnMeta( resource $result,  int $field_offset) {

  /**
   * mysql_field_flags returns the field flags of the specified
   * field. The flags are reported as a single word per flag
   * separated by a single space, so that you can split the
   * returned value using explode.
   **/
}

/**
 * Returns the length of the specified field.
 **/

function PDOStatement::getColumnMeta( resource $result,  int $field_offset) {

  /**
   * mysql_field_len returns the length of the specified field.
   **/
}

/**
 * Get the name of the specified field in a result.
 **/

function PDOStatement::getColumnMeta( resource $result,  int $field_offset) {

  /**
   * mysql_field_name returns the name of the specified field
   * index.
   **/
}

/**
 * Set result pointer to a specified field offset.
 **/

function PDOStatement::fetch( resource $result,  int $field_offset) {

  /**
   * Seeks to the specified field offset. If the next call to
   * mysql_fetch_field doesn't include a field offset, the field
   * offset specified in mysql_field_seek will be returned.
   **/
}

/**
 * Get name of the table the specified field is in.
 **/

function PDOStatement::getColumnMeta( resource $result,  int $field_offset) {

  /**
   * Returns the name of the table that the specified field is in.
   **/
}

/**
 * Get the type of the specified field in a result.
 **/

function PDOStatement::getColumnMeta( resource $result,  int $field_offset) {

  /**
   * mysql_field_type is similar to the mysql_field_name function.
   * The arguments are identical, but the field type is returned
   * instead.
   **/
}

/**
 * Free result memory.
 **/

function PDOStatement::closeCursor( resource $result) {

  /**
   * mysql_free_result will free all memory associated with the
   * result identifier result.
   *
   * mysql_free_result only needs to be called if you are
   * concerned about how much memory is being used for queries that
   * return large result sets. All associated result memory is
   * automatically freed at the end of the script's execution.
   **/
}

/**
 * Get MySQL client info.
 **/

function PDO::getAttribute() {

  /**
   * mysql_get_client_info returns a string that represents the
   * client library version.
   **/
}

/**
 * Get MySQL host info.
 **/

function PDO::getAttribute( resource $link_identifier = NULL) {

  /**
   * Describes the type of connection in use for the connection,
   * including the server host name.
   **/
}

/**
 * Get MySQL protocol info.
 **/

function mysql_get_proto_info( resource $link_identifier = NULL) {

  /**
   * Retrieves the MySQL protocol.
   **/
}

/**
 * Get MySQL server info.
 **/

function PDO::getAttribute( resource $link_identifier = NULL) {

  /**
   * Retrieves the MySQL server version.
   **/
}

/**
 * Get information about the most recent query.
 **/

function mysql_info( resource $link_identifier = NULL) {

  /**
   * Returns detailed information about the last query.
   **/
}

/**
 * Get the ID generated in the last query.
 **/

function PDO::lastInsertId( resource $link_identifier = NULL) {

  /**
   * Retrieves the ID generated for an AUTO_INCREMENT column by
   * the previous query (usually INSERT).
   **/
}

/**
 * List databases available on a MySQL server.
 **/

function mysql_list_dbs( resource $link_identifier = NULL) {

  /**
   * Returns a result pointer containing the databases available
   * from the current mysql daemon.
   **/
}

/**
 * List MySQL table fields.
 **/

function mysql_list_fields(
     string $database_name
  ,  string $table_name
  ,  resource $link_identifier = NULL
  ) {

  /**
   * Retrieves information about the given table name.
   *
   * This function is deprecated. It is preferable to use
   * mysql_query to issue an SQL SHOW COLUMNS FROM table [LIKE
   * 'name'] statement instead.
   **/
}

/**
 * List MySQL processes.
 **/

function mysql_list_processes( resource $link_identifier = NULL) {

  /**
   * Retrieves the current MySQL server threads.
   **/
}

/**
 * List tables in a MySQL database.
 **/

function mysql_list_tables(
     string $database
  ,  resource $link_identifier = NULL
  ) {

  /**
   * Retrieves a list of table names from a MySQL database.
   *
   * This function is deprecated. It is preferable to use
   * mysql_query to issue an SQL SHOW TABLES [FROM db_name] [LIKE
   * 'pattern'] statement instead.
   **/
}

/**
 * Get number of fields in result.
 **/

function PDOStatement::columnCount( resource $result) {

  /**
   * Retrieves the number of fields from a query.
   **/
}

/**
 * Get number of rows in result.
 **/

function PDOStatement::rowCount( resource $result) {

  /**
   * Retrieves the number of rows from a result set. This command
   * is only valid for statements like SELECT or SHOW that return
   * an actual result set. To retrieve the number of rows affected
   * by a INSERT, UPDATE, REPLACE or DELETE query, use
   * mysql_affected_rows.
   **/
}

/**
 * Open a persistent connection to a MySQL server.
 **/

function PDO::__construct(
     string $server = ini_get("mysql.default_host")
  ,  string $username = ini_get("mysql.default_user")
  ,  string $password = ini_get("mysql.default_password")
  ,  int $client_flags = 0
  ) {

  /**
   * Establishes a persistent connection to a MySQL server.
   *
   * mysql_pconnect acts very much like mysql_connect with two
   * major differences.
   *
   * First, when connecting, the function would first try to find
   * a (persistent) link that's already open with the same host,
   * username and password. If one is found, an identifier for it
   * will be returned instead of opening a new connection.
   *
   * Second, the connection to the SQL server will not be closed
   * when the execution of the script ends. Instead, the link will
   * remain open for future use (mysql_close will not close links
   * established by mysql_pconnect).
   *
   * This type of link is therefore called 'persistent'.
   **/
}

/**
 * Ping a server connection or reconnect if there is no.
 * connection.
 **/

function mysql_ping( resource $link_identifier = NULL) {

  /**
   * Checks whether or not the connection to the server is
   * working. If it has gone down, an automatic reconnection is
   * attempted. This function can be used by scripts that remain
   * idle for a long while, to check whether or not the server has
   * closed the connection and reconnect if necessary.
   *
   * Automatic reconnection is disabled by default in versions of
   * MySQL >= 5.0.3.
   **/
}

/**
 * Send a MySQL query.
 **/

function PDO::query(
     string $query
  ,  resource $link_identifier = NULL
  ) {

  /**
   * mysql_query sends a unique query (multiple queries are not
   * supported) to the currently active database on the server
   * that's associated with the specified link_identifier.
   **/
}

/**
 * Escapes special characters in a string for use in an SQL.
 * statement.
 **/

function PDO::quote(
     string $unescaped_string
  ,  resource $link_identifier = NULL
  ) {

  /**
   * Escapes special characters in the unescaped_string, taking
   * into account the current character set of the connection so
   * that it is safe to place it in a mysql_query. If binary data
   * is to be inserted, this function must be used.
   *
   * mysql_real_escape_string calls MySQL's library function
   * mysql_real_escape_string, which prepends backslashes to the
   * following characters: \x00, \n, \r, \, ', " and \x1a.
   *
   * This function must always (with few exceptions) be used to
   * make data safe before sending a query to MySQL.
   *
   * The character set must be set either at the server level, or
   * with the API function mysql_set_charset for it to affect
   * mysql_real_escape_string. See the concepts section on
   * character sets for more information.
   **/
}

/**
 * Get result data.
 **/

function PDOStatement::fetchColumn(
     resource $result
  ,  int $row
  ,  mixed $field = 0
  ) {

  /**
   * Retrieves the contents of one cell from a MySQL result set.
   *
   * When working on large result sets, you should consider using
   * one of the functions that fetch an entire row (specified
   * below). As these functions return the contents of multiple
   * cells in one function call, they're MUCH quicker than
   * mysql_result. Also, note that specifying a numeric offset for
   * the field argument is much quicker than specifying a fieldname
   * or tablename.fieldname argument.
   **/
}

/**
 * Select a MySQL database.
 **/

function PDO::__construct(
     string $database_name
  ,  resource $link_identifier = NULL
  ) {

  /**
   * Sets the current active database on the server that's
   * associated with the specified link identifier. Every
   * subsequent call to mysql_query will be made on the active
   * database.
   **/
}

/**
 * Sets the client character set.
 **/

function mysql_set_charset(
     string $charset
  ,  resource $link_identifier = NULL
  ) {

  /**
   * Sets the default character set for the current connection.
   **/
}

/**
 * Get current system status.
 **/

function PDO::getAttribute( resource $link_identifier = NULL) {

  /**
   * mysql_stat returns the current server status.
   **/
}

/**
 * Get table name of field.
 **/

function mysql_tablename( resource $result,  int $i) {

  /**
   * Retrieves the table name from a result.
   *
   * This function is deprecated. It is preferable to use
   * mysql_query to issue an SQL SHOW TABLES [FROM db_name] [LIKE
   * 'pattern'] statement instead.
   **/
}

/**
 * Return the current thread ID.
 **/

function mysql_thread_id( resource $link_identifier = NULL) {

  /**
   * Retrieves the current thread ID. If the connection is lost,
   * and a reconnect with mysql_ping is executed, the thread ID
   * will change. This means only retrieve the thread ID when
   * needed.
   **/
}

/**
 * Send an SQL query to MySQL without fetching and buffering the.
 * result rows.
 **/

function mysql_unbuffered_query(
     string $query
  ,  resource $link_identifier = NULL
  ) {

  /**
   * mysql_unbuffered_query sends the SQL query query to MySQL
   * without automatically fetching and buffering the result rows
   * as mysql_query does. This saves a considerable amount of
   * memory with SQL queries that produce large result sets, and
   * you can start working on the result set immediately after the
   * first row has been retrieved as you don't have to wait until
   * the complete SQL query has been performed. To use
   * mysql_unbuffered_query while multiple database connections are
   * open, you must specify the optional parameter link_identifier
   * to identify which connection you want to use.
   **/
}

/**
 * Bind prepared statement variables as parameters.
 **/

function mysql_xdevapi\expression( string $expression) {

  /**
   **/
}

/**
 * Connect to a MySQL server.
 **/

function mysql_xdevapi\getSession( string $uri) {

  /**
   * Connects to the MySQL server.
   **/
}

/**
 * &Alias; mysqli::__construct.
 **/

function mysqli::__construct() {

  /**
   * &info.function.alias; mysqli::__construct
   *
   * If mysqli exception mode is not enabled and a connection
   * fails, then mysqli_connect returns &false; instead of an
   * object. The mysqli_connect_error function can be used to fetch
   * the connection error.
   **/
}

/**
 * &Alias; mysqli_real_escape_string.
 **/

function () {

  /**
   * &info.function.alias; mysqli_real_escape_string.
   **/
}

/**
 * &Alias; mysqli_stmt_execute.
 **/

function () {

  /**
   * &info.function.alias; mysqli_stmt_execute.
   **/
}

/**
 * Returns client per-process statistics.
 **/

function mysqli_get_client_stats() {

  /**
   * Returns client per-process statistics.
   *
   * &mysqli.available.mysqlnd;
   **/
}

/**
 * Return information about open and cached links.
 **/

function mysqli_get_links_stats() {

  /**
   * mysqli_get_links_stats returns information about open and
   * cached MySQL links.
   **/
}

/**
 * &Alias; mysqli_driver->report_mode.
 **/

function () {

  /**
   * &info.function.alias; mysqli_driver->report_mode
   **/
}

/**
 * &Alias; mysqli_options.
 **/

function () {

  /**
   * &info.function.alias; mysqli_options.
   **/
}

/**
 * Check DNS records corresponding to a given Internet host name.
 * or IP address.
 **/

function checkdnsrr( string $hostname,  string $type = "MX") {

  /**
   * Searches DNS for records of type type corresponding to
   * hostname.
   **/
}

/**
 * Close connection to system logger.
 **/

function closelog() {

  /**
   * closelog closes the descriptor being used to write to the
   * system logger. The use of closelog is optional.
   **/
}

/**
 * &Alias; checkdnsrr.
 **/

function () {

  /**
   * &info.function.alias; checkdnsrr.
   **/
}

/**
 * &Alias; getmxrr.
 **/

function () {

  /**
   * &info.function.alias; getmxrr.
   **/
}

/**
 * Fetch DNS Resource Records associated with a hostname.
 **/

function dns_get_record(
     string $hostname
  ,  int $type = DNS_ANY
  ,  array &$authoritative_name_servers = null
  ,  array &$additional_records = null
  ,  bool $raw = false
  ) {

  /**
   * Fetch DNS Resource Records associated with the given
   * hostname.
   **/
}

/**
 * Open Internet or Unix domain socket connection.
 **/

function fsockopen(
     string $hostname
  ,  int $port = -1
  ,  int &$error_code = null
  ,  string &$error_message = null
  , $timeout = null
  ) {

  /**
   * Initiates a socket connection to the resource specified by
   * hostname.
   *
   * PHP supports targets in the Internet and Unix domains as
   * described in . A list of supported transports can also be
   * retrieved using stream_get_transports.
   *
   * The socket will by default be opened in blocking mode. You
   * can switch it to non-blocking mode by using
   * stream_set_blocking.
   *
   * The function stream_socket_client is similar but provides a
   * richer set of options, including non-blocking connection and
   * the ability to provide a stream context.
   **/
}

/**
 * Get the Internet host name corresponding to a given IP.
 * address.
 **/

function gethostbyaddr( string $ip) {

  /**
   * Returns the host name of the Internet host specified by ip.
   **/
}

/**
 * Get the IPv4 address corresponding to a given Internet host.
 * name.
 **/

function gethostbyname( string $hostname) {

  /**
   * Returns the IPv4 address of the Internet host specified by
   * hostname.
   **/
}

/**
 * Get a list of IPv4 addresses corresponding to a given.
 * Internet host name.
 **/

function gethostbynamel( string $hostname) {

  /**
   * Returns a list of IPv4 addresses to which the Internet host
   * specified by hostname resolves.
   **/
}

/**
 * Gets the host name.
 **/

function gethostname() {

  /**
   * gethostname gets the standard host name for the local
   * machine.
   **/
}

/**
 * Get MX records corresponding to a given Internet host name.
 **/

function getmxrr(
     string $hostname
  ,  array &$hosts
  ,  array &$weights = null
  ) {

  /**
   * Searches DNS for MX records corresponding to hostname.
   **/
}

/**
 * Get protocol number associated with protocol name.
 **/

function getprotobyname( string $protocol) {

  /**
   * getprotobyname returns the protocol number associated with
   * the protocol protocol as per /etc/protocols.
   **/
}

/**
 * Get protocol name associated with protocol number.
 **/

function getprotobynumber( int $protocol) {

  /**
   * getprotobynumber returns the protocol name associated with
   * protocol protocol as per /etc/protocols.
   **/
}

/**
 * Get port number associated with an Internet service and.
 * protocol.
 **/

function getservbyname( string $service,  string $protocol) {

  /**
   * getservbyname returns the Internet port which corresponds to
   * service for the specified protocol as per /etc/services.
   **/
}

/**
 * Get Internet service which corresponds to port and protocol.
 **/

function getservbyport( int $port,  string $protocol) {

  /**
   * getservbyport returns the Internet service associated with
   * port for the specified protocol as per /etc/services.
   **/
}

/**
 * Call a header function.
 **/

function header_register_callback( callable $callback) {

  /**
   * Registers a function that will be called when PHP starts
   * sending output.
   *
   * The callback is executed just after PHP prepares all headers
   * to be sent, and before any other output is sent, creating a
   * window to manipulate the outgoing headers before being sent.
   **/
}

/**
 * Remove previously set headers.
 **/

function header_remove($name = null) {

  /**
   * Removes an HTTP header previously set using header.
   **/
}

/**
 * Send a raw HTTP header.
 **/

function header(
     string $header
  ,  bool $replace = true
  ,  int $response_code = 0
  ) {

  /**
   * header is used to send a raw HTTP header. See the HTTP/1.1
   * specification for more information on HTTP headers.
   *
   * Remember that header must be called before any actual output
   * is sent, either by normal HTML tags, blank lines in a file, or
   * from PHP. It is a very common error to read code with include,
   * or require, functions, or another file access function, and
   * have spaces or empty lines that are output before header is
   * called. The same problem exists when using a single PHP/HTML
   * file. ]]>
   **/
}

/**
 * Returns a list of response headers sent (or ready to send).
 **/

function headers_list() {

  /**
   * headers_list will return a list of headers to be sent to the
   * browser / client. To determine whether or not these headers
   * have been sent yet, use headers_sent.
   **/
}

/**
 * Checks if or where headers have been sent.
 **/

function headers_sent( string &$filename = null,  int &$line = null) {

  /**
   * Checks if or where headers have been sent.
   *
   * You can't add any more header lines using the header function
   * once the header block has already been sent. Using this
   * function you can at least prevent getting HTTP header related
   * error messages. Another option is to use Output Buffering.
   **/
}

/**
 * Get or Set the HTTP response code.
 **/

function http_response_code( int $response_code = 0) {

  /**
   * Gets or sets the HTTP response status code.
   **/
}

/**
 * Converts a packed internet address to a human readable.
 * representation.
 **/

function inet_ntop( string $ip) {

  /**
   **/
}

/**
 * Converts a human readable IP address to its packed in_addr.
 * representation.
 **/

function inet_pton( string $ip) {

  /**
   * This function converts a human readable IPv4 or IPv6 address
   * (if PHP was built with IPv6 support enabled) into an address
   * family appropriate 32bit or 128bit binary structure.
   **/
}

/**
 * Converts a string containing an (IPv4) Internet Protocol.
 * dotted address into a long integer.
 **/

function ip2long( string $ip) {

  /**
   * The function ip2long generates a long integer representation
   * of IPv4 Internet network address from its Internet standard
   * format (dotted string) representation.
   *
   * ip2long will also work with non-complete IP addresses. Read
   * &url.ip2long.tech; for more info.
   **/
}

/**
 * Converts a long integer address into a string in (IPv4).
 * Internet standard dotted format.
 **/

function long2ip( int $ip) {

  /**
   * The function long2ip generates an Internet address in dotted
   * format (i.e.: aaa.bbb.ccc.ddd) from the long integer
   * representation.
   **/
}

/**
 * Get network interfaces.
 **/

function net_get_interfaces() {

  /**
   * Returns an enumeration of network interfaces (adapters) on
   * the local machine.
   **/
}

/**
 * Open connection to system logger.
 **/

function openlog( string $prefix,  int $flags,  int $facility) {

  /**
   * openlog opens a connection to the system logger for a
   * program.
   *
   * The use of openlog is optional. It will automatically be
   * called by syslog if necessary, in which case prefix will
   * default to &false;.
   **/
}

/**
 * Open persistent Internet or Unix domain socket connection.
 **/

function pfsockopen(
     string $hostname
  ,  int $port = -1
  ,  int &$error_code = null
  ,  string &$error_message = null
  , $timeout = null
  ) {

  /**
   * This function behaves exactly as fsockopen with the
   * difference that the connection is not closed after the script
   * finishes. It is the persistent version of fsockopen.
   **/
}

/**
 * Send a cookie.
 **/

function setcookie(
     string $name
  ,  string $value = ""
  ,  int $expires_or_options = 0
  ,  string $path = ""
  ,  string $domain = ""
  ,  bool $secure = false
  ,  bool $httponly = false
  ) {

  /**
   * Alternative signature available as of PHP 7.3.0 (not supported
   * with named parameters):
   *
   * setcookie defines a cookie to be sent along with the rest of
   * the HTTP headers. Like other headers, cookies must be sent
   * before any output from your script (this is a protocol
   * restriction). This requires that you place calls to this
   * function prior to any output, including <html> and <head> tags
   * as well as any whitespace.
   *
   * Once the cookies have been set, they can be accessed on the
   * next page load with the $_COOKIE array. Cookie values may also
   * exist in $_REQUEST.
   **/
}

/**
 * Send a cookie without urlencoding the cookie value.
 **/

function setrawcookie(
     string $name
  ,  string $value
  ,  int $expires_or_options = 0
  ,  string $path
  ,  string $domain
  ,  bool $secure = false
  ,  bool $httponly = false
  ) {

  /**
   * Alternative signature available as of PHP 7.3.0 (not supported
   * with named parameters):
   *
   * setrawcookie is exactly the same as setcookie except that the
   * cookie value will not be automatically urlencoded when sent to
   * the browser.
   **/
}

/**
 * &Alias; stream_get_meta_data.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; stream_set_blocking.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; stream_set_timeout.
 **/

function () {

  /**
   **/
}

/**
 * Generate a system log message.
 **/

function syslog( int $priority,  string $message) {

  /**
   * syslog generates a log message that will be distributed by
   * the system logger.
   *
   * For information on setting up a user defined log handler, see
   * the syslog.conf 5 Unix manual page. More information on the
   * syslog facilities and option can be found in the man pages for
   * syslog 3 on Unix machines.
   **/
}

/**
 * Generate a Signature Base String.
 **/

function oauth_get_sbs(
     string $http_method
  ,  string $uri
  ,  array $request_parameters
  ) {

  /**
   * Generates a Signature Base String according to pecl/oauth.
   **/
}

/**
 * Encode a URI to RFC 3986.
 **/

function oauth_urlencode( string $uri) {

  /**
   * Encodes a URI to RFC 3986.
   **/
}

/**
 * Binds a PHP array to an Oracle PL/SQL array parameter.
 **/

function oci_bind_array_by_name(
     resource $statement
  ,  string $param
  ,  array &$var
  ,  int $max_array_length
  ,  int $max_item_length = -1
  ,  int $type = SQLT_AFC
  ) {

  /**
   * Binds the PHP array var to the Oracle placeholder param,
   * which points to an Oracle PL/SQL array. Whether it will be
   * used for input or output will be determined at run-time.
   **/
}

/**
 * Binds a PHP variable to an Oracle placeholder.
 **/

function oci_bind_by_name(
     resource $statement
  ,  string $param
  ,  mixed &$var
  ,  int $max_length = -1
  ,  int $type = 0
  ) {

  /**
   * Binds a PHP variable var to the Oracle bind variable
   * placeholder param. Binding is important for Oracle database
   * performance and also as a way to avoid SQL Injection security
   * issues.
   *
   * Binding allows the database to reuse the statement context
   * and caches from previous executions of the statement, even if
   * another user or process originally executed it. Binding
   * reduces SQL Injection concerns because the data associated
   * with a bind variable is never treated as part of the SQL
   * statement. It does not need quoting or escaping.
   *
   * PHP variables that have been bound can be changed and the
   * statement re-executed without needing to re-parse the
   * statement or re-bind.
   *
   * In Oracle, bind variables are commonly divided into IN binds
   * for values that are passed into the database, and OUT binds
   * for values that are returned to PHP. A bind variable may be
   * both IN and OUT. Whether a bind variable will be used for
   * input or output is determined at run-time.
   *
   * You must specify max_length when using an OUT bind so that
   * PHP allocates enough memory to hold the returned value.
   *
   * For IN binds it is recommended to set the max_length length
   * if the statement is re-executed multiple times with different
   * values for the PHP variable. Otherwise Oracle may truncate
   * data to the length of the initial PHP variable value. If you
   * don't know what the maximum length will be, then re-call
   * oci_bind_by_name with the current data size prior to each
   * oci_execute call. Binding an unnecessarily large length will
   * have an impact on process memory in the database.
   *
   * A bind call tells Oracle which memory address to read data
   * from. For IN binds that address needs to contain valid data
   * when oci_execute is called. This means that the variable bound
   * must remain in scope until execution. If it doesn't,
   * unexpected results or errors such as "ORA-01460: unimplemented
   * or unreasonable conversion requested" may occur. For OUT binds
   * one symptom is no value being set in the PHP variable.
   *
   * For a statement that is repeatedly executed, binding values
   * that never change may reduce the ability of the Oracle
   * optimizer to choose the best statement execution plan. Long
   * running statements that are rarely re-executed may not benefit
   * from binding. However in both cases, binding might be safer
   * than joining strings into a SQL statement, as this can be a
   * security risk if unfiltered user text is concatenated.
   **/
}

/**
 * Cancels reading from cursor.
 **/

function oci_cancel( resource $statement) {

  /**
   * Invalidates a cursor, freeing all associated resources and
   * cancels the ability to read from it.
   **/
}

/**
 * Returns the Oracle client library version.
 **/

function oci_client_version() {

  /**
   * Returns a string containing the version number of the Oracle
   * C client library that PHP is linked with.
   **/
}

/**
 * Closes an Oracle connection.
 **/

function oci_close( resource $connection) {

  /**
   * Unsets connection. The underlying database connection is
   * closed if no other resources are using it and if it was
   * created with oci_connect or oci_new_connect.
   *
   * It is recommended to close connections that are no longer
   * needed because this makes database resources available for
   * other users.
   **/
}

/**
 * Commits the outstanding database transaction.
 **/

function oci_commit( resource $connection) {

  /**
   * Commits the outstanding transaction for the Oracle
   * connection. A commit ends the current transaction and makes
   * permanent all changes. It releases all locks held.
   *
   * A transaction begins when the first SQL statement that
   * changes data is executed with oci_execute using the
   * OCI_NO_AUTO_COMMIT flag. Further data changes made by other
   * statements become part of the same transaction. Data changes
   * made in a transaction are temporary until the transaction is
   * committed or rolled back. Other users of the database will not
   * see the changes until they are committed.
   *
   * When inserting or updating data, using transactions is
   * recommended for relational data consistency and for
   * performance reasons.
   **/
}

/**
 * Connect to an Oracle database.
 **/

function oci_connect(
     string $username
  ,  string $password
  , $connection_string = null
  ,  string $encoding = ""
  ,  int $session_mode = OCI_DEFAULT
  ) {

  /**
   * Returns a connection identifier needed for most other OCI8
   * operations.
   *
   * For performance, most applications should use persistent
   * connections with oci_pconnect instead of oci_connect. See
   * Connection Handling for general information on connection
   * management and connection pooling.
   *
   * The second and subsequent calls to oci_connect with the same
   * parameters will return the connection handle returned from the
   * first call. This means that transactions in one handle are
   * also in the other handles, because they use the same
   * underlying database connection. If two handles need to be
   * transactionally isolated from each other, use oci_new_connect
   * instead.
   **/
}

/**
 * Associates a PHP variable with a column for query fetches.
 **/

function oci_define_by_name(
     resource $statement
  ,  string $column
  ,  mixed &$var
  ,  int $type = 0
  ) {

  /**
   * Associates a PHP variable with a column for query fetches
   * using oci_fetch.
   *
   * The oci_define_by_name call must occur before executing
   * oci_execute.
   **/
}

/**
 * Returns the last error found.
 **/

function oci_error($connection_or_statement = null) {

  /**
   * Returns the last error found.
   *
   * The function should be called immediately after an error
   * occurs. Errors are cleared by a successful statement.
   **/
}

/**
 * Executes a statement.
 **/

function oci_execute(
     resource $statement
  ,  int $mode = OCI_COMMIT_ON_SUCCESS
  ) {

  /**
   * Executes a statement previously returned from oci_parse.
   *
   * After execution, statements like INSERT will have data
   * committed to the database by default. For statements like
   * SELECT, execution performs the logic of the query. Query
   * results can subsequently be fetched in PHP with functions like
   * oci_fetch_array.
   *
   * Each parsed statement may be executed multiple times, saving
   * the cost of re-parsing. This is commonly used for INSERT
   * statements when data is bound with oci_bind_by_name.
   **/
}

/**
 * Fetches multiple rows from a query into a two-dimensional.
 * array.
 **/

function oci_fetch_all(
     resource $statement
  ,  array &$output
  ,  int $offset = 0
  ,  int $limit = -1
  ,  int $flags = OCI_FETCHSTATEMENT_BY_COLUMN | OCI_ASSOC
  ) {

  /**
   * Fetches multiple rows from a query into a two-dimensional
   * array. By default, all rows are returned.
   *
   * This function can be called only once for each query executed
   * with oci_execute.
   **/
}

/**
 * Returns the next row from a query as an associative or numeric.
 * array.
 **/

function oci_fetch_array(
     resource $statement
  ,  int $mode = OCI_BOTH | OCI_RETURN_NULLS
  ) {

  /**
   * Returns an array containing the next result-set row of a
   * query. Each array entry corresponds to a column of the row.
   * This function is typically called in a loop until it returns
   * &false;, indicating no more rows exist.
   *
   * If statement corresponds to a PL/SQL block returning Oracle
   * Database Implicit Result Sets, then rows from all sets are
   * consecutively fetched. If statement is returned by
   * oci_get_implicit_resultset, then only the subset of rows for
   * one child query are returned.
   **/
}

/**
 * Returns the next row from a query as an associative array.
 **/

function oci_fetch_assoc( resource $statement) {

  /**
   * Returns an associative array containing the next result-set
   * row of a query. Each array entry corresponds to a column of
   * the row. This function is typically called in a loop until it
   * returns &false;, indicating no more rows exist.
   *
   * Calling oci_fetch_assoc is identical to calling
   * oci_fetch_array with OCI_ASSOC + OCI_RETURN_NULLS.
   **/
}

/**
 * Returns the next row from a query as an object.
 **/

function oci_fetch_object(
     resource $statement
  ,  int $mode = OCI_ASSOC | OCI_RETURN_NULLS
  ) {

  /**
   * Returns an object containing the next result-set row of a
   * query. Each attribute of the object corresponds to a column of
   * the row. This function is typically called in a loop until it
   * returns &false;, indicating no more rows exist.
   **/
}

/**
 * Returns the next row from a query as a numeric array.
 **/

function oci_fetch_row( resource $statement) {

  /**
   * Returns a numerically indexed array containing the next
   * result-set row of a query. Each array entry corresponds to a
   * column of the row. This function is typically called in a loop
   * until it returns &false;, indicating no more rows exist.
   *
   * Calling oci_fetch_row is identical to calling oci_fetch_array
   * with OCI_NUM + OCI_RETURN_NULLS.
   **/
}

/**
 * Fetches the next row from a query into internal buffers.
 **/

function oci_fetch( resource $statement) {

  /**
   * Fetches the next row from a query into internal buffers
   * accessible either with oci_result, or by using variables
   * previously defined with oci_define_by_name.
   *
   * See oci_fetch_array for general information about fetching
   * data.
   **/
}

/**
 * Checks if a field in the currently fetched row is &null;.
 **/

function oci_field_is_null( resource $statement, $column) {

  /**
   * Checks if the given column from the current row of statement
   * is &null;.
   **/
}

/**
 * Returns the name of a field from the statement.
 **/

function oci_field_name( resource $statement, $column) {

  /**
   * Returns the name of the column.
   **/
}

/**
 * Tell the precision of a field.
 **/

function oci_field_precision( resource $statement, $column) {

  /**
   * Returns precision of the column.
   *
   * For FLOAT columns, precision is nonzero and scale is -127. If
   * precision is 0, then column is NUMBER. Else it's
   * NUMBER(precision, scale).
   **/
}

/**
 * Tell the scale of the field.
 **/

function oci_field_scale( resource $statement, $column) {

  /**
   * Returns the scale of the column with column index.
   *
   * For FLOAT columns, precision is nonzero and scale is -127. If
   * precision is 0, then column is NUMBER. Else it's
   * NUMBER(precision, scale).
   **/
}

/**
 * Returns field's size.
 **/

function oci_field_size( resource $statement, $column) {

  /**
   * Returns the size of a column.
   **/
}

/**
 * Tell the raw Oracle data type of the field.
 **/

function oci_field_type_raw( resource $statement, $column) {

  /**
   * Returns Oracle's raw "SQLT" data type of the column.
   *
   * If you want a field's type name, then use oci_field_type
   * instead.
   **/
}

/**
 * Returns a field's data type name.
 **/

function oci_field_type( resource $statement, $column) {

  /**
   * Returns a field's data type name.
   **/
}

/**
 * Frees a descriptor.
 **/

function oci_free_descriptor( OCILob $lob) {

  /**
   * Frees a descriptor allocated by oci_new_descriptor.
   **/
}

/**
 * Frees all resources associated with statement or cursor.
 **/

function oci_free_statement( resource $statement) {

  /**
   * Frees resources associated with Oracle's cursor or statement,
   * which was received from as a result of oci_parse or obtained
   * from Oracle.
   **/
}

/**
 * Returns the next child statement resource from a parent.
 * statement resource that has Oracle Database Implicit Result.
 * Sets.
 **/

function oci_get_implicit_resultset( resource $statement) {

  /**
   * Used to fetch consectutive sets of query results after the
   * execution of a stored or anonymous Oracle PL/SQL block where
   * that block returns query results with the Oracle Database 12
   * (or later) DBMS_SQL.RETURN_RESULT PL/SQL function. This allows
   * PL/SQL blocks to easily return query results.
   *
   * The child statement can be used with any of the OCI8 fetching
   * functions: oci_fetch, oci_fetch_all, oci_fetch_array,
   * oci_fetch_object, oci_fetch_assoc or oci_fetch_row
   *
   * Child statements inherit their parent statement's prefetch
   * value, or it can be explicitly set with oci_set_prefetch.
   **/
}

/**
 * Copies large object.
 **/

function oci_lob_copy( OCILob $to,  OCILob $from, $length = null) {

  /**
   * Copies a large object or a part of a large object to another
   * large object. Old LOB-recipient data will be overwritten.
   *
   * If you need to copy a particular part of a LOB to a
   * particular position of a LOB, use OCILob::seek to move LOB
   * internal pointers.
   **/
}

/**
 * Compares two LOB/FILE locators for equality.
 **/

function oci_lob_is_equal( OCILob $lob1,  OCILob $lob2) {

  /**
   * Compares two LOB/FILE locators.
   **/
}

/**
 * Allocates new collection object.
 **/

function oci_new_collection(
     resource $connection
  ,  string $type_name
  , $schema = null
  ) {

  /**
   * Allocates a new collection object.
   **/
}

/**
 * Connect to the Oracle server using a unique connection.
 **/

function oci_new_connect(
     string $username
  ,  string $password
  , $connection_string = null
  ,  string $encoding = ""
  ,  int $session_mode = OCI_DEFAULT
  ) {

  /**
   * Establishes a new connection to an Oracle server and logs on.
   *
   * Unlike oci_connect and oci_pconnect, oci_new_connect does not
   * cache connections and will always return a brand-new freshly
   * opened connection handle. This is useful if your application
   * needs transactional isolation between two sets of queries.
   **/
}

/**
 * Allocates and returns a new cursor (statement handle).
 **/

function oci_new_cursor( resource $connection) {

  /**
   * Allocates a new statement handle on the specified connection.
   **/
}

/**
 * Initializes a new empty LOB or FILE descriptor.
 **/

function oci_new_descriptor(
     resource $connection
  ,  int $type = OCI_DTYPE_LOB
  ) {

  /**
   * Allocates resources to hold descriptor or LOB locator.
   **/
}

/**
 * Returns the number of result columns in a statement.
 **/

function oci_num_fields( resource $statement) {

  /**
   * Gets the number of columns in the given statement.
   **/
}

/**
 * Returns number of rows affected during statement execution.
 **/

function oci_num_rows( resource $statement) {

  /**
   * Gets the number of rows affected during statement execution.
   **/
}

/**
 * Prepares an Oracle statement for execution.
 **/

function oci_parse( resource $connection,  string $sql) {

  /**
   * Prepares sql using connection and returns the statement
   * identifier, which can be used with oci_bind_by_name,
   * oci_execute and other functions.
   *
   * Statement identifiers can be freed with oci_free_statement or
   * by setting the variable to &null;.
   **/
}

/**
 * Changes password of Oracle's user.
 **/

function oci_password_change(
     resource $connection
  ,  string $username
  ,  string $old_password
  ,  string $new_password
  ) {

  /**
   * Changes password for user with username.
   *
   * The oci_password_change function is most useful for PHP
   * command-line scripts, or when non-persistent connections are
   * used throughout the PHP application.
   **/
}

/**
 * Connect to an Oracle database using a persistent connection.
 **/

function oci_pconnect(
     string $username
  ,  string $password
  , $connection_string = null
  ,  string $encoding = ""
  ,  int $session_mode = OCI_DEFAULT
  ) {

  /**
   * Creates a persistent connection to an Oracle server and logs
   * on.
   *
   * Persistent connections are cached and re-used between
   * requests, resulting in reduced overhead on each page load; a
   * typical PHP application will have a single persistent
   * connection open against an Oracle server per Apache child
   * process (or PHP FPM process). See the OCI8 Connection Handling
   * and Connection Pooling section for more information.
   **/
}

/**
 * Register a user-defined callback function for Oracle Database.
 * TAF.
 **/

function oci_register_taf_callback( resource $connection, $callback) {

  /**
   * Registers a user-defined callback function to connection. If
   * connection fails due to instance or network failure, the
   * registered callback function will be invoked for several times
   * during failover. See OCI8 Transparent Application Failover
   * (TAF) Support for information.
   *
   * When oci_register_taf_callback is called multiple times, each
   * registration overwrites the previous one.
   *
   * Use oci_unregister_taf_callback to explicitly unregister a
   * user-defined callback.
   *
   * TAF callback registration will NOT be saved across persistent
   * connections, therefore the callback needs to be re-registered
   * for a new persistent connection.
   **/
}

/**
 * Returns field's value from the fetched row.
 **/

function oci_result( resource $statement, $column) {

  /**
   * Returns the data from column in the current row, fetched by
   * oci_fetch.
   **/
}

/**
 * Rolls back the outstanding database transaction.
 **/

function oci_rollback( resource $connection) {

  /**
   * Reverts all uncommitted changes for the Oracle connection and
   * ends the transaction. It releases all locks held. All Oracle
   * SAVEPOINTS are erased.
   *
   * A transaction begins when the first SQL statement that
   * changes data is executed with oci_execute using the
   * OCI_NO_AUTO_COMMIT flag. Further data changes made by other
   * statements become part of the same transaction. Data changes
   * made in a transaction are temporary until the transaction is
   * committed or rolled back. Other users of the database will not
   * see the changes until they are committed.
   *
   * When inserting or updating data, using transactions is
   * recommended for relational data consistency and for
   * performance reasons.
   **/
}

/**
 * Returns the Oracle Database version.
 **/

function oci_server_version( resource $connection) {

  /**
   * Returns a string with the Oracle Database version and
   * available options
   **/
}

/**
 * Sets the action name.
 **/

function oci_set_action( resource $connection,  string $action) {

  /**
   * Sets the action name for Oracle tracing.
   *
   * The action name is registered with the database when the next
   * 'round-trip' from PHP to the database occurs, typically when
   * an SQL statement is executed.
   *
   * The action name can subsequently be queried from database
   * administration views such as V$SESSION. It can be used for
   * tracing and monitoring such as with V$SQLAREA and
   * DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE.
   *
   * The value may be retained across persistent connections.
   **/
}

/**
 * Sets a millisecond timeout for database calls.
 **/

function oci_set_call_timeout( resource $connection,  int $timeout) {

  /**
   * Sets a timeout limiting the maximum time a database
   * round-trip using this connection may take.
   *
   * Each OCI8 operation may make zero or more calls to Oracle's
   * client library. These internal calls may then may make zero or
   * more round-trips to Oracle Database. If any one of those
   * round-trips takes more than time_out milliseconds, then the
   * operation is cancelled and an error is returned to the
   * application.
   *
   * The time_out value applies to each round-trip individually,
   * not to the sum of all round-trips. Time spent processing in
   * PHP OCI8 before or after the completion of each round-trip is
   * not counted.
   *
   * When a call is interrupted, Oracle will attempt to clean up
   * the connection for reuse. This operation is allowed to run for
   * another time_out period. Depending on the outcome of the
   * cleanup, the connection may or may not be reusable.
   *
   * When persistent connections are used, the timeout value will
   * be retained across PHP requests.
   *
   * The oci_set_call_timeout function is available when OCI8 uses
   * Oracle 18 (or later) Client libraries.
   **/
}

/**
 * Sets the client identifier.
 **/

function oci_set_client_identifier(
     resource $connection
  ,  string $client_id
  ) {

  /**
   * Sets the client identifier used by various database
   * components to identify lightweight application users who
   * authenticate as the same database user.
   *
   * The client identifier is registered with the database when
   * the next 'round-trip' from PHP to the database occurs,
   * typically when an SQL statement is executed.
   *
   * The identifier can subsequently be queried, for example with
   * SELECT SYS_CONTEXT('USERENV','CLIENT_IDENTIFIER') FROM DUAL.
   * Database administration views such as V$SESSION will also
   * contain the value. It can be used with
   * DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE for tracing and can also
   * be used for auditing.
   *
   * The value may be retained across page requests that use the
   * same persistent connection.
   **/
}

/**
 * Sets the client information.
 **/

function oci_set_client_info(
     resource $connection
  ,  string $client_info
  ) {

  /**
   * Sets the client information for Oracle tracing.
   *
   * The client information is registered with the database when
   * the next 'round-trip' from PHP to the database occurs,
   * typically when an SQL statement is executed.
   *
   * The client information can subsequently be queried from
   * database administration views such as V$SESSION.
   *
   * The value may be retained across persistent connections.
   **/
}

/**
 * Sets the database operation.
 **/

function oci_set_db_operation( resource $connection,  string $action) {

  /**
   * Sets the DBOP for Oracle tracing.
   *
   * The database operation name is registered with the database
   * when the next 'round-trip' from PHP to the database occurs,
   * typically when a SQL statement is executed.
   *
   * The database operation can subsequently be queried from
   * database administration views such as V$SQL_MONITOR.
   *
   * The oci_set_db_operation function is available when OCI8 uses
   * Oracle 12 (or later) Client libraries and Oracle Database 12
   * (or later).
   **/
}

/**
 * Sets the database edition.
 **/

function oci_set_edition( string $edition) {

  /**
   * Sets the database "edition" of objects to be used by a
   * subsequent connections.
   *
   * Oracle Editions allow concurrent versions of applications to
   * run using the same schema and object names. This is useful for
   * upgrading live systems.
   *
   * Call oci_set_edition before calling oci_connect, oci_pconnect
   * or oci_new_connect.
   *
   * If an edition is set that is not valid in the database,
   * connection will fail even if oci_set_edition returns success.
   *
   * When using persistent connections, if a connection with the
   * requested edition setting already exists, it is reused.
   * Otherwise, a different persistent connection is created
   **/
}

/**
 * Sets the module name.
 **/

function oci_set_module_name( resource $connection,  string $name) {

  /**
   * Sets the module name for Oracle tracing.
   *
   * The module name is registered with the database when the next
   * 'round-trip' from PHP to the database occurs, typically when
   * an SQL statement is executed.
   *
   * The name can subsequently be queried from database
   * administration views such as V$SESSION. It can be used for
   * tracing and monitoring such as with V$SQLAREA and
   * DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE.
   *
   * The value may be retained across persistent connections.
   **/
}

/**
 * Sets the amount of data prefetched for each CLOB or BLOB..
 **/

function oci_set_prefetch_lob(
     resource $statement
  ,  int $prefetch_lob_size
  ) {

  /**
   * Sets the internal buffer size used to fetch each CLOB or BLOB
   * value when the implementation gets the internal Oracle LOB
   * locator from the database after a successful query call to
   * oci_execute and for each subsequent internal fetch request to
   * the database. Increasing this value can improve the
   * performance of fetching smaller LOBs by reducing round-trips
   * between PHP and the database. Memory usage will change.
   *
   * The value affects LOBs returned as OCILob instances and also
   * those returned using OCI_RETURN_LOBS.
   *
   * Call oci_set_prefetch_lob before calling oci_execute. If it
   * is not called, the value of oci8.prefetch_lob_size is used.
   *
   * The LOB prefetch value should only be set with Oracle
   * Database 12.2 or later.
   **/
}

/**
 * Sets number of rows to be prefetched by queries.
 **/

function oci_set_prefetch( resource $statement,  int $rows) {

  /**
   * Sets the number of rows to be buffered by the Oracle Client
   * libraries after a successful query call to oci_execute and for
   * each subsequent internal fetch request to the database. For
   * queries returning a large number of rows, performance can be
   * significantly improved by increasing the prefetch count above
   * the default oci8.default_prefetch value.
   *
   * Prefetching is Oracle's efficient way of returning more than
   * one data row from the database in each network request. This
   * can result in better network and CPU utilization. The
   * buffering of rows is internal to OCI8 and the behavior of OCI8
   * fetching functions is unchanged regardless of the prefetch
   * count. For example, oci_fetch_row will always return one row.
   * The prefetch buffer is per-statement and is not used by
   * re-executed statements or by other connections.
   *
   * Call oci_set_prefetch before calling oci_execute.
   *
   * A tuning goal is to set the prefetch value to a reasonable
   * size for the network and database to handle. For queries
   * returning a very large number of rows, overall system
   * efficiency might be better if rows are retrieved from the
   * database in several chunks (i.e set the prefetch value smaller
   * than the number of rows). This allows the database to handle
   * other users' statements while the PHP script is processing the
   * current set of rows.
   *
   * Query prefetching was introduced in Oracle 8i. REF CURSOR
   * prefetching was introduced in Oracle 11gR2 and occurs when PHP
   * is linked with Oracle 11gR2 (or later) Client libraries.
   * Nested cursor prefetching was introduced in Oracle 11gR2 and
   * requires both the Oracle Client libraries and the database to
   * be version 11gR2 or greater.
   *
   * Prefetching is not supported when queries contain LONG or LOB
   * columns. The prefetch value is ignored and single-row fetches
   * will be used in all the situations when prefetching is not
   * supported.
   *
   * When using Oracle Database 12c, the prefetch value set by PHP
   * can be overridden by Oracle's client oraaccess.xml
   * configuration file. Refer to Oracle documentation for more
   * detail.
   **/
}

/**
 * Returns the type of a statement.
 **/

function oci_statement_type( resource $statement) {

  /**
   * Returns a keyword identifying the type of the OCI8 statement.
   **/
}

/**
 * Unregister a user-defined callback function for Oracle.
 * Database TAF.
 **/

function oci_unregister_taf_callback( resource $connection) {

  /**
   * Unregister the user-defined callback function registered to
   * connection by oci_register_taf_callback. See OCI8 Transparent
   * Application Failover (TAF) Support for information.
   **/
}

/**
 * Compiles and caches a PHP script without executing it.
 **/

function opcache_compile_file( string $filename) {

  /**
   * This function compiles a PHP script and adds it to the opcode
   * cache without executing it. This can be used to prime the
   * cache after a Web server restart by pre-caching files that
   * will be included in later requests.
   **/
}

/**
 * Get configuration information about the cache.
 **/

function opcache_get_configuration() {

  /**
   * This function returns configuration information about the
   * cache instance
   **/
}

/**
 * Get status information about the cache.
 **/

function opcache_get_status( bool $include_scripts = true) {

  /**
   * This function returns state information about the in-memory
   * cache instance. It will not return any information about the
   * file cache.
   **/
}

/**
 * Invalidates a cached script.
 **/

function opcache_invalidate( string $filename,  bool $force = false) {

  /**
   * This function invalidates a particular script from the opcode
   * cache. If force is unset or &false;, the script will only be
   * invalidated if the modification time of the script is newer
   * than the cached opcodes. This function only invalidates
   * in-memory cache and not file cache.
   **/
}

/**
 * Tells whether a script is cached in OPCache.
 **/

function opcache_is_script_cached( string $filename) {

  /**
   * This function checks if a PHP script has been cached in
   * OPCache. This can be used to more easily detect the "warming"
   * of the cache for a particular script. This function only
   * checks in-memory cache, not file cache.
   **/
}

/**
 * Resets the contents of the opcode cache.
 **/

function opcache_reset() {

  /**
   * This function resets the entire opcode cache. After calling
   * opcache_reset, all scripts will be reloaded and reparsed the
   * next time they are hit. This function only resets in-memory
   * cache, not the file cache.
   **/
}

/**
 * Generate OpenAL buffer.
 **/

function openal_buffer_create() {

  /**
   **/
}

/**
 * Load a buffer with data.
 **/

function openal_buffer_data(
     resource $buffer
  ,  int $format
  ,  string $data
  ,  int $freq
  ) {

  /**
   **/
}

/**
 * Destroys an OpenAL buffer.
 **/

function openal_buffer_destroy( resource $buffer) {

  /**
   **/
}

/**
 * Retrieve an OpenAL buffer property.
 **/

function openal_buffer_get( resource $buffer,  int $property) {

  /**
   **/
}

/**
 * Load a .wav file into a buffer.
 **/

function openal_buffer_loadwav( resource $buffer,  string $wavfile) {

  /**
   **/
}

/**
 * Create an audio processing context.
 **/

function openal_context_create( resource $device) {

  /**
   **/
}

/**
 * Make the specified context current.
 **/

function openal_context_current( resource $context) {

  /**
   **/
}

/**
 * Destroys a context.
 **/

function openal_context_destroy( resource $context) {

  /**
   **/
}

/**
 * Process the specified context.
 **/

function openal_context_process( resource $context) {

  /**
   **/
}

/**
 * Suspend the specified context.
 **/

function openal_context_suspend( resource $context) {

  /**
   **/
}

/**
 * Close an OpenAL device.
 **/

function openal_device_close( resource $device) {

  /**
   **/
}

/**
 * Initialize the OpenAL audio layer.
 **/

function openal_device_open( string $device_desc) {

  /**
   **/
}

/**
 * Retrieve a listener property.
 **/

function openal_listener_get( int $property) {

  /**
   **/
}

/**
 * Set a listener property.
 **/

function openal_listener_set( int $property,  mixed $setting) {

  /**
   **/
}

/**
 * Generate a source resource.
 **/

function openal_source_create() {

  /**
   **/
}

/**
 * Destroy a source resource.
 **/

function openal_source_destroy( resource $source) {

  /**
   **/
}

/**
 * Retrieve an OpenAL source property.
 **/

function openal_source_get( resource $source,  int $property) {

  /**
   **/
}

/**
 * Pause the source.
 **/

function openal_source_pause( resource $source) {

  /**
   **/
}

/**
 * Start playing the source.
 **/

function openal_source_play( resource $source) {

  /**
   **/
}

/**
 * Rewind the source.
 **/

function openal_source_rewind( resource $source) {

  /**
   **/
}

/**
 * Set source property.
 **/

function openal_source_set(
     resource $source
  ,  int $property
  ,  mixed $setting
  ) {

  /**
   **/
}

/**
 * Stop playing the source.
 **/

function openal_source_stop( resource $source) {

  /**
   **/
}

/**
 * Begin streaming on a source.
 **/

function openal_stream( resource $source,  int $format,  int $rate) {

  /**
   **/
}

/**
 * Gets the cipher iv length.
 **/

function openssl_cipher_iv_length( string $cipher_algo) {

  /**
   * Gets the cipher initialization vector (iv) length.
   **/
}

/**
 * Gets the cipher key length.
 **/

function openssl_cipher_key_length( string $cipher_algo) {

  /**
   * Gets the cipher key length.
   **/
}

/**
 * Decrypt a CMS message.
 **/

function openssl_cms_decrypt(
     string $input_filename
  ,  string $output_filename
  , $certificate
  , $private_key = null
  ,  int $encoding = OPENSSL_ENCODING_SMIME
  ) {

  /**
   * Decrypts a CMS message.
   **/
}

/**
 * Encrypt a CMS message.
 **/

function openssl_cms_encrypt(
     string $input_filename
  ,  string $output_filename
  , $certificate
  , $headers
  ,  int $flags = 0
  ,  int $encoding = OPENSSL_ENCODING_SMIME
  ,  int $cipher_algo = OPENSSL_CIPHER_AES_128_CBC
  ) {

  /**
   * This function encrypts content to one or more recipients,
   * based on the certificates that are passed to it.
   **/
}

/**
 * Export the CMS file to an array of PEM certificates.
 **/

function openssl_cms_read(
     string $input_filename
  ,  array &$certificates
  ) {

  /**
   * Performs the exact analog to openssl_pkcs7_read.
   **/
}

/**
 * Sign a file.
 **/

function openssl_cms_sign(
     string $input_filename
  ,  string $output_filename
  , $certificate
  , $private_key
  , $headers
  ,  int $flags = 0
  ,  int $encoding = OPENSSL_ENCODING_SMIME
  , $untrusted_certificates_filename = null
  ) {

  /**
   * This function signs a file with an X.509 certificate and key.
   **/
}

/**
 * Verify a CMS signature.
 **/

function openssl_cms_verify(
     string $input_filename
  ,  int $flags = 0
  , $certificates = null
  ,  array $ca_info = []
  , $untrusted_certificates_filename = null
  , $content = null
  , $pk7 = null
  , $sigfile = null
  ,  int $encoding = OPENSSL_ENCODING_SMIME
  ) {

  /**
   * This function verifies a CMS signature, either attached or
   * detached, with the specified encoding.
   **/
}

/**
 * Exports a CSR to a file.
 **/

function openssl_csr_export_to_file(
    $csr
  ,  string $output_filename
  ,  bool $no_text = true
  ) {

  /**
   * openssl_csr_export_to_file takes the Certificate Signing
   * Request represented by csr and saves it in PEM format into the
   * file named by output_filename.
   **/
}

/**
 * Exports a CSR as a string.
 **/

function openssl_csr_export(
    $csr
  ,  string &$output
  ,  bool $no_text = true
  ) {

  /**
   * openssl_csr_export takes the Certificate Signing Request
   * represented by csr and stores it in PEM format in output,
   * which is passed by reference.
   **/
}

/**
 * Returns the public key of a CSR.
 **/

function openssl_csr_get_public_key($csr,  bool $short_names = true) {

  /**
   * openssl_csr_get_public_key extracts the public key from csr
   * and prepares it for use by other functions.
   **/
}

/**
 * Returns the subject of a CSR.
 **/

function openssl_csr_get_subject($csr,  bool $short_names = true) {

  /**
   * openssl_csr_get_subject returns subject distinguished name
   * information encoded in the csr including fields commonName
   * (CN), organizationName (O), countryName (C) etc.
   **/
}

/**
 * Generates a CSR.
 **/

function openssl_csr_new(
     array $distinguished_names
  ,  OpenSSLAsymmetricKey &$private_key
  , $options = null
  , $extra_attributes = null
  ) {

  /**
   * openssl_csr_new generates a new CSR based on the information
   * provided by distinguished_names.
   **/
}

/**
 * Sign a CSR with another certificate (or itself) and generate a.
 * certificate.
 **/

function openssl_csr_sign(
    $csr
  , $ca_certificate
  , $private_key
  ,  int $days
  , $options = null
  ,  int $serial = 0
  , $serial_hex = null
  ) {

  /**
   * openssl_csr_sign generates an x509 certificate from the given
   * CSR.
   **/
}

/**
 * Decrypts data.
 **/

function openssl_decrypt(
     string $data
  ,  string $cipher_algo
  ,  string $passphrase
  ,  int $options = 0
  ,  string $iv = ""
  , $tag = null
  ,  string $aad = ""
  ) {

  /**
   * Takes a raw or base64 encoded string and decrypts it using a
   * given method and key.
   **/
}

/**
 * Computes shared secret for public value of remote DH public.
 * key and local DH key.
 **/

function openssl_dh_compute_key(
     string $public_key
  ,  OpenSSLAsymmetricKey $private_key
  ) {

  /**
   * The shared secret returned by openssl_dh_compute_key is often
   * used as an encryption key to secretly communicate with a
   * remote party. This is known as the Diffie-Hellman key
   * exchange.
   **/
}

/**
 * Computes a digest.
 **/

function openssl_digest(
     string $data
  ,  string $digest_algo
  ,  bool $binary = false
  ) {

  /**
   * Computes a digest hash value for the given data using a given
   * method, and returns a raw or binhex encoded string.
   **/
}

/**
 * Encrypts data.
 **/

function openssl_encrypt(
     string $data
  ,  string $cipher_algo
  ,  string $passphrase
  ,  int $options = 0
  ,  string $iv = ""
  ,  string &$tag = null
  ,  string $aad = ""
  ,  int $tag_length = 16
  ) {

  /**
   * Encrypts given data with given method and key, returns a raw
   * or base64 encoded string
   **/
}

/**
 * Return openSSL error message.
 **/

function openssl_error_string() {

  /**
   * openssl_error_string returns the last error from the openSSL
   * library. Error messages are queued, so this function should be
   * called multiple times to collect all of the information. The
   * last error will be the most recent one.
   **/
}

/**
 * Free key resource.
 **/

function openssl_free_key( OpenSSLAsymmetricKey $key) {

  /**
   * openssl_free_key frees the key associated with the specified
   * key from memory.
   **/
}

/**
 * Retrieve the available certificate locations.
 **/

function openssl_get_cert_locations() {

  /**
   * openssl_get_cert_locations returns an array with information
   * about the available certificate locations that will be
   * searched for SSL certificates.
   **/
}

/**
 * Gets available cipher methods.
 **/

function openssl_get_cipher_methods( bool $aliases = false) {

  /**
   * Gets a list of available cipher methods.
   **/
}

/**
 * Gets list of available curve names for ECC.
 **/

function openssl_get_curve_names() {

  /**
   * Gets the list of available curve names for use in Elliptic
   * curve cryptography (ECC) for public/private key operations.
   * The two most widely standardized/supported curves are
   * prime256v1 (NIST P-256) and secp384r1 (NIST P-384).
   * Approximate Equivalancies of AES, RSA, DSA and ECC Keysizes
   * AES Symmetric Keysize (Bits) RSA and DSA Keysize (Bits) ECC
   * Keysize (Bits) 80 1024 160 112 2048 224 128 3072 256 192 7680
   * 384 256 15360 512 NIST recommends using ECC curves with at
   * least 256 bits.
   **/
}

/**
 * Gets available digest methods.
 **/

function openssl_get_md_methods( bool $aliases = false) {

  /**
   * Gets a list of available digest methods.
   **/
}

/**
 * &Alias; openssl_pkey_get_private.
 **/

function () {

  /**
   **/
}

/**
 * &Alias; openssl_pkey_get_public.
 **/

function () {

  /**
   **/
}

/**
 * Open sealed data.
 **/

function openssl_open(
     string $data
  ,  string &$output
  ,  string $encrypted_key
  , $private_key
  ,  string $cipher_algo
  , $iv = null
  ) {

  /**
   * openssl_open opens (decrypts) data using the private key
   * associated with the key identifier private_key and the
   * envelope key encrypted_key, and fills output with the
   * decrypted data. The envelope key is generated when the data
   * are sealed and can only be used by one specific private key.
   * See openssl_seal for more information.
   **/
}

/**
 * Generates a PKCS5 v2 PBKDF2 string.
 **/

function openssl_pbkdf2(
     string $password
  ,  string $salt
  ,  int $key_length
  ,  int $iterations
  ,  string $digest_algo = "sha1"
  ) {

  /**
   * openssl_pbkdf2 computes PBKDF2 (Password-Based Key Derivation
   * Function 2), a key derivation function defined in PKCS5 v2.
   **/
}

/**
 * Exports a PKCS#12 Compatible Certificate Store File.
 **/

function openssl_pkcs12_export_to_file(
    $certificate
  ,  string $output_filename
  , $private_key
  ,  string $passphrase
  ,  array $options = []
  ) {

  /**
   * openssl_pkcs12_export_to_file stores certificate into a file
   * named by output_filename in a PKCS#12 file format.
   **/
}

/**
 * Exports a PKCS#12 Compatible Certificate Store File to.
 * variable.
 **/

function openssl_pkcs12_export(
    $certificate
  ,  string &$output
  , $private_key
  ,  string $passphrase
  ,  array $options = []
  ) {

  /**
   * openssl_pkcs12_export stores certificate into a string named
   * by output in a PKCS#12 file format.
   **/
}

/**
 * Parse a PKCS#12 Certificate Store into an array.
 **/

function openssl_pkcs12_read(
     string $pkcs12
  ,  array &$certificates
  ,  string $passphrase
  ) {

  /**
   * openssl_pkcs12_read parses the PKCS#12 certificate store
   * supplied by pkcs12 into a array named certificates.
   **/
}

/**
 * Decrypts an S/MIME encrypted message.
 **/

function openssl_pkcs7_decrypt(
     string $input_filename
  ,  string $output_filename
  , $certificate
  , $private_key = null
  ) {

  /**
   * Decrypts the S/MIME encrypted message contained in the file
   * specified by input_filename using the certificate and its
   * associated private key specified by certificate and
   * private_key.
   **/
}

/**
 * Encrypt an S/MIME message.
 **/

function openssl_pkcs7_encrypt(
     string $input_filename
  ,  string $output_filename
  , $certificate
  , $headers
  ,  int $flags = 0
  ,  int $cipher_algo = OPENSSL_CIPHER_AES_128_CBC
  ) {

  /**
   * openssl_pkcs7_encrypt takes the contents of the file named
   * input_filename and encrypts them using an RC2 40-bit cipher so
   * that they can only be read by the intended recipients
   * specified by certificate.
   **/
}

/**
 * Export the PKCS7 file to an array of PEM certificates.
 **/

function openssl_pkcs7_read( string $data,  array &$certificates) {

  /**
   **/
}

/**
 * Sign an S/MIME message.
 **/

function openssl_pkcs7_sign(
     string $input_filename
  ,  string $output_filename
  , $certificate
  , $private_key
  , $headers
  ,  int $flags = PKCS7_DETACHED
  , $untrusted_certificates_filename = null
  ) {

  /**
   * openssl_pkcs7_sign takes the contents of the file named
   * input_filename and signs them using the certificate and its
   * matching private key specified by certificate and private_key
   * parameters.
   **/
}

/**
 * Verifies the signature of an S/MIME signed message.
 **/

function openssl_pkcs7_verify(
     string $input_filename
  ,  int $flags
  , $signers_certificates_filename = null
  ,  array $ca_info = []
  , $untrusted_certificates_filename = null
  , $content = null
  , $output_filename = null
  ) {

  /**
   * openssl_pkcs7_verify reads the S/MIME message contained in
   * the given file and examines the digital signature.
   **/
}

/**
 * Computes shared secret for public value of remote and local DH.
 * or ECDH key.
 **/

function openssl_pkey_derive(
    $public_key
  , $private_key
  ,  int $key_length = 0
  ) {

  /**
   * openssl_pkey_derive takes a set of a public_key and
   * private_key and derives a shared secret, for either DH or EC
   * keys.
   **/
}

/**
 * Gets an exportable representation of a key into a file.
 **/

function openssl_pkey_export_to_file(
    $key
  ,  string $output_filename
  , $passphrase = null
  , $options = null
  ) {

  /**
   * openssl_pkey_export_to_file saves an ascii-armoured (PEM
   * encoded) rendition of key into the file named by
   * output_filename.
   **/
}

/**
 * Gets an exportable representation of a key into a string.
 **/

function openssl_pkey_export(
    $key
  ,  string &$output
  , $passphrase = null
  , $options = null
  ) {

  /**
   * openssl_pkey_export exports key as a PEM encoded string and
   * stores it into output (which is passed by reference).
   **/
}

/**
 * Frees a private key.
 **/

function openssl_pkey_free( OpenSSLAsymmetricKey $key) {

  /**
   * This function frees a private key created by
   * openssl_pkey_new.
   **/
}

/**
 * Returns an array with the key details.
 **/

function openssl_pkey_get_details( OpenSSLAsymmetricKey $key) {

  /**
   * This function returns the key details (bits, key, type).
   **/
}

/**
 * Get a private key.
 **/

function openssl_pkey_get_private($private_key, $passphrase = null) {

  /**
   * openssl_pkey_get_private parses private_key and prepares it
   * for use by other functions.
   **/
}

/**
 * Extract public key from certificate and prepare it for use.
 **/

function openssl_pkey_get_public($public_key) {

  /**
   * openssl_pkey_get_public extracts the public key from
   * public_key and prepares it for use by other functions.
   **/
}

/**
 * Generates a new private key.
 **/

function openssl_pkey_new($options = null) {

  /**
   * openssl_pkey_new generates a new private key. How to obtain
   * the public component of the key is shown in an example below.
   **/
}

/**
 * Decrypts data with private key.
 **/

function openssl_private_decrypt(
     string $data
  ,  string &$decrypted_data
  , $private_key
  ,  int $padding = OPENSSL_PKCS1_PADDING
  ) {

  /**
   * openssl_private_decrypt decrypts data that was previously
   * encrypted via openssl_public_encrypt and stores the result
   * into decrypted_data.
   *
   * You can use this function e.g. to decrypt data which is
   * supposed to only be available to you.
   **/
}

/**
 * Encrypts data with private key.
 **/

function openssl_private_encrypt(
     string $data
  ,  string &$encrypted_data
  , $private_key
  ,  int $padding = OPENSSL_PKCS1_PADDING
  ) {

  /**
   * openssl_private_encrypt encrypts data with private
   * private_key and stores the result into encrypted_data.
   * Encrypted data can be decrypted via openssl_public_decrypt.
   *
   * This function can be used e.g. to sign data (or its hash) to
   * prove that it is not written by someone else.
   **/
}

/**
 * Decrypts data with public key.
 **/

function openssl_public_decrypt(
     string $data
  ,  string &$decrypted_data
  , $public_key
  ,  int $padding = OPENSSL_PKCS1_PADDING
  ) {

  /**
   * openssl_public_decrypt decrypts data that was previous
   * encrypted via openssl_private_encrypt and stores the result
   * into decrypted_data.
   *
   * You can use this function e.g. to check if the message was
   * written by the owner of the private key.
   **/
}

/**
 * Encrypts data with public key.
 **/

function openssl_public_encrypt(
     string $data
  ,  string &$encrypted_data
  , $public_key
  ,  int $padding = OPENSSL_PKCS1_PADDING
  ) {

  /**
   * openssl_public_encrypt encrypts data with public public_key
   * and stores the result into encrypted_data. Encrypted data can
   * be decrypted via openssl_private_decrypt.
   *
   * This function can be used e.g. to encrypt message which can
   * be then read only by owner of the private key. It can be also
   * used to store secure data in database.
   **/
}

/**
 * Generate a pseudo-random string of bytes.
 **/

function openssl_random_pseudo_bytes(
     int $length
  ,  bool &$strong_result = null
  ) {

  /**
   * Generates a string of pseudo-random bytes, with the number of
   * bytes determined by the length parameter.
   *
   * It also indicates if a cryptographically strong algorithm was
   * used to produce the pseudo-random bytes, and does this via the
   * optional strong_result parameter. It's rare for this to be
   * &false;, but some systems may be broken or old.
   **/
}

/**
 * Seal (encrypt) data.
 **/

function openssl_seal(
     string $data
  ,  string &$sealed_data
  ,  array &$encrypted_keys
  ,  array $public_key
  ,  string $cipher_algo
  ,  string &$iv = null
  ) {

  /**
   * openssl_seal seals (encrypts) data by using the given
   * cipher_algo with a randomly generated secret key. The key is
   * encrypted with each of the public keys associated with the
   * identifiers in public_key and each encrypted key is returned
   * in encrypted_keys. This means that one can send sealed data to
   * multiple recipients (provided one has obtained their public
   * keys). Each recipient must receive both the sealed data and
   * the envelope key that was encrypted with the recipient's
   * public key.
   **/
}

/**
 * Generate signature.
 **/

function openssl_sign(
     string $data
  ,  string &$signature
  , $private_key
  , $algorithm = OPENSSL_ALGO_SHA1
  ) {

  /**
   * openssl_sign computes a signature for the specified data by
   * generating a cryptographic digital signature using the private
   * key associated with private_key. Note that the data itself is
   * not encrypted.
   **/
}

/**
 * Exports the challenge associated with a signed public key and.
 * challenge.
 **/

function openssl_spki_export_challenge( string $spki) {

  /**
   * Exports challenge from encoded signed public key and
   * challenge
   **/
}

/**
 * Exports a valid PEM formatted public key signed public key and.
 * challenge.
 **/

function openssl_spki_export( string $spki) {

  /**
   * Exports PEM formatted public key from encoded signed public
   * key and challenge
   **/
}

/**
 * Generate a new signed public key and challenge.
 **/

function openssl_spki_new(
     OpenSSLAsymmetricKey $private_key
  ,  string $challenge
  ,  int $digest_algo = OPENSSL_ALGO_MD5
  ) {

  /**
   * Generates a signed public key and challenge using specified
   * hashing algorithm
   **/
}

/**
 * Verifies a signed public key and challenge.
 **/

function openssl_spki_verify( string $spki) {

  /**
   * Validates the supplied signed public key and challenge
   **/
}

/**
 * Verify signature.
 **/

function openssl_verify(
     string $data
  ,  string $signature
  , $public_key
  , $algorithm = OPENSSL_ALGO_SHA1
  ) {

  /**
   * openssl_verify verifies that the signature is correct for the
   * specified data using the public key associated with
   * public_key. This must be the public key corresponding to the
   * private key used for signing.
   **/
}

/**
 * Checks if a private key corresponds to a certificate.
 **/

function openssl_x509_check_private_key($certificate, $private_key) {

  /**
   * Checks whether the given private_key is the private key that
   * corresponds to certificate.
   *
   * The function does not check if private_key is indeed a
   * private key or not. It merely compares the public materials
   * (e.g. exponent and modulus of an RSA key) and/or key
   * parameters (e.g. EC params of an EC key) of a key pair.
   *
   * This means, for example, that a public key could be given for
   * private_key and the function may return &true;.
   **/
}

/**
 * Verifies if a certificate can be used for a particular purpose.
 **/

function openssl_x509_checkpurpose(
    $certificate
  ,  int $purpose
  ,  array $ca_info = []
  , $untrusted_certificates_file = null
  ) {

  /**
   * openssl_x509_checkpurpose examines a certificate to see if it
   * can be used for the specified purpose.
   **/
}

/**
 * Exports a certificate to file.
 **/

function openssl_x509_export_to_file(
    $certificate
  ,  string $output_filename
  ,  bool $no_text = true
  ) {

  /**
   * openssl_x509_export_to_file stores certificate into a file
   * named by output_filename in a PEM encoded format.
   **/
}

/**
 * Exports a certificate as a string.
 **/

function openssl_x509_export(
    $certificate
  ,  string &$output
  ,  bool $no_text = true
  ) {

  /**
   * openssl_x509_export stores certificate into a string named by
   * output in a PEM encoded format.
   **/
}

/**
 * Calculates the fingerprint, or digest, of a given X.509.
 * certificate.
 **/

function openssl_x509_fingerprint(
    $certificate
  ,  string $digest_algo = "sha1"
  ,  bool $binary = false
  ) {

  /**
   * openssl_x509_fingerprint returns the digest of certificate as
   * a string.
   **/
}

/**
 * Free certificate resource.
 **/

function openssl_x509_free( OpenSSLCertificate $certificate) {

  /**
   * openssl_x509_free frees the certificate associated with the
   * specified certificate resource from memory.
   **/
}

/**
 * Parse an X509 certificate and return the information as an.
 * array.
 **/

function openssl_x509_parse($certificate,  bool $short_names = true) {

  /**
   * openssl_x509_parse returns information about the supplied
   * certificate, including fields such as subject name, issuer
   * name, purposes, valid from and valid to dates etc.
   **/
}

/**
 * Parse an X.509 certificate and return an object for it.
 **/

function openssl_x509_read($certificate) {

  /**
   * openssl_x509_read parses the certificate supplied by
   * certificate and returns an OpenSSLCertificate object for it.
   **/
}

/**
 * Verifies digital signature of x509 certificate against a.
 * public key.
 **/

function openssl_x509_verify($certificate, $public_key) {

  /**
   * openssl_x509_verify verifies that the certificate certificate
   * was signed by the private key corresponding to public key
   * public_key.
   **/
}

/**
 * Flush system output buffer.
 **/

function flush() {

  /**
   * Flushes the system write buffers of PHP and the backend used
   * by PHP (e.g.: CGI, a web server). In a command line
   * environment flush will attempt to flush the contents of the
   * buffers only whereas in a web context headers and the contents
   * of the buffers are flushed.
   **/
}

/**
 * Clean (erase) the contents of the active output buffer.
 **/

function ob_clean() {

  /**
   * This function calls the output handler (with the
   * PHP_OUTPUT_HANDLER_CLEAN flag), discards it's return value and
   * cleans (erases) the contents of the active output buffer.
   *
   * This function does not turn off the active output buffer like
   * ob_end_clean or ob_get_clean does.
   *
   * ob_clean will fail without an active output buffer started
   * with the PHP_OUTPUT_HANDLER_CLEANABLE flag.
   **/
}

/**
 * Clean (erase) the contents of the active output buffer and.
 * turn it off.
 **/

function ob_end_clean() {

  /**
   * This function calls the output handler (with the
   * PHP_OUTPUT_HANDLER_CLEAN and PHP_OUTPUT_HANDLER_FINAL flags),
   * discards it's return value, discards the contents of the
   * active output buffer and turns off the active output buffer.
   *
   * ob_end_clean will fail without an active output buffer
   * started with the PHP_OUTPUT_HANDLER_REMOVABLE flag.
   *
   * ob_end_clean will discard the contents of the active output
   * buffer even if it was started without the
   * PHP_OUTPUT_HANDLER_CLEANABLE flag.
   **/
}

/**
 * Flush (send) the return value of the active output handler.
 * and turn the active output buffer off.
 **/

function ob_end_flush() {

  /**
   * This function calls the output handler (with the
   * PHP_OUTPUT_HANDLER_FINAL flag), flushes (sends) it's return
   * value, discards the contents of the active output buffer and
   * turns off the active output buffer.
   *
   * ob_end_flush will fail without an active output buffer
   * started with the PHP_OUTPUT_HANDLER_REMOVABLE flag.
   *
   * ob_end_flush will flush (send) the return value of the output
   * handler even if the active output buffer was started without
   * the PHP_OUTPUT_HANDLER_FLUSHABLE flag.
   **/
}

/**
 * Flush (send) the return value of the active output handler.
 **/

function ob_flush() {

  /**
   * This function calls the output handler (with the
   * PHP_OUTPUT_HANDLER_FLUSH flag), flushes (sends) its return
   * value and discards the contents of the active output buffer.
   *
   * This function does not turn off the active output buffer like
   * ob_end_flush or ob_get_flush does.
   *
   * ob_flush will fail without an active output buffer started
   * with the PHP_OUTPUT_HANDLER_FLUSHABLE flag.
   **/
}

/**
 * Get the contents of the active output buffer and turn it off.
 **/

function ob_get_clean() {

  /**
   * This function calls the output handler (with the
   * PHP_OUTPUT_HANDLER_CLEAN and PHP_OUTPUT_HANDLER_FINAL flags),
   * discards it's return value, returns the contents of the active
   * output buffer and turns off the active output buffer.
   *
   * ob_get_clean will fail without an active output buffer
   * started with the PHP_OUTPUT_HANDLER_REMOVABLE flag.
   *
   * ob_get_clean will discard the contents of the active output
   * buffer even if it was started without the
   * PHP_OUTPUT_HANDLER_CLEANABLE flag.
   **/
}

/**
 * Return the contents of the output buffer.
 **/

function ob_get_contents() {

  /**
   * Gets the contents of the output buffer without clearing it.
   **/
}

/**
 * Flush (send) the return value of the active output handler,.
 * return the contents of the active output buffer and turn it.
 * off.
 **/

function ob_get_flush() {

  /**
   * This function calls the output handler (with the
   * PHP_OUTPUT_HANDLER_FINAL flag), flushes (sends) it's return
   * value, returns the contents of the active output buffer and
   * turns off the active output buffer.
   *
   * ob_get_flush will fail without an active output buffer
   * started with the PHP_OUTPUT_HANDLER_REMOVABLE flag.
   *
   * ob_get_flush will flush (send) the return value of the output
   * handler even if the active output buffer was started without
   * the PHP_OUTPUT_HANDLER_FLUSHABLE flag.
   **/
}

/**
 * Return the length of the output buffer.
 **/

function ob_get_length() {

  /**
   * This will return the length of the contents in the output
   * buffer, in bytes.
   **/
}

/**
 * Return the nesting level of the output buffering mechanism.
 **/

function ob_get_level() {

  /**
   * Returns the nesting level of the output buffering mechanism.
   **/
}

/**
 * Get status of output buffers.
 **/

function ob_get_status( bool $full_status = false) {

  /**
   * ob_get_status returns status information on either the top
   * level output buffer or all active output buffer levels if
   * full_status is set to &true;.
   **/
}

/**
 * Turn implicit flush on/off.
 **/

function ob_implicit_flush( bool $enable = true) {

  /**
   * ob_implicit_flush will turn implicit flushing on or off.
   * Implicit flushing will result in a flush operation after every
   * block of code resulting in output, so that explicit calls to
   * flush will no longer be needed.
   **/
}

/**
 * List all output handlers in use.
 **/

function ob_list_handlers() {

  /**
   * Lists all output handlers in use.
   **/
}

/**
 * Turn on output buffering.
 **/

function ob_start(
    $callback = null
  ,  int $chunk_size = 0
  ,  int $flags = PHP_OUTPUT_HANDLER_STDFLAGS
  ) {

  /**
   * This function will turn output buffering on. While output
   * buffering is active no output is sent from the script, instead
   * the output is stored in an internal buffer. See on exactly
   * what output is affected.
   *
   * Output buffers are stackable, that is, ob_start may be called
   * while another buffer is active. If multiple output buffers are
   * active, output is being filtered sequentially through each of
   * them in nesting order. See for more details.
   *
   * See for a detailed description of output buffers.
   **/
}

/**
 * Add URL rewriter values.
 **/

function output_add_rewrite_var( string $name,  string $value) {

  /**
   * This function starts the 'URL-Rewriter' output buffer handler
   * if it is not active, stores the name and value parameters, and
   * when the buffer is flushed rewrites the URLs and forms based
   * on the applicable ini settings. Subsequent calls to this
   * function will store all additional name/value pairs until the
   * handler is turned off.
   *
   * When the output buffer is flushed (by calling ob_flush,
   * ob_end_flush, ob_get_flush or at the end of the script) the
   * 'URL-Rewriter' handler adds the name/value pairs as query
   * parameters to URLs in attributes of HTML tags and adds hidden
   * fields to forms based on the values of the url_rewriter.tags
   * and url_rewriter.hosts configuration directives.
   *
   * Each name/value pair added to the 'URL-Rewriter' handler is
   * added to the URLs and/or forms even if this results in
   * duplicate URL query parameters or elements with the same name
   * attributes.
   **/
}

/**
 * Reset URL rewriter values.
 **/

function output_reset_rewrite_vars() {

  /**
   * This function removes all rewrite variables previously set by
   * the output_add_rewrite_var function.
   **/
}

/**
 * Bootstrapping.
 **/

function parallel\bootstrap( string $file) {

  /**
   * Shall use the provided file to bootstrap all runtimes created
   * for automatic scheduling via parallel\run.
   **/
}

/**
 * Execution.
 **/

function parallel\run( Closure $task) {

  /**
   * Shall schedule task for execution in parallel.
   *
   * Shall schedule task for execution in parallel, passing argv
   * at execution time.
   **/
}

/**
 * Get available password hashing algorithm IDs.
 **/

function password_algos() {

  /**
   * Returns a complete list of all registered password hashing
   * algorithm IDs as an &array; of &string;s.
   **/
}

/**
 * Returns information about the given hash.
 **/

function password_get_info( string $hash) {

  /**
   * When passed in a valid hash created by an algorithm supported
   * by password_hash, this function will return an array of
   * information about that hash.
   **/
}

/**
 * Creates a password hash.
 **/

function password_hash(
     string $password
  , $algo
  ,  array $options = []
  ) {

  /**
   * password_hash creates a new password hash using a strong
   * one-way hashing algorithm.
   *
   * PASSWORD_DEFAULT - Use the bcrypt algorithm (default as of
   * PHP 5.5.0). Note that this constant is designed to change over
   * time as new and stronger algorithms are added to PHP. For that
   * reason, the length of the result from using this identifier
   * can change over time. Therefore, it is recommended to store
   * the result in a database column that can expand beyond 60
   * characters (255 characters would be a good choice).
   * PASSWORD_BCRYPT - Use the CRYPT_BLOWFISH algorithm to create
   * the hash. This will produce a standard crypt compatible hash
   * using the "$2y$" identifier. The result will always be a 60
   * character string, &return.falseforfailure;. PASSWORD_ARGON2I -
   * Use the Argon2i hashing algorithm to create the hash. This
   * algorithm is only available if PHP has been compiled with
   * Argon2 support. PASSWORD_ARGON2ID - Use the Argon2id hashing
   * algorithm to create the hash. This algorithm is only available
   * if PHP has been compiled with Argon2 support.
   *
   * salt (string) - to manually provide a salt to use when
   * hashing the password. Note that this will override and prevent
   * a salt from being automatically generated. If omitted, a
   * random salt will be generated by password_hash for each
   * password hashed. This is the intended mode of operation. The
   * salt option is deprecated. It is now preferred to simply use
   * the salt that is generated by default. As of PHP 8.0.0, an
   * explicitly given salt is ignored. cost (int) - which denotes
   * the algorithmic cost that should be used. Examples of these
   * values can be found on the crypt page. If omitted, a default
   * value of 10 will be used. This is a good baseline cost, but
   * you may want to consider increasing it depending on your
   * hardware.
   *
   * salt (string) - to manually provide a salt to use when
   * hashing the password. Note that this will override and prevent
   * a salt from being automatically generated.
   *
   * If omitted, a random salt will be generated by password_hash
   * for each password hashed. This is the intended mode of
   * operation.
   *
   * The salt option is deprecated. It is now preferred to simply
   * use the salt that is generated by default. As of PHP 8.0.0, an
   * explicitly given salt is ignored.
   *
   * cost (int) - which denotes the algorithmic cost that should
   * be used. Examples of these values can be found on the crypt
   * page.
   *
   * If omitted, a default value of 10 will be used. This is a
   * good baseline cost, but you may want to consider increasing it
   * depending on your hardware.
   *
   * memory_cost (int) - Maximum memory (in kibibytes) that may be
   * used to compute the Argon2 hash. Defaults to
   * PASSWORD_ARGON2_DEFAULT_MEMORY_COST. time_cost (int) - Maximum
   * amount of time it may take to compute the Argon2 hash.
   * Defaults to PASSWORD_ARGON2_DEFAULT_TIME_COST. threads (int) -
   * Number of threads to use for computing the Argon2 hash.
   * Defaults to PASSWORD_ARGON2_DEFAULT_THREADS. Only available
   * when PHP uses libargon2, not with libsodium implementation.
   *
   * memory_cost (int) - Maximum memory (in kibibytes) that may be
   * used to compute the Argon2 hash. Defaults to
   * PASSWORD_ARGON2_DEFAULT_MEMORY_COST.
   *
   * time_cost (int) - Maximum amount of time it may take to
   * compute the Argon2 hash. Defaults to
   * PASSWORD_ARGON2_DEFAULT_TIME_COST.
   *
   * threads (int) - Number of threads to use for computing the
   * Argon2 hash. Defaults to PASSWORD_ARGON2_DEFAULT_THREADS.
   *
   * Only available when PHP uses libargon2, not with libsodium
   * implementation.
   **/
}

/**
 * Checks if the given hash matches the given options.
 **/

function password_needs_rehash(
     string $hash
  , $algo
  ,  array $options = []
  ) {

  /**
   * This function checks to see if the supplied hash implements
   * the algorithm and options provided. If not, it is assumed that
   * the hash needs to be rehashed.
   **/
}

/**
 * Verifies that a password matches a hash.
 **/

function password_verify( string $password,  string $hash) {

  /**
   * Verifies that the given hash matches the given password.
   * password_verify is compatible with crypt. Therefore, password
   * hashes created by crypt can be used with password_verify.
   *
   * Note that password_hash returns the algorithm, cost and salt
   * as part of the returned hash. Therefore, all information
   * that's needed to verify the hash is included in it. This
   * allows the verify function to verify the hash without needing
   * separate storage for the salt or algorithm information.
   *
   * This function is safe against timing attacks.
   **/
}

/**
 * Set an alarm clock for delivery of a signal.
 **/

function pcntl_alarm( int $seconds) {

  /**
   * Creates a timer that will send a SIGALRM signal to the
   * process after the given number of seconds. Any call to
   * pcntl_alarm will cancel any previously set alarm.
   **/
}

/**
 * Enable/disable asynchronous signal handling or return the old.
 * setting.
 **/

function pcntl_async_signals() {

  /**
   * If the enable parameter is &null;, pcntl_async_signals
   * returns whether asynchronous signal handling is enabled.
   * Otherwise, asynchronous signal handling is enabled or
   * disabled.
   **/
}

/**
 * &Alias; pcntl_get_last_error.
 **/

function () {

  /**
   **/
}

/**
 * Executes specified program in current process space.
 **/

function pcntl_exec(
     string $path
  ,  array $args = []
  ,  array $env_vars = []
  ) {

  /**
   * Executes the program with the given arguments.
   **/
}

/**
 * Forks the currently running process.
 **/

function pcntl_fork() {

  /**
   * The pcntl_fork function creates a child process that differs
   * from the parent process only in its PID and PPID. Please see
   * your system's fork(2) man page for specific details as to how
   * fork works on your system.
   **/
}

/**
 * Retrieve the error number set by the last pcntl function which.
 * failed.
 **/

function pcntl_get_last_error() {

  /**
   **/
}

/**
 * Get the priority of any process.
 **/

function pcntl_getpriority(
    $process_id = null
  ,  int $mode = PRIO_PROCESS
  ) {

  /**
   * pcntl_getpriority gets the priority of process_id. Because
   * priority levels can differ between system types and kernel
   * versions, please see your system's getpriority(2) man page for
   * specific details.
   **/
}

/**
 * Manipulates process resources.
 **/

function pcntl_rfork( int $flags,  int $signal = 0) {

  /**
   * Manipulates process resources.
   **/
}

/**
 * Change the priority of any process.
 **/

function pcntl_setpriority(
     int $priority
  , $process_id = null
  ,  int $mode = PRIO_PROCESS
  ) {

  /**
   * pcntl_setpriority sets the priority of process_id.
   **/
}

/**
 * Calls signal handlers for pending signals.
 **/

function pcntl_signal_dispatch() {

  /**
   * The pcntl_signal_dispatch function calls the signal handlers
   * installed by pcntl_signal for each pending signal.
   **/
}

/**
 * Get the current handler for specified signal.
 **/

function pcntl_signal_get_handler( int $signal) {

  /**
   * The pcntl_signal_get_handler function will get the current
   * handler for the specified signal.
   **/
}

/**
 * Installs a signal handler.
 **/

function pcntl_signal(
     int $signal
  , $handler
  ,  bool $restart_syscalls = true
  ) {

  /**
   * The pcntl_signal function installs a new signal handler or
   * replaces the current signal handler for the signal indicated
   * by signal.
   **/
}

/**
 * Sets and retrieves blocked signals.
 **/

function pcntl_sigprocmask(
     int $mode
  ,  array $signals
  ,  array &$old_signals = null
  ) {

  /**
   * The pcntl_sigprocmask function adds, removes or sets blocked
   * signals, depending on the mode parameter.
   **/
}

/**
 * Waits for signals, with a timeout.
 **/

function pcntl_sigtimedwait(
     array $signals
  ,  array &$info = []
  ,  int $seconds = 0
  ,  int $nanoseconds = 0
  ) {

  /**
   * The pcntl_sigtimedwait function operates in exactly the same
   * way as pcntl_sigwaitinfo except that it takes two additional
   * parameters, seconds and nanoseconds, which enable an upper
   * bound to be placed on the time for which the script is
   * suspended.
   **/
}

/**
 * Waits for signals.
 **/

function pcntl_sigwaitinfo( array $signals,  array &$info = []) {

  /**
   * The pcntl_sigwaitinfo function suspends execution of the
   * calling script until one of the signals given in signals are
   * delivered. If one of the signal is already pending (e.g.
   * blocked by pcntl_sigprocmask), pcntl_sigwaitinfo will return
   * immediately.
   **/
}

/**
 * Retrieve the system error message associated with the given.
 * errno.
 **/

function pcntl_strerror( int $error_code) {

  /**
   **/
}

/**
 * Dissociates parts of the process execution context.
 **/

function pcntl_unshare( int $flags) {

  /**
   * pcntl_unshare allows a process to disassociate parts of its
   * execution context that are currently being shared with other
   * processes. The main use of pcntl_unshare is to allow a process
   * to control its shared execution context without creating a new
   * process.
   **/
}

/**
 * Waits on or returns the status of a forked child.
 **/

function pcntl_wait(
     int &$status
  ,  int $flags = 0
  ,  array &$resource_usage = []
  ) {

  /**
   * The wait function suspends execution of the current process
   * until a child has exited, or until a signal is delivered whose
   * action is to terminate the current process or to call a signal
   * handling function. If a child has already exited by the time
   * of the call (a so-called "zombie" process), the function
   * returns immediately. Any system resources used by the child
   * are freed. Please see your system's wait(2) man page for
   * specific details as to how wait works on your system.
   *
   * This function is equivalent to calling pcntl_waitpid with a
   * -1 process_id and no flags.
   **/
}

/**
 * Waits on or returns the status of a forked child.
 **/

function pcntl_waitpid(
     int $process_id
  ,  int &$status
  ,  int $flags = 0
  ,  array &$resource_usage = []
  ) {

  /**
   * Suspends execution of the current process until a child as
   * specified by the process_id argument has exited, or until a
   * signal is delivered whose action is to terminate the current
   * process or to call a signal handling function.
   *
   * If a child as requested by process_id has already exited by
   * the time of the call (a so-called "zombie" process), the
   * function returns immediately. Any system resources used by the
   * child are freed. Please see your system's waitpid(2) man page
   * for specific details as to how waitpid works on your system.
   **/
}

/**
 * Returns the return code of a terminated child.
 **/

function pcntl_wexitstatus( int $status) {

  /**
   * Returns the return code of a terminated child. This function
   * is only useful if pcntl_wifexited returned &true;.
   **/
}

/**
 * Checks if status code represents a normal exit.
 **/

function pcntl_wifexited( int $status) {

  /**
   * Checks whether the child status code represents a normal
   * exit.
   **/
}

/**
 * Checks whether the status code represents a termination due to.
 * a signal.
 **/

function pcntl_wifsignaled( int $status) {

  /**
   * Checks whether the child process exited because of a signal
   * which was not caught.
   **/
}

/**
 * Checks whether the child process is currently stopped.
 **/

function pcntl_wifstopped( int $status) {

  /**
   * Checks whether the child process which caused the return is
   * currently stopped; this is only possible if the call to
   * pcntl_waitpid was done using the option WUNTRACED.
   **/
}

/**
 * Returns the signal which caused the child to stop.
 **/

function pcntl_wstopsig( int $status) {

  /**
   * Returns the number of the signal which caused the child to
   * stop. This function is only useful if pcntl_wifstopped
   * returned &true;.
   **/
}

/**
 * Returns the signal which caused the child to terminate.
 **/

function pcntl_wtermsig( int $status) {

  /**
   * Returns the number of the signal that caused the child
   * process to terminate. This function is only useful if
   * pcntl_wifsignaled returned &true;.
   **/
}

/**
 * Perform a regular expression search and replace.
 **/

function preg_filter(
    $pattern
  , $replacement
  , $subject
  ,  int $limit = -1
  ,  int &$count = null
  ) {

  /**
   * preg_filter is identical to preg_replace except it only
   * returns the (possibly transformed) subjects where there was a
   * match. For details about how this function works, read the
   * preg_replace documentation.
   **/
}

/**
 * Return array entries that match the pattern.
 **/

function preg_grep( string $pattern,  array $array,  int $flags = 0) {

  /**
   * Returns the array consisting of the elements of the array
   * array that match the given pattern.
   **/
}

/**
 * Returns the error message of the last PCRE regex execution.
 **/

function preg_last_error_msg() {

  /**
   * Returns the error message of the last PCRE regex execution.
   **/
}

/**
 * Returns the error code of the last PCRE regex execution.
 **/

function preg_last_error() {

  /**
   * Returns the error code of the last PCRE regex execution.
   *
   * preg_last_error example )*[!?]/', 'foobar foobar foobar'); if
   * (preg_last_error() == PREG_BACKTRACK_LIMIT_ERROR) { echo
   * 'Backtrack limit was exhausted!'; } ?> ]]> &example.outputs;
   **/
}

/**
 * Perform a global regular expression match.
 **/

function preg_match_all(
     string $pattern
  ,  string $subject
  ,  array &$matches = null
  ,  int $flags = 0
  ,  int $offset = 0
  ) {

  /**
   * Searches subject for all matches to the regular expression
   * given in pattern and puts them in matches in the order
   * specified by flags.
   *
   * After the first match is found, the subsequent searches are
   * continued on from end of the last match.
   **/
}

/**
 * Perform a regular expression match.
 **/

function preg_match(
     string $pattern
  ,  string $subject
  ,  array &$matches = null
  ,  int $flags = 0
  ,  int $offset = 0
  ) {

  /**
   * Searches subject for a match to the regular expression given
   * in pattern.
   **/
}

/**
 * Quote regular expression characters.
 **/

function preg_quote( string $str, $delimiter = null) {

  /**
   * preg_quote takes str and puts a backslash in front of every
   * character that is part of the regular expression syntax. This
   * is useful if you have a run-time string that you need to match
   * in some text and the string may contain special regex
   * characters.
   *
   * The special regular expression characters are: . \ + * ? [ ^
   * ] $ ( ) { } = ! < > | : - #
   *
   * Note that / is not a special regular expression character.
   *
   * Note that preg_quote is not meant to be applied to the
   * $replacement string(s) of preg_replace etc.
   **/
}

/**
 * Perform a regular expression search and replace using.
 * callbacks.
 **/

function preg_replace_callback_array(
     array $pattern
  , $subject
  ,  int $limit = -1
  ,  int &$count = null
  ,  int $flags = 0
  ) {

  /**
   * The behavior of this function is similar to
   * preg_replace_callback, except that callbacks are executed on a
   * per-pattern basis.
   **/
}

/**
 * Perform a regular expression search and replace using a.
 * callback.
 **/

function preg_replace_callback(
    $pattern
  ,  callable $callback
  , $subject
  ,  int $limit = -1
  ,  int &$count = null
  ,  int $flags = 0
  ) {

  /**
   * The behavior of this function is almost identical to
   * preg_replace, except for the fact that instead of replacement
   * parameter, one should specify a callback.
   **/
}

/**
 * Perform a regular expression search and replace.
 **/

function preg_replace(
    $pattern
  , $replacement
  , $subject
  ,  int $limit = -1
  ,  int &$count = null
  ) {

  /**
   * Searches subject for matches to pattern and replaces them
   * with replacement.
   *
   * To match an exact string, rather than a pattern, consider
   * using str_replace or str_ireplace instead of this function.
   **/
}

/**
 * Split string by a regular expression.
 **/

function preg_split(
     string $pattern
  ,  string $subject
  ,  int $limit = -1
  ,  int $flags = 0
  ) {

  /**
   * Split the given string by a regular expression.
   **/
}

/**
 * Returns number of affected records (tuples).
 **/

function pg_affected_rows( PgSql\Result $result) {

  /**
   * pg_affected_rows returns the number of tuples
   * (instances/records/rows) affected by INSERT, UPDATE, and
   * DELETE queries.
   *
   * Since PostgreSQL 9.0 and above, the server returns the number
   * of SELECTed rows. Older PostgreSQL return 0 for SELECT.
   *
   * This function used to be called pg_cmdtuples.
   **/
}

/**
 * Cancel an asynchronous query.
 **/

function pg_cancel_query( PgSql\Connection $connection) {

  /**
   * pg_cancel_query cancels an asynchronous query sent with
   * pg_send_query, pg_send_query_params or pg_send_execute. You
   * cannot cancel a query executed using pg_query.
   **/
}

/**
 * Gets the client encoding.
 **/

function pg_client_encoding($connection = null) {

  /**
   * PostgreSQL supports automatic character set conversion
   * between server and client for certain character sets.
   * pg_client_encoding returns the client encoding as a string.
   * The returned string will be one of the standard PostgreSQL
   * encoding identifiers.
   *
   * This function requires PostgreSQL 7.0 or higher. If libpq is
   * compiled without multibyte encoding support,
   * pg_client_encoding always returns SQL_ASCII. Supported
   * encoding depends on PostgreSQL version. Refer to the
   * PostgreSQL Documentation supported encodings.
   *
   * The function used to be called pg_clientencoding.
   **/
}

/**
 * Closes a PostgreSQL connection.
 **/

function pg_close($connection = null) {

  /**
   * pg_close closes the non-persistent connection to a PostgreSQL
   * database associated with the given connection instance.
   *
   * Using pg_close is not usually necessary, as non-persistent
   * open connections are automatically closed at the end of the
   * script.
   *
   * If there is open PgSql\Lob instance on the connection, do not
   * close the connection before closing all PgSql\Lob instances.
   **/
}

/**
 * Poll the status of an in-progress asynchronous PostgreSQL.
 * connection attempt.
 **/

function pg_connect_poll( PgSql\Connection $connection) {

  /**
   * pg_connect_poll polls the status of a PostgreSQL connection
   * created by calling pg_connect with the PGSQL_CONNECT_ASYNC
   * option.
   **/
}

/**
 * Open a PostgreSQL connection.
 **/

function pg_connect( string $connection_string,  int $flags = 0) {

  /**
   * pg_connect opens a connection to a PostgreSQL database
   * specified by the connection_string.
   *
   * If a second call is made to pg_connect with the same
   * connection_string as an existing connection, the existing
   * connection will be returned unless you pass
   * PGSQL_CONNECT_FORCE_NEW as flags.
   *
   * The old syntax with multiple parameters $conn =
   * pg_connect("host", "port", "options", "tty", "dbname") has
   * been deprecated.
   **/
}

/**
 * Get connection is busy or not.
 **/

function pg_connection_busy( PgSql\Connection $connection) {

  /**
   * pg_connection_busy determines whether or not a connection is
   * busy. If it is busy, a previous query is still executing. If
   * pg_get_result is used on the connection, it will be blocked.
   **/
}

/**
 * Reset connection (reconnect).
 **/

function pg_connection_reset( PgSql\Connection $connection) {

  /**
   * pg_connection_reset resets the connection. It is useful for
   * error recovery.
   **/
}

/**
 * Get connection status.
 **/

function pg_connection_status( PgSql\Connection $connection) {

  /**
   * pg_connection_status returns the status of the specified
   * connection.
   **/
}

/**
 * Reads input on the connection.
 **/

function pg_consume_input( PgSql\Connection $connection) {

  /**
   * pg_consume_input consumes any input waiting to be read from
   * the database server.
   **/
}

/**
 * Convert associative array values into forms suitable for SQL.
 * statements.
 **/

function pg_convert(
     PgSql\Connection $connection
  ,  string $table_name
  ,  array $values
  ,  int $flags = 0
  ) {

  /**
   * pg_convert checks and converts the values in values into
   * suitable values for use in an SQL statement. Precondition for
   * pg_convert is the existence of a table table_name which has at
   * least as many columns as values has elements. The fieldnames
   * in table_name must match the indices in values and the
   * corresponding datatypes must be compatible. Returns an array
   * with the converted values on success, &false; otherwise.
   *
   * Boolean values are accepted and converted to PostgreSQL
   * booleans. String representations of boolean values are also
   * supported. &null; is converted to PostgreSQL NULL.
   **/
}

/**
 * Insert records into a table from an array.
 **/

function pg_copy_from(
     PgSql\Connection $connection
  ,  string $table_name
  ,  array $rows
  ,  string $separator = "\t"
  ,  string $null_as = "\\\\N"
  ) {

  /**
   * pg_copy_from inserts records into a table from rows. It
   * issues a COPY FROM SQL command internally to insert records.
   **/
}

/**
 * Copy a table to an array.
 **/

function pg_copy_to(
     PgSql\Connection $connection
  ,  string $table_name
  ,  string $separator = "\t"
  ,  string $null_as = "\\\\N"
  ) {

  /**
   * pg_copy_to copies a table to an array. It issues COPY TO SQL
   * command internally to retrieve records.
   **/
}

/**
 * Get the database name.
 **/

function pg_dbname($connection = null) {

  /**
   * pg_dbname returns the name of the database that the given
   * PostgreSQL connection instance.
   **/
}

/**
 * Deletes records.
 **/

function pg_delete(
     PgSql\Connection $connection
  ,  string $table_name
  ,  array $conditions
  ,  int $flags = PGSQL_DML_EXEC
  ) {

  /**
   * pg_delete deletes records from a table specified by the keys
   * and values in conditions.
   *
   * If flags is specified, pg_convert is applied to conditions
   * with the specified flags.
   *
   * By default pg_delete passes raw values. Values must be
   * escaped or the PGSQL_DML_ESCAPE flag must be specified in
   * flags. PGSQL_DML_ESCAPE quotes and escapes
   * parameters/identifiers. Therefore, table/column names become
   * case sensitive.
   *
   * Note that neither escape nor prepared query can protect LIKE
   * query, JSON, Array, Regex, etc. These parameters should be
   * handled according to their contexts. i.e. Escape/validate
   * values.
   **/
}

/**
 * Sync with PostgreSQL backend.
 **/

function pg_end_copy($connection = null) {

  /**
   * pg_end_copy syncs the PostgreSQL frontend (usually a web
   * server process) with the PostgreSQL server after doing a copy
   * operation performed by pg_put_line. pg_end_copy must be
   * issued, otherwise the PostgreSQL server may get out of sync
   * with the frontend and will report an error.
   **/
}

/**
 * Escape a string for insertion into a bytea field.
 **/

function pg_escape_bytea(
     PgSql\Connection $connection
  ,  string $data
  ) {

  /**
   * pg_escape_bytea escapes string for bytea datatype. It returns
   * escaped string.
   *
   * When you SELECT a bytea type, PostgreSQL returns octal byte
   * values prefixed with '\' (e.g. \032). Users are supposed to
   * convert back to binary format manually.
   *
   * This function requires PostgreSQL 7.2 or later. With
   * PostgreSQL 7.2.0 and 7.2.1, bytea values must be cast when you
   * enable multi-byte support. i.e. INSERT INTO test_table (image)
   * VALUES ('$image_escaped'::bytea); PostgreSQL 7.2.2 or later
   * does not need a cast. The exception is when the client and
   * backend character encoding does not match, and there may be
   * multi-byte stream error. User must then cast to bytea to avoid
   * this error.
   **/
}

/**
 * Escape a identifier for insertion into a text field.
 **/

function pg_escape_identifier(
     PgSql\Connection $connection
  ,  string $data
  ) {

  /**
   * pg_escape_identifier escapes a identifier (e.g. table, field
   * names) for querying the database. It returns an escaped
   * identifier string for PostgreSQL server. pg_escape_identifier
   * adds double quotes before and after data. Users should not add
   * double quotes. Use of this function is recommended for
   * identifier parameters in query. For SQL literals (i.e.
   * parameters except bytea), pg_escape_literal or
   * pg_escape_string must be used. For bytea type fields,
   * pg_escape_bytea must be used instead.
   *
   * This function has internal escape code and can also be used
   * with PostgreSQL 8.4 or less.
   **/
}

/**
 * Escape a literal for insertion into a text field.
 **/

function pg_escape_literal(
     PgSql\Connection $connection
  ,  string $data
  ) {

  /**
   * pg_escape_literal escapes a literal for querying the
   * PostgreSQL database. It returns an escaped literal in the
   * PostgreSQL format. pg_escape_literal adds quotes before and
   * after data. Users should not add quotes. Use of this function
   * is recommended instead of pg_escape_string. If the type of the
   * column is bytea, pg_escape_bytea must be used instead. For
   * escaping identifiers (e.g. table, field names),
   * pg_escape_identifier must be used.
   *
   * This function has internal escape code and can also be used
   * with PostgreSQL 8.4 or less.
   **/
}

/**
 * Escape a string for query.
 **/

function pg_escape_string(
     PgSql\Connection $connection
  ,  string $data
  ) {

  /**
   * pg_escape_string escapes a string for querying the database.
   * It returns an escaped string in the PostgreSQL format without
   * quotes. pg_escape_literal is more preferred way to escape SQL
   * parameters for PostgreSQL. addslashes must not be used with
   * PostgreSQL. If the type of the column is bytea,
   * pg_escape_bytea must be used instead. pg_escape_identifier
   * must be used to escape identifiers (e.g. table names, field
   * names)
   *
   * This function requires PostgreSQL 7.2 or later.
   **/
}

/**
 * Sends a request to execute a prepared statement with given.
 * parameters, and waits for the result.
 **/

function pg_execute(
     PgSql\Connection $connection
  ,  string $stmtname
  ,  array $params
  ) {

  /**
   * Sends a request to execute a prepared statement with given
   * parameters, and waits for the result.
   *
   * pg_execute is like pg_query_params, but the command to be
   * executed is specified by naming a previously-prepared
   * statement, instead of giving a query string. This feature
   * allows commands that will be used repeatedly to be parsed and
   * planned just once, rather than each time they are executed.
   * The statement must have been prepared previously in the
   * current session. pg_execute is supported only against
   * PostgreSQL 7.4 or higher connections; it will fail when using
   * earlier versions.
   *
   * The parameters are identical to pg_query_params, except that
   * the name of a prepared statement is given instead of a query
   * string.
   **/
}

/**
 * Fetches all rows in a particular result column as an array.
 **/

function pg_fetch_all_columns( PgSql\Result $result,  int $field = 0) {

  /**
   * pg_fetch_all_columns returns an array that contains all rows
   * (records) in a particular column of the PgSql\Result instance.
   **/
}

/**
 * Fetches all rows from a result as an array.
 **/

function pg_fetch_all(
     PgSql\Result $result
  ,  int $mode = PGSQL_ASSOC
  ) {

  /**
   * pg_fetch_all returns an array that contains all rows
   * (records) in the PgSql\Result instance.
   **/
}

/**
 * Fetch a row as an array.
 **/

function pg_fetch_array(
     PgSql\Result $result
  , $row = null
  ,  int $mode = PGSQL_BOTH
  ) {

  /**
   * pg_fetch_array returns an array that corresponds to the
   * fetched row (record).
   *
   * pg_fetch_array is an extended version of pg_fetch_row. In
   * addition to storing the data in the numeric indices (field
   * number) to the result array, it can also store the data using
   * associative indices (field name). It stores both indices by
   * default.
   *
   * pg_fetch_array is NOT significantly slower than using
   * pg_fetch_row, and is significantly easier to use.
   **/
}

/**
 * Fetch a row as an associative array.
 **/

function pg_fetch_assoc( PgSql\Result $result, $row = null) {

  /**
   * pg_fetch_assoc returns an associative array that corresponds
   * to the fetched row (records).
   *
   * pg_fetch_assoc is equivalent to calling pg_fetch_array with
   * PGSQL_ASSOC as the optional third parameter. It only returns
   * an associative array. If you need the numeric indices, use
   * pg_fetch_row.
   *
   * pg_fetch_assoc is NOT significantly slower than using
   * pg_fetch_row, and is significantly easier to use.
   **/
}

/**
 * Fetch a row as an object.
 **/

function pg_fetch_object(
     PgSql\Result $result
  , $row = null
  ,  string $class = "stdClass"
  ,  array $constructor_args = []
  ) {

  /**
   * pg_fetch_object returns an object with properties that
   * correspond to the fetched row's field names. It can optionally
   * instantiate an object of a specific class, and pass parameters
   * to that class's constructor.
   *
   * Speed-wise, the function is identical to pg_fetch_array, and
   * almost as fast as pg_fetch_row (the difference is
   * insignificant).
   **/
}

/**
 * Returns values from a result instance.
 **/

function pg_fetch_result( PgSql\Result $result, $row,  mixed $field) {

  /**
   * pg_fetch_result returns the value of a particular row and
   * field (column) in an PgSql\Result instance.
   *
   * This function used to be called pg_result.
   **/
}

/**
 * Get a row as an enumerated array.
 **/

function pg_fetch_row(
     PgSql\Result $result
  , $row = null
  ,  int $mode = PGSQL_NUM
  ) {

  /**
   * pg_fetch_row fetches one row of data from the result
   * associated with the specified result instance.
   **/
}

/**
 * Test if a field is SQL NULL.
 **/

function pg_field_is_null( PgSql\Result $result, $row,  mixed $field) {

  /**
   * pg_field_is_null tests if a field in an PgSql\Result instance
   * is SQL NULL or not.
   *
   * This function used to be called pg_fieldisnull.
   **/
}

/**
 * Returns the name of a field.
 **/

function pg_field_name( PgSql\Result $result,  int $field) {

  /**
   * pg_field_name returns the name of the field occupying the
   * given field in the given result instance. Field numbering
   * starts from 0.
   *
   * This function used to be called pg_fieldname.
   **/
}

/**
 * Returns the field number of the named field.
 **/

function pg_field_num( PgSql\Result $result,  string $field) {

  /**
   * pg_field_num will return the number of the field number that
   * corresponds to the field in the given result instance.
   *
   * This function used to be called pg_fieldnum.
   **/
}

/**
 * Returns the printed length.
 **/

function pg_field_prtlen(
     PgSql\Result $result
  , $row
  ,  mixed $field_name_or_number
  ) {

  /**
   * pg_field_prtlen returns the actual printed length (number of
   * characters) of a specific value in a PostgreSQL result. Row
   * numbering starts at 0. This function will return &false; on an
   * error.
   *
   * field_name_or_number can be passed either as an int or as a
   * string. If it is passed as an int, PHP recognises it as the
   * field number, otherwise as field name.
   *
   * See the example given at the pg_field_name page.
   *
   * This function used to be called pg_fieldprtlen.
   **/
}

/**
 * Returns the internal storage size of the named field.
 **/

function pg_field_size( PgSql\Result $result,  int $field) {

  /**
   * pg_field_size returns the internal storage size (in bytes) of
   * the field number in the given PostgreSQL result.
   *
   * This function used to be called pg_fieldsize.
   **/
}

/**
 * Returns the name or oid of the tables field.
 **/

function pg_field_table(
     PgSql\Result $result
  ,  int $field
  ,  bool $oid_only = false
  ) {

  /**
   * pg_field_table returns the name of the table that field
   * belongs to, or the table's oid if oid_only is &true;.
   **/
}

/**
 * Returns the type ID (OID) for the corresponding field number.
 **/

function pg_field_type_oid( PgSql\Result $result,  int $field) {

  /**
   * pg_field_type_oid returns an integer containing the OID of
   * the base type of the given field in the given result instance.
   *
   * You can get more information about the field type by querying
   * PostgreSQL's pg_type system table using the OID obtained with
   * this function. The PostgreSQL format_type function will
   * convert a type OID into an SQL standard type name.
   *
   * If the field uses a PostgreSQL domain (rather than a basic
   * type), it is the OID of the domain's underlying type that is
   * returned, rather than the OID of the domain itself.
   **/
}

/**
 * Returns the type name for the corresponding field number.
 **/

function pg_field_type( PgSql\Result $result,  int $field) {

  /**
   * pg_field_type returns a string containing the base type name
   * of the given field in the given result instance.
   *
   * If the field uses a PostgreSQL domain (rather than a basic
   * type), it is the name of the domain's underlying type that is
   * returned, rather than the name of the domain itself.
   *
   * This function used to be called pg_fieldtype.
   **/
}

/**
 * Flush outbound query data on the connection.
 **/

function pg_flush( PgSql\Connection $connection) {

  /**
   * pg_flush flushes any outbound query data waiting to be sent
   * on the connection.
   **/
}

/**
 * Free result memory.
 **/

function pg_free_result( PgSql\Result $result) {

  /**
   * pg_free_result frees the memory and data associated with the
   * specified PgSql\Result instance.
   *
   * This function need only be called if memory consumption
   * during script execution is a problem. Otherwise, all result
   * memory will be automatically freed when the script ends.
   *
   * This function used to be called pg_freeresult.
   **/
}

/**
 * Gets SQL NOTIFY message.
 **/

function pg_get_notify(
     PgSql\Connection $connection
  ,  int $mode = PGSQL_ASSOC
  ) {

  /**
   * pg_get_notify gets notifications generated by a NOTIFY SQL
   * command. To receive notifications, the LISTEN SQL command must
   * be issued.
   **/
}

/**
 * Gets the backend's process ID.
 **/

function pg_get_pid( PgSql\Connection $connection) {

  /**
   * pg_get_pid gets the backend's (database server process) PID.
   * The PID is useful to determine whether or not a NOTIFY message
   * received via pg_get_notify is sent from another process or
   * not.
   **/
}

/**
 * Get asynchronous query result.
 **/

function pg_get_result( PgSql\Connection $connection) {

  /**
   * pg_get_result gets an PgSql\Result instance from an
   * asynchronous query executed by pg_send_query,
   * pg_send_query_params or pg_send_execute.
   *
   * pg_send_query and the other asynchronous query functions can
   * send multiple queries to a PostgreSQL server and pg_get_result
   * is used to get each query's results, one by one.
   **/
}

/**
 * Returns the host name associated with the connection.
 **/

function pg_host($connection = null) {

  /**
   * pg_host returns the host name of the given PostgreSQL
   * connection instance is connected to.
   **/
}

/**
 * Insert array into table.
 **/

function pg_insert(
     PgSql\Connection $connection
  ,  string $table_name
  ,  array $values
  ,  int $flags = PGSQL_DML_EXEC
  ) {

  /**
   * pg_insert inserts the values of values into the table
   * specified by table_name.
   *
   * If flags is specified, pg_convert is applied to values with
   * the specified flags.
   *
   * By default pg_insert passes raw values. Values must be
   * escaped or the PGSQL_DML_ESCAPE flag must be specified in
   * flags. PGSQL_DML_ESCAPE quotes and escapes
   * parameters/identifiers. Therefore, table/column names become
   * case sensitive.
   *
   * Note that neither escape nor prepared query can protect LIKE
   * query, JSON, Array, Regex, etc. These parameters should be
   * handled according to their contexts. i.e. Escape/validate
   * values.
   **/
}

/**
 * Get the last error message string of a connection.
 **/

function pg_last_error($connection = null) {

  /**
   * pg_last_error returns the last error message for a given
   * connection.
   *
   * Error messages may be overwritten by internal PostgreSQL
   * (libpq) function calls. It may not return an appropriate error
   * message if multiple errors occur inside a PostgreSQL module
   * function.
   *
   * Use pg_result_error, pg_result_error_field, pg_result_status
   * and pg_connection_status for better error handling.
   *
   * This function used to be called pg_errormessage.
   **/
}

/**
 * Returns the last notice message from PostgreSQL server.
 **/

function pg_last_notice(
     PgSql\Connection $connection
  ,  int $mode = PGSQL_NOTICE_LAST
  ) {

  /**
   * pg_last_notice returns the last notice message from the
   * PostgreSQL server on the specified connection. The PostgreSQL
   * server sends notice messages in several cases, for instance
   * when creating a SERIAL column in a table.
   *
   * With pg_last_notice, you can avoid issuing useless queries by
   * checking whether or not the notice is related to your
   * transaction.
   *
   * Notice message tracking can be set to optional by setting 1
   * for pgsql.ignore_notice in &php.ini;.
   *
   * Notice message logging can be set to optional by setting 0
   * for pgsql.log_notice in &php.ini;. Unless pgsql.ignore_notice
   * is set to 0, notice message cannot be logged.
   **/
}

/**
 * Returns the last row's OID.
 **/

function pg_last_oid( PgSql\Result $result) {

  /**
   * pg_last_oid is used to retrieve the OID assigned to an
   * inserted row.
   *
   * OID field became an optional field from PostgreSQL 7.2 and
   * will not be present by default in PostgreSQL 8.1. When the OID
   * field is not present in a table, the programmer must use
   * pg_result_status to check for successful insertion.
   *
   * To get the value of a SERIAL field in an inserted row, it is
   * necessary to use the PostgreSQL CURRVAL function, naming the
   * sequence whose last value is required. If the name of the
   * sequence is unknown, the pg_get_serial_sequence PostgreSQL 8.0
   * function is necessary.
   *
   * PostgreSQL 8.1 has a function LASTVAL that returns the value
   * of the most recently used sequence in the session. This avoids
   * the need for naming the sequence, table or column altogether.
   *
   * This function used to be called pg_getlastoid.
   **/
}

/**
 * Close a large object.
 **/

function pg_lo_close( PgSql\Lob $lob) {

  /**
   * pg_lo_close closes a large object.
   *
   * To use the large object interface, it is necessary to enclose
   * it within a transaction block.
   *
   * This function used to be called pg_loclose.
   **/
}

/**
 * Create a large object.
 **/

function pg_lo_create(
     PgSql\Connection $connection
  ,  mixed $object_id
  ) {

  /**
   * pg_lo_create creates a large object and returns the OID of
   * the large object. PostgreSQL access modes INV_READ, INV_WRITE,
   * and INV_ARCHIVE are not supported, the object is created
   * always with both read and write access. INV_ARCHIVE has been
   * removed from PostgreSQL itself (version 6.3 and above).
   *
   * To use the large object interface, it is necessary to enclose
   * it within a transaction block.
   *
   * Instead of using the large object interface (which has no
   * access controls and is cumbersome to use), try PostgreSQL's
   * bytea column type and pg_escape_bytea.
   *
   * This function used to be called pg_locreate.
   **/
}

/**
 * Export a large object to file.
 **/

function pg_lo_export(
     PgSql\Connection $connection
  ,  int $oid
  ,  string $pathname
  ) {

  /**
   * pg_lo_export takes a large object in a PostgreSQL database
   * and saves its contents to a file on the local filesystem.
   *
   * To use the large object interface, it is necessary to enclose
   * it within a transaction block.
   *
   * This function used to be called pg_loexport.
   **/
}

/**
 * Import a large object from file.
 **/

function pg_lo_import(
     PgSql\Connection $connection
  ,  string $pathname
  ,  mixed $object_id
  ) {

  /**
   * pg_lo_import creates a new large object in the database using
   * a file on the filesystem as its data source.
   *
   * To use the large object interface, it is necessary to enclose
   * it within a transaction block.
   *
   * This function used to be called pg_loimport.
   **/
}

/**
 * Open a large object.
 **/

function pg_lo_open(
     PgSql\Connection $connection
  ,  int $oid
  ,  string $mode
  ) {

  /**
   * pg_lo_open opens a large object in the database and returns
   * an PgSql\Lob instance so that it can be manipulated.
   *
   * Do not close the database connection before closing the
   * PgSql\Lob instance.
   *
   * To use the large object interface, it is necessary to enclose
   * it within a transaction block.
   *
   * This function used to be called pg_loopen.
   **/
}

/**
 * Reads an entire large object and send straight to browser.
 **/

function pg_lo_read_all( PgSql\Lob $lob) {

  /**
   * pg_lo_read_all reads a large object and passes it straight
   * through to the browser after sending all pending headers.
   * Mainly intended for sending binary data like images or sound.
   *
   * To use the large object interface, it is necessary to enclose
   * it within a transaction block.
   *
   * This function used to be called pg_loreadall.
   **/
}

/**
 * Read a large object.
 **/

function pg_lo_read( PgSql\Lob $lob,  int $length = 8192) {

  /**
   * pg_lo_read reads at most length bytes from a large object and
   * returns it as a string.
   *
   * To use the large object interface, it is necessary to enclose
   * it within a transaction block.
   *
   * This function used to be called pg_loread.
   **/
}

/**
 * Seeks position within a large object.
 **/

function pg_lo_seek(
     PgSql\Lob $lob
  ,  int $offset
  ,  int $whence = SEEK_CUR
  ) {

  /**
   * pg_lo_seek seeks a position within an PgSql\Lob instance.
   *
   * To use the large object interface, it is necessary to enclose
   * it within a transaction block.
   **/
}

/**
 * Returns current seek position a of large object.
 **/

function pg_lo_tell( PgSql\Lob $lob) {

  /**
   * pg_lo_tell returns the current position (offset from the
   * beginning) of a large object.
   *
   * To use the large object interface, it is necessary to enclose
   * it within a transaction block.
   **/
}

/**
 * Truncates a large object.
 **/

function pg_lo_truncate( PgSql\Lob $lob,  int $size) {

  /**
   * pg_lo_truncate truncates an PgSql\Lob instance.
   *
   * To use the large object interface, it is necessary to enclose
   * it within a transaction block.
   **/
}

/**
 * Delete a large object.
 **/

function pg_lo_unlink( PgSql\Connection $connection,  int $oid) {

  /**
   * pg_lo_unlink deletes a large object with the oid.
   * &return.success;
   *
   * To use the large object interface, it is necessary to enclose
   * it within a transaction block.
   *
   * This function used to be called pg_lounlink.
   **/
}

/**
 * Write to a large object.
 **/

function pg_lo_write( PgSql\Lob $lob,  string $data, $length = null) {

  /**
   * pg_lo_write writes data into a large object at the current
   * seek position.
   *
   * To use the large object interface, it is necessary to enclose
   * it within a transaction block.
   *
   * This function used to be called pg_lowrite.
   **/
}

/**
 * Get meta data for table.
 **/

function pg_meta_data(
     PgSql\Connection $connection
  ,  string $table_name
  ,  bool $extended = false
  ) {

  /**
   * pg_meta_data returns table definition for table_name as an
   * array.
   **/
}

/**
 * Returns the number of fields in a result.
 **/

function pg_num_fields( PgSql\Result $result) {

  /**
   * pg_num_fields returns the number of fields (columns) in the
   * PgSql\Result instance.
   *
   * This function used to be called pg_numfields.
   **/
}

/**
 * Returns the number of rows in a result.
 **/

function pg_num_rows( PgSql\Result $result) {

  /**
   * pg_num_rows will return the number of rows in an PgSql\Result
   * instance.
   *
   * This function used to be called pg_numrows.
   **/
}

/**
 * Get the options associated with the connection.
 **/

function pg_options($connection = null) {

  /**
   * pg_options will return a string containing the options
   * specified on the given PostgreSQL connection instance.
   **/
}

/**
 * Looks up a current parameter setting of the server.
 **/

function pg_parameter_status(
     PgSql\Connection $connection
  ,  string $param_name
  ) {

  /**
   * Looks up a current parameter setting of the server.
   *
   * Certain parameter values are reported by the server
   * automatically at connection startup or whenever their values
   * change. pg_parameter_status can be used to interrogate these
   * settings. It returns the current value of a parameter if
   * known, or &false; if the parameter is not known.
   *
   * Parameters reported as of PostgreSQL 8.0 include
   * server_version, server_encoding, client_encoding,
   * is_superuser, session_authorization, DateStyle, TimeZone, and
   * integer_datetimes. (server_encoding, TimeZone, and
   * integer_datetimes were not reported by releases before 8.0.)
   * Note that server_version, server_encoding and
   * integer_datetimes cannot change after PostgreSQL startup.
   *
   * PostgreSQL 7.3 or lower servers do not report parameter
   * settings, pg_parameter_status includes logic to obtain values
   * for server_version and client_encoding anyway. Applications
   * are encouraged to use pg_parameter_status rather than ad hoc
   * code to determine these values.
   *
   * On a pre-7.4 PostgreSQL server, changing client_encoding via
   * SET after connection startup will not be reflected by
   * pg_parameter_status.
   **/
}

/**
 * Open a persistent PostgreSQL connection.
 **/

function pg_pconnect( string $connection_string,  int $flags = 0) {

  /**
   * pg_pconnect opens a connection to a PostgreSQL database. It
   * returns an PgSql\Connection instance that is needed by other
   * PostgreSQL functions.
   *
   * If a second call is made to pg_pconnect with the same
   * connection_string as an existing connection, the existing
   * connection will be returned unless you pass
   * PGSQL_CONNECT_FORCE_NEW as flags.
   *
   * To enable persistent connection, the pgsql.allow_persistent
   * &php.ini; directive must be set to "On" (which is the
   * default). The maximum number of persistent connection can be
   * defined with the pgsql.max_persistent &php.ini; directive
   * (defaults to -1 for no limit). The total number of connections
   * can be set with the pgsql.max_links &php.ini; directive.
   *
   * pg_close will not close persistent links generated by
   * pg_pconnect.
   **/
}

/**
 * Ping database connection.
 **/

function pg_ping($connection = null) {

  /**
   * pg_ping pings a database connection and tries to reconnect it
   * if it is broken.
   **/
}

/**
 * Return the port number associated with the connection.
 **/

function pg_port($connection = null) {

  /**
   * pg_port returns the port number that the given PostgreSQL
   * connection instance is connected to.
   **/
}

/**
 * Submits a request to create a prepared statement with the.
 * given parameters, and waits for completion.
 **/

function pg_prepare(
     PgSql\Connection $connection
  ,  string $stmtname
  ,  string $query
  ) {

  /**
   * pg_prepare creates a prepared statement for later execution
   * with pg_execute or pg_send_execute. This feature allows
   * commands that will be used repeatedly to be parsed and planned
   * just once, rather than each time they are executed. pg_prepare
   * is supported only against PostgreSQL 7.4 or higher
   * connections; it will fail when using earlier versions.
   *
   * The function creates a prepared statement named stmtname from
   * the query string, which must contain a single SQL command.
   * stmtname may be "" to create an unnamed statement, in which
   * case any pre-existing unnamed statement is automatically
   * replaced; otherwise it is an error if the statement name is
   * already defined in the current session. If any parameters are
   * used, they are referred to in the query as $1, $2, etc.
   *
   * Prepared statements for use with pg_prepare can also be
   * created by executing SQL PREPARE statements. (But pg_prepare
   * is more flexible since it does not require parameter types to
   * be pre-specified.) Also, although there is no PHP function for
   * deleting a prepared statement, the SQL DEALLOCATE statement
   * can be used for that purpose.
   **/
}

/**
 * Send a NULL-terminated string to PostgreSQL backend.
 **/

function pg_put_line( PgSql\Connection $connection,  string $data) {

  /**
   * pg_put_line sends a NULL-terminated string to the PostgreSQL
   * backend server. This is needed in conjunction with
   * PostgreSQL's COPY FROM command.
   *
   * COPY is a high-speed data loading interface supported by
   * PostgreSQL. Data is passed in without being parsed, and in a
   * single transaction.
   *
   * An alternative to using raw pg_put_line commands is to use
   * pg_copy_from. This is a far simpler interface.
   *
   * The application must explicitly send the two characters "\."
   * on the last line to indicate to the backend that it has
   * finished sending its data, before issuing pg_end_copy.
   *
   * Use of the pg_put_line causes most large object operations,
   * including pg_lo_read and pg_lo_tell, to subsequently fail. You
   * can use pg_copy_from and pg_copy_to instead.
   **/
}

/**
 * Submits a command to the server and waits for the result, with.
 * the ability to pass parameters separately from the SQL command.
 * text.
 **/

function pg_query_params(
     PgSql\Connection $connection
  ,  string $query
  ,  array $params
  ) {

  /**
   * Submits a command to the server and waits for the result,
   * with the ability to pass parameters separately from the SQL
   * command text.
   *
   * pg_query_params is like pg_query, but offers additional
   * functionality: parameter values can be specified separately
   * from the command string proper. pg_query_params is supported
   * only against PostgreSQL 7.4 or higher connections; it will
   * fail when using earlier versions.
   *
   * If parameters are used, they are referred to in the query
   * string as $1, $2, etc. The same parameter may appear more than
   * once in the query; the same value will be used in that case.
   * params specifies the actual values of the parameters. A &null;
   * value in this array means the corresponding parameter is SQL
   * NULL.
   *
   * The primary advantage of pg_query_params over pg_query is
   * that parameter values may be separated from the query string,
   * thus avoiding the need for tedious and error-prone quoting and
   * escaping. Unlike pg_query, pg_query_params allows at most one
   * SQL command in the given string. (There can be semicolons in
   * it, but not more than one nonempty command.)
   **/
}

/**
 * Execute a query.
 **/

function pg_query( PgSql\Connection $connection,  string $query) {

  /**
   * pg_query executes the query on the specified database
   * connection. pg_query_params should be preferred in most cases.
   *
   * If an error occurs, and &false; is returned, details of the
   * error can be retrieved using the pg_last_error function if the
   * connection is valid.
   *
   * Although connection can be omitted, it is not recommended,
   * since it can be the cause of hard to find bugs in scripts.
   *
   * This function used to be called pg_exec. pg_exec is still
   * available for compatibility reasons, but users are encouraged
   * to use the newer name.
   **/
}

/**
 * Returns an individual field of an error report.
 **/

function pg_result_error_field(
     PgSql\Result $result
  ,  int $field_code
  ) {

  /**
   * pg_result_error_field returns one of the detailed error
   * message fields associated with result instance. It is only
   * available against a PostgreSQL 7.4 or above server. The error
   * field is specified by the field_code.
   *
   * Because pg_query and pg_query_params return &false; if the
   * query fails, you must use pg_send_query and pg_get_result to
   * get the result handle.
   *
   * If you need to get additional error information from failed
   * pg_query queries, use pg_set_error_verbosity and pg_last_error
   * and then parse the result.
   **/
}

/**
 * Get error message associated with result.
 **/

function pg_result_error( PgSql\Result $result) {

  /**
   * pg_result_error returns any error message associated with the
   * result instance. Therefore, the user has a better chance of
   * getting the correct error message than with pg_last_error.
   *
   * The function pg_result_error_field can give much greater
   * detail on result errors than pg_result_error.
   *
   * Because pg_query returns &false; if the query fails, you must
   * use pg_send_query and pg_get_result to get the result handle.
   **/
}

/**
 * Set internal row offset in result instance.
 **/

function pg_result_seek( PgSql\Result $result,  int $row) {

  /**
   * pg_result_seek sets the internal row offset in the result
   * instance.
   **/
}

/**
 * Get status of query result.
 **/

function pg_result_status(
     PgSql\Result $result
  ,  int $mode = PGSQL_STATUS_LONG
  ) {

  /**
   * pg_result_status returns the status of the PgSql\Result
   * instance, or the PostgreSQL command completion tag associated
   * with the result
   **/
}

/**
 * Select records.
 **/

function pg_select(
     PgSql\Connection $connection
  ,  string $table_name
  ,  array $conditions
  ,  int $flags = PGSQL_DML_EXEC
  ,  int $mode = PGSQL_ASSOC
  ) {

  /**
   * pg_select selects records specified by conditions which has
   * field=>value. For a successful query, it returns an array
   * containing all records and fields that match the condition
   * specified by conditions.
   *
   * If flags is set, pg_convert is applied to conditions with the
   * specified flags.
   *
   * If mode is set, the return value will be in the form of an
   * array with PGSQL_NUM, an associative array with PGSQL_ASSOC
   * (default) or both with PGSQL_BOTH.
   *
   * By default pg_select passes raw values. Values must be
   * escaped or PGSQL_DML_ESCAPE option must be specified.
   * PGSQL_DML_ESCAPE quotes and escapes parameters/identifiers.
   * Therefore, table/column names became case sensitive.
   *
   * Note that neither escape nor prepared query can protect LIKE
   * query, JSON, Array, Regex, etc. These parameters should be
   * handled according to their contexts. i.e. Escape/validate
   * values.
   **/
}

/**
 * Sends a request to execute a prepared statement with given.
 * parameters, without waiting for the result(s).
 **/

function pg_send_execute(
     PgSql\Connection $connection
  ,  string $statement_name
  ,  array $params
  ) {

  /**
   * Sends a request to execute a prepared statement with given
   * parameters, without waiting for the result(s).
   *
   * This is similar to pg_send_query_params, but the command to
   * be executed is specified by naming a previously-prepared
   * statement, instead of giving a query string. The function's
   * parameters are handled identically to pg_execute. Like
   * pg_execute, it will not work on pre-7.4 versions of
   * PostgreSQL.
   **/
}

/**
 * Sends a request to create a prepared statement with the given.
 * parameters, without waiting for completion.
 **/

function pg_send_prepare(
     PgSql\Connection $connection
  ,  string $statement_name
  ,  string $query
  ) {

  /**
   * Sends a request to create a prepared statement with the given
   * parameters, without waiting for completion.
   *
   * This is an asynchronous version of pg_prepare: it returns
   * &true; if it was able to dispatch the request, and &false; if
   * not. After a successful call, call pg_get_result to determine
   * whether the server successfully created the prepared
   * statement. The function's parameters are handled identically
   * to pg_prepare. Like pg_prepare, it will not work on pre-7.4
   * versions of PostgreSQL.
   **/
}

/**
 * Submits a command and separate parameters to the server.
 * without waiting for the result(s).
 **/

function pg_send_query_params(
     PgSql\Connection $connection
  ,  string $query
  ,  array $params
  ) {

  /**
   * Submits a command and separate parameters to the server
   * without waiting for the result(s).
   *
   * This is equivalent to pg_send_query except that query
   * parameters can be specified separately from the query string.
   * The function's parameters are handled identically to
   * pg_query_params. Like pg_query_params, it will not work on
   * pre-7.4 PostgreSQL connections, and it allows only one command
   * in the query string.
   **/
}

/**
 * Sends asynchronous query.
 **/

function pg_send_query( PgSql\Connection $connection,  string $query) {

  /**
   * pg_send_query sends a query or queries asynchronously to the
   * connection. Unlike pg_query, it can send multiple queries at
   * once to PostgreSQL and get the results one by one using
   * pg_get_result.
   *
   * Script execution is not blocked while the queries are
   * executing. Use pg_connection_busy to check if the connection
   * is busy (i.e. the query is executing). Queries may be
   * cancelled using pg_cancel_query.
   *
   * Although the user can send multiple queries at once, multiple
   * queries cannot be sent over a busy connection. If a query is
   * sent while the connection is busy, it waits until the last
   * query is finished and discards all its results.
   **/
}

/**
 * Set the client encoding.
 **/

function pg_set_client_encoding(
     PgSql\Connection $connection
  ,  string $encoding
  ) {

  /**
   * pg_set_client_encoding sets the client encoding and returns 0
   * if success or -1 if error.
   *
   * PostgreSQL will automatically convert data in the backend
   * database encoding into the frontend encoding.
   *
   * The function used to be called pg_setclientencoding.
   **/
}

/**
 * Determines the visibility of the context's error messages.
 * returned by pg_last_error and pg_result_error.
 **/

function pg_set_error_context_visibility(
     PgSql\Connection $connection
  ,  int $visibility
  ) {

  /**
   * Determines the visibility of the context's error messages
   * returned by pg_last_error and pg_result_error
   **/
}

/**
 * Determines the verbosity of messages returned by.
 * pg_last_error and pg_result_error.
 **/

function pg_set_error_verbosity(
     PgSql\Connection $connection
  ,  int $verbosity
  ) {

  /**
   * Determines the verbosity of messages returned by
   * pg_last_error and pg_result_error.
   *
   * pg_set_error_verbosity sets the verbosity mode, returning the
   * connection's previous setting. In PGSQL_ERRORS_TERSE mode,
   * returned messages include severity, primary text, and position
   * only; this will normally fit on a single line. The default
   * mode (PGSQL_ERRORS_DEFAULT) produces messages that include the
   * above plus any detail, hint, or context fields (these may span
   * multiple lines). The PGSQL_ERRORS_VERBOSE mode includes all
   * available fields. Changing the verbosity does not affect the
   * messages available from already-existing result objects, only
   * subsequently-created ones.
   **/
}

/**
 * Get a read only handle to the socket underlying a PostgreSQL.
 * connection.
 **/

function pg_socket( PgSql\Connection $connection) {

  /**
   * pg_socket returns a read only resource corresponding to the
   * socket underlying the given PostgreSQL connection.
   **/
}

/**
 * Enable tracing a PostgreSQL connection.
 **/

function pg_trace(
     string $filename
  ,  string $mode = "w"
  , $connection = null
  ,  int $trace_mode = 0
  ) {

  /**
   * pg_trace enables tracing of the PostgreSQL frontend/backend
   * communication to a file. To fully understand the results, one
   * needs to be familiar with the internals of PostgreSQL
   * communication protocol.
   *
   * For those who are not, it can still be useful for tracing
   * errors in queries sent to the server, you could do for example
   * grep '^To backend' trace.log and see what queries actually
   * were sent to the PostgreSQL server. For more information,
   * refer to the PostgreSQL Documentation.
   **/
}

/**
 * Returns the current in-transaction status of the server.
 **/

function pg_transaction_status( PgSql\Connection $connection) {

  /**
   * Returns the current in-transaction status of the server.
   *
   * pg_transaction_status will give incorrect results when using
   * a PostgreSQL 7.3 server that has the parameter autocommit set
   * to off. The server-side autocommit feature has been deprecated
   * and does not exist in later server versions.
   **/
}

/**
 * Return the TTY name associated with the connection.
 **/

function pg_tty($connection = null) {

  /**
   * pg_tty returns the TTY name that server side debugging output
   * is sent to on the given PostgreSQL connection instance.
   *
   * pg_tty is obsolete, since the server no longer pays attention
   * to the TTY setting, but the function remains for backwards
   * compatibility.
   **/
}

/**
 * Unescape binary for bytea type.
 **/

function pg_unescape_bytea( string $string) {

  /**
   * pg_unescape_bytea unescapes PostgreSQL bytea data values. It
   * returns the unescaped string, possibly containing binary data.
   *
   * When you SELECT a bytea type, PostgreSQL returns octal byte
   * values prefixed with '\' (e.g. \032). Users are supposed to
   * convert back to binary format manually.
   *
   * This function requires PostgreSQL 7.2 or later. With
   * PostgreSQL 7.2.0 and 7.2.1, bytea values must be cast when you
   * enable multi-byte support. i.e. INSERT INTO test_table (image)
   * VALUES ('$image_escaped'::bytea); PostgreSQL 7.2.2 or later
   * does not need a cast. The exception is when the client and
   * backend character encoding does not match, and there may be
   * multi-byte stream error. User must then cast to bytea to avoid
   * this error.
   **/
}

/**
 * Disable tracing of a PostgreSQL connection.
 **/

function pg_untrace($connection = null) {

  /**
   * Stop tracing started by pg_trace.
   **/
}

/**
 * Update table.
 **/

function pg_update(
     PgSql\Connection $connection
  ,  string $table_name
  ,  array $values
  ,  array $conditions
  ,  int $flags = PGSQL_DML_EXEC
  ) {

  /**
   * pg_update updates records that matches conditions with
   * values.
   *
   * If flags is specified, pg_convert is applied to values with
   * the specified flags.
   *
   * By default pg_update passes raw values. Values must be
   * escaped or the PGSQL_DML_ESCAPE flag must be specified in
   * flags. PGSQL_DML_ESCAPE quotes and escapes
   * parameters/identifiers. Therefore, table/column names become
   * case sensitive.
   *
   * Note that neither escape nor prepared query can protect LIKE
   * query, JSON, Array, Regex, etc. These parameters should be
   * handled according to their contexts. i.e. Escape/validate
   * values.
   **/
}

/**
 * Returns an array with client, protocol and server version.
 * (when available).
 **/

function pg_version($connection = null) {

  /**
   * pg_version returns an array with the client, protocol and
   * server version. Protocol and server versions are only
   * available if PHP was compiled with PostgreSQL 7.4 or later.
   *
   * For more detailed server information, use
   * pg_parameter_status.
   **/
}

/**
 * Inserts a breakpoint at a line in a file.
 **/

function phpdbg_break_file( string $file,  int $line) {

  /**
   * Insert a breakpoint at the given line in the given file.
   **/
}

/**
 * Inserts a breakpoint at entry to a function.
 **/

function phpdbg_break_function( string $function) {

  /**
   * Insert a breakpoint at the entry to the given function.
   **/
}

/**
 * Inserts a breakpoint at entry to a method.
 **/

function phpdbg_break_method( string $class,  string $method) {

  /**
   * Insert a breakpoint at the entry to the given method of the
   * given class.
   **/
}

/**
 * Inserts a breakpoint at the next opcode.
 **/

function phpdbg_break_next() {

  /**
   * Insert a breakpoint at the next opcode.
   **/
}

/**
 * Clears all breakpoints.
 **/

function phpdbg_clear() {

  /**
   * Clear all breakpoints that have been set, either via one of
   * the phpdbg_break_* functions or interactively in the console.
   **/
}

/**
 * Sets the color of certain elements.
 **/

function phpdbg_color( int $element,  string $color) {

  /**
   * Set the color of the given element.
   **/
}

/**
 **/

function phpdbg_end_oplog( array $options = []) {

  /**
   **/
}

/**
 * Attempts to set the execution context.
 **/

function phpdbg_exec( string $context) {

  /**
   **/
}

/**
 **/

function phpdbg_get_executable( array $options = []) {

  /**
   **/
}

/**
 * Sets the command prompt.
 **/

function phpdbg_prompt( string $string) {

  /**
   * Set the command prompt to the given string.
   **/
}

/**
 **/

function phpdbg_start_oplog() {

  /**
   **/
}

/**
 * Determine accessibility of a file.
 **/

function posix_access( string $filename,  int $flags = 0) {

  /**
   * posix_access checks the user's permission of a file.
   **/
}

/**
 * Get path name of controlling terminal.
 **/

function posix_ctermid() {

  /**
   * Generates a string which is the pathname for the current
   * controlling terminal for the process. On error this will set
   * errno, which can be checked using posix_get_last_error
   **/
}

/**
 * Determine accessibility of a file.
 **/

function posix_eaccess( string $filename,  int $flags = 0) {

  /**
   * posix_eaccess checks the effective user's permission of a
   * file
   **/
}

/**
 * &Alias; posix_get_last_error.
 **/

function () {

  /**
   **/
}

/**
 * Returns the value of a configurable limit.
 **/

function posix_fpathconf($file_descriptor,  int $name) {

  /**
   * Returns the value of a configurable limit from name for
   * file_descriptor.
   **/
}

/**
 * Retrieve the error number set by the last posix function that.
 * failed.
 **/

function posix_get_last_error() {

  /**
   * Retrieve the error number set by the last posix function that
   * failed. The system error message associated with the errno may
   * be checked with posix_strerror.
   **/
}

/**
 * Pathname of current directory.
 **/

function posix_getcwd() {

  /**
   * Gets the absolute pathname of the script's current working
   * directory. On error, it sets errno which can be checked using
   * posix_get_last_error
   **/
}

/**
 * Return the effective group ID of the current process.
 **/

function posix_getegid() {

  /**
   * Return the numeric effective group ID of the current process.
   **/
}

/**
 * Return the effective user ID of the current process.
 **/

function posix_geteuid() {

  /**
   * Return the numeric effective user ID of the current process.
   * See also posix_getpwuid for information on how to convert this
   * into a useable username.
   **/
}

/**
 * Return the real group ID of the current process.
 **/

function posix_getgid() {

  /**
   * Return the numeric real group ID of the current process.
   **/
}

/**
 * Return info about a group by group id.
 **/

function posix_getgrgid( int $group_id) {

  /**
   * Gets information about a group provided its id.
   **/
}

/**
 * Return info about a group by name.
 **/

function posix_getgrnam( string $name) {

  /**
   * Gets information about a group provided its name.
   **/
}

/**
 * Return the group set of the current process.
 **/

function posix_getgroups() {

  /**
   * Gets the group set of the current process.
   **/
}

/**
 * Return login name.
 **/

function posix_getlogin() {

  /**
   * Returns the login name of the user owning the current
   * process.
   **/
}

/**
 * Get process group id for job control.
 **/

function posix_getpgid( int $process_id) {

  /**
   * Returns the process group identifier of the process
   * process_id&return.falseforfailure;.
   **/
}

/**
 * Return the current process group identifier.
 **/

function posix_getpgrp() {

  /**
   * Return the process group identifier of the current process.
   **/
}

/**
 * Return the current process identifier.
 **/

function posix_getpid() {

  /**
   * Return the process identifier of the current process.
   **/
}

/**
 * Return the parent process identifier.
 **/

function posix_getppid() {

  /**
   * Return the process identifier of the parent process of the
   * current process.
   **/
}

/**
 * Return info about a user by username.
 **/

function posix_getpwnam( string $username) {

  /**
   * Returns an array of information about the given user.
   **/
}

/**
 * Return info about a user by user id.
 **/

function posix_getpwuid( int $user_id) {

  /**
   * Returns an array of information about the user referenced by
   * the given user ID.
   **/
}

/**
 * Return info about system resource limits.
 **/

function posix_getrlimit($resource = null) {

  /**
   * posix_getrlimit returns an array of information about the
   * current resource's soft and hard limits.
   **/
}

/**
 * Get the current sid of the process.
 **/

function posix_getsid( int $process_id) {

  /**
   * Return the session id of the process process_id. The session
   * id of a process is the process group id of the session leader.
   **/
}

/**
 * Return the real user ID of the current process.
 **/

function posix_getuid() {

  /**
   * Return the numeric real user ID of the current process.
   **/
}

/**
 * Calculate the group access list.
 **/

function posix_initgroups( string $username,  int $group_id) {

  /**
   * Calculates the group access list for the user specified in
   * name.
   **/
}

/**
 * Determine if a file descriptor is an interactive terminal.
 **/

function posix_isatty($file_descriptor) {

  /**
   * Determines if the file descriptor file_descriptor refers to a
   * valid terminal type device.
   **/
}

/**
 * Send a signal to a process.
 **/

function posix_kill( int $process_id,  int $signal) {

  /**
   * Send the signal signal to the process with the process
   * identifier process_id.
   **/
}

/**
 * Create a fifo special file (a named pipe).
 **/

function posix_mkfifo( string $filename,  int $permissions) {

  /**
   * posix_mkfifo creates a special FIFO file which exists in the
   * file system and acts as a bidirectional communication endpoint
   * for processes.
   **/
}

/**
 * Create a special or ordinary file (POSIX.1).
 **/

function posix_mknod(
     string $filename
  ,  int $flags
  ,  int $major = 0
  ,  int $minor = 0
  ) {

  /**
   * Creates a special or ordinary file.
   **/
}

/**
 * Returns the value of a configurable limit.
 **/

function posix_pathconf( string $path,  int $name) {

  /**
   * Returns the value of a configurable limit from name for a
   * path
   **/
}

/**
 * Set the effective GID of the current process.
 **/

function posix_setegid( int $group_id) {

  /**
   * Set the effective group ID of the current process. This is a
   * privileged function and needs appropriate privileges (usually
   * root) on the system to be able to perform this function.
   **/
}

/**
 * Set the effective UID of the current process.
 **/

function posix_seteuid( int $user_id) {

  /**
   * Set the effective user ID of the current process. This is a
   * privileged function and needs appropriate privileges (usually
   * root) on the system to be able to perform this function.
   **/
}

/**
 * Set the GID of the current process.
 **/

function posix_setgid( int $group_id) {

  /**
   * Set the real group ID of the current process. This is a
   * privileged function and needs appropriate privileges (usually
   * root) on the system to be able to perform this function. The
   * appropriate order of function calls is posix_setgid first,
   * posix_setuid last.
   *
   * If the caller is a super user, this will also set the
   * effective group id.
   **/
}

/**
 * Set process group id for job control.
 **/

function posix_setpgid( int $process_id,  int $process_group_id) {

  /**
   * Let the process process_id join the process group
   * process_group_id.
   **/
}

/**
 * Set system resource limits.
 **/

function posix_setrlimit(
     int $resource
  ,  int $soft_limit
  ,  int $hard_limit
  ) {

  /**
   * posix_setrlimit sets the soft and hard limits for a given
   * system resource.
   **/
}

/**
 * Make the current process a session leader.
 **/

function posix_setsid() {

  /**
   * Make the current process a session leader.
   **/
}

/**
 * Set the UID of the current process.
 **/

function posix_setuid( int $user_id) {

  /**
   * Set the real user ID of the current process. This is a
   * privileged function that needs appropriate privileges (usually
   * root) on the system to be able to perform this function.
   **/
}

/**
 * Retrieve the system error message associated with the given.
 * errno.
 **/

function posix_strerror( int $error_code) {

  /**
   * Returns the POSIX system error message associated with the
   * given error_code. You may get the error_code parameter by
   * calling posix_get_last_error.
   **/
}

/**
 * Returns system runtime information.
 **/

function posix_sysconf( int $conf_id) {

  /**
   * Returns system runtime information.
   **/
}

/**
 * Get process times.
 **/

function posix_times() {

  /**
   * Gets information about the current CPU usage.
   **/
}

/**
 * Determine terminal device name.
 **/

function posix_ttyname($file_descriptor) {

  /**
   * Returns a string for the absolute path to the current
   * terminal device that is open on the file descriptor
   * file_descriptor.
   **/
}

/**
 * Get system name.
 **/

function posix_uname() {

  /**
   * Gets information about the system.
   *
   * Posix requires that assumptions must not be made about the
   * format of the values, e.g. the assumption that a release may
   * contain three digits or anything else returned by this
   * function.
   **/
}

/**
 * Add bookmark to current page.
 **/

function ps_add_bookmark(
     resource $psdoc
  ,  string $text
  ,  int $parent = 0
  ,  int $open = 0
  ) {

  /**
   * Adds a bookmark for the current page. Bookmarks usually
   * appear in PDF-Viewers left of the page in a hierarchical tree.
   * Clicking on a bookmark will jump to the given page.
   **/
}

/**
 * Adds link which launches file.
 **/

function ps_add_launchlink(
     resource $psdoc
  ,  float $llx
  ,  float $lly
  ,  float $urx
  ,  float $ury
  ,  string $filename
  ) {

  /**
   * Places a hyperlink at the given position pointing to a file
   * program which is being started when clicked on. The
   * hyperlink's source position is a rectangle with its lower left
   * corner at (llx, lly) and its upper right corner at (urx, ury).
   * The rectangle has by default a thin blue border.
   **/
}

/**
 * Adds link to a page in the same document.
 **/

function ps_add_locallink(
     resource $psdoc
  ,  float $llx
  ,  float $lly
  ,  float $urx
  ,  float $ury
  ,  int $page
  ,  string $dest
  ) {

  /**
   * Places a hyperlink at the given position pointing to a page
   * in the same document. Clicking on the link will jump to the
   * given page. The first page in a document has number 1.
   *
   * The hyperlink's source position is a rectangle with its lower
   * left corner at (llx, lly) and its upper right corner at (urx,
   * ury). The rectangle has by default a thin blue border.
   **/
}

/**
 * Adds note to current page.
 **/

function ps_add_note(
     resource $psdoc
  ,  float $llx
  ,  float $lly
  ,  float $urx
  ,  float $ury
  ,  string $contents
  ,  string $title
  ,  string $icon
  ,  int $open
  ) {

  /**
   * Adds a note at a certain position on the page. Notes are like
   * little rectangular sheets with text on it, which can be placed
   * anywhere on a page. They are shown either folded or unfolded.
   * If folded, the specified icon is used as a placeholder.
   **/
}

/**
 * Adds link to a page in a second pdf document.
 **/

function ps_add_pdflink(
     resource $psdoc
  ,  float $llx
  ,  float $lly
  ,  float $urx
  ,  float $ury
  ,  string $filename
  ,  int $page
  ,  string $dest
  ) {

  /**
   * Places a hyperlink at the given position pointing to a second
   * pdf document. Clicking on the link will branch to the document
   * at the given page. The first page in a document has number 1.
   *
   * The hyperlink's source position is a rectangle with its lower
   * left corner at (llx, lly) and its upper right corner at (urx,
   * ury). The rectangle has by default a thin blue border.
   **/
}

/**
 * Adds link to a web location.
 **/

function ps_add_weblink(
     resource $psdoc
  ,  float $llx
  ,  float $lly
  ,  float $urx
  ,  float $ury
  ,  string $url
  ) {

  /**
   * Places a hyperlink at the given position pointing to a web
   * page. The hyperlink's source position is a rectangle with its
   * lower left corner at (llx, lly) and its upper right corner at
   * (urx, ury). The rectangle has by default a thin blue border.
   **/
}

/**
 * Draws an arc counterclockwise.
 **/

function ps_arc(
     resource $psdoc
  ,  float $x
  ,  float $y
  ,  float $radius
  ,  float $alpha
  ,  float $beta
  ) {

  /**
   * Draws a portion of a circle with at middle point at (x, y).
   * The arc starts at an angle of alpha and ends at an angle of
   * beta. It is drawn counterclockwise (use ps_arcn to draw
   * clockwise). The subpath added to the current path starts on
   * the arc at angle alpha and ends on the arc at angle beta.
   **/
}

/**
 * Draws an arc clockwise.
 **/

function ps_arcn(
     resource $psdoc
  ,  float $x
  ,  float $y
  ,  float $radius
  ,  float $alpha
  ,  float $beta
  ) {

  /**
   * Draws a portion of a circle with at middle point at (x, y).
   * The arc starts at an angle of alpha and ends at an angle of
   * beta. It is drawn clockwise (use ps_arc to draw
   * counterclockwise). The subpath added to the current path
   * starts on the arc at angle beta and ends on the arc at angle
   * alpha.
   **/
}

/**
 * Start a new page.
 **/

function ps_begin_page(
     resource $psdoc
  ,  float $width
  ,  float $height
  ) {

  /**
   * Starts a new page. Although the parameters width and height
   * imply a different page size for each page, this is not
   * possible in PostScript. The first call of ps_begin_page will
   * set the page size for the whole document. Consecutive calls
   * will have no effect, except for creating a new page. The
   * situation is different if you intent to convert the PostScript
   * document into PDF. This function places pdfmarks into the
   * document which can set the size for each page indiviually. The
   * resulting PDF document will have different page sizes.
   *
   * Though PostScript does not know different page sizes, pslib
   * places a bounding box for each page into the document. This
   * size is evaluated by some PostScript viewers and will have
   * precedence over the BoundingBox in the Header of the document.
   * This can lead to unexpected results when you set a BoundingBox
   * whose lower left corner is not (0, 0), because the bounding
   * box of the page will always have a lower left corner (0, 0)
   * and overwrites the global setting.
   *
   * Each page is encapsulated into save/restore. This means, that
   * most of the settings made on one page will not be retained on
   * the next page.
   *
   * If there is up to the first call of ps_begin_page no call of
   * ps_findfont, then the header of the PostScript document will
   * be output and the bounding box will be set to the size of the
   * first page. The lower left corner of the bounding box is set
   * to (0, 0). If ps_findfont was called before, then the header
   * has been output already, and the document will not have a
   * valid bounding box. In order to prevent this, one should call
   * ps_set_info to set the info field BoundingBox and possibly
   * Orientation before any ps_findfont or ps_begin_page calls.
   *
   * Up to version 0.2.6 of pslib, this function will always
   * overwrite the BoundingBox and Orientation, if it has been set
   * before with ps_set_info and ps_findfont has not been called
   * before.
   **/
}

/**
 * Start a new pattern.
 **/

function ps_begin_pattern(
     resource $psdoc
  ,  float $width
  ,  float $height
  ,  float $xstep
  ,  float $ystep
  ,  int $painttype
  ) {

  /**
   * Starts a new pattern. A pattern is like a page containing
   * e.g. a drawing which can be used for filling areas. It is used
   * like a color by calling ps_setcolor and setting the color
   * space to pattern.
   **/
}

/**
 * Start a new template.
 **/

function ps_begin_template(
     resource $psdoc
  ,  float $width
  ,  float $height
  ) {

  /**
   * Starts a new template. A template is called a form in the
   * postscript language. It is created similar to a pattern but
   * used like an image. Templates are often used for drawings
   * which are placed several times through out the document, e.g.
   * like a company logo. All drawing functions may be used within
   * a template. The template will not be drawn until it is placed
   * by ps_place_image.
   **/
}

/**
 * Draws a circle.
 **/

function ps_circle(
     resource $psdoc
  ,  float $x
  ,  float $y
  ,  float $radius
  ) {

  /**
   * Draws a circle with its middle point at (x, y). The circle
   * starts and ends at position (x+radius, y). If this function is
   * called outside a path it will start a new path. If it is
   * called within a path it will add the circle as a subpath. If
   * the last drawing operation does not end in point (x+radius, y)
   * then there will be a gap in the path.
   **/
}

/**
 * Clips drawing to current path.
 **/

function ps_clip( resource $psdoc) {

  /**
   * Takes the current path and uses it to define the border of a
   * clipping area. Everything drawn outside of that area will not
   * be visible.
   **/
}

/**
 * Closes image and frees memory.
 **/

function ps_close_image( resource $psdoc,  int $imageid) {

  /**
   * Closes an image and frees its resources. Once an image is
   * closed it cannot be used anymore.
   **/
}

/**
 * Closes a PostScript document.
 **/

function ps_close( resource $psdoc) {

  /**
   * Closes the PostScript document.
   *
   * This function writes the trailer of the PostScript document.
   * It also writes the bookmark tree. ps_close does not free any
   * resources, which is done by ps_delete.
   *
   * This function is also called by ps_delete if it has not been
   * called before.
   **/
}

/**
 * Closes and strokes path.
 **/

function ps_closepath_stroke( resource $psdoc) {

  /**
   * Connects the last point with first point of a path and draws
   * the resulting closed line.
   **/
}

/**
 * Closes path.
 **/

function ps_closepath( resource $psdoc) {

  /**
   * Connects the last point with the first point of a path. The
   * resulting path can be used for stroking, filling, clipping,
   * etc..
   **/
}

/**
 * Continue text in next line.
 **/

function ps_continue_text( resource $psdoc,  string $text) {

  /**
   * Output a text one line below the last line. The line spacing
   * is taken from the value "leading" which must be set with
   * ps_set_value. The actual position of the text is determined by
   * the values "textx" and "texty" which can be requested with
   * ps_get_value
   **/
}

/**
 * Draws a curve.
 **/

function ps_curveto(
     resource $psdoc
  ,  float $x1
  ,  float $y1
  ,  float $x2
  ,  float $y2
  ,  float $x3
  ,  float $y3
  ) {

  /**
   * Add a section of a cubic Bézier curve described by the three
   * given control points to the current path.
   **/
}

/**
 * Deletes all resources of a PostScript document.
 **/

function ps_delete( resource $psdoc) {

  /**
   * Mainly frees memory used by the document. Also closes a file,
   * if it was not closed before with ps_close. You should in any
   * case close the file with ps_close before, because ps_close not
   * just closes the file but also outputs a trailor containing
   * PostScript comments like the number of pages in the document
   * and adding the bookmark hierarchy.
   **/
}

/**
 * End a page.
 **/

function ps_end_page( resource $psdoc) {

  /**
   * Ends a page which was started with ps_begin_page. Ending a
   * page will leave the current drawing context, which e.g.
   * requires to reload fonts if they were loading within the page,
   * and to set many other drawing parameters like the line width,
   * or color.
   **/
}

/**
 * End a pattern.
 **/

function ps_end_pattern( resource $psdoc) {

  /**
   * Ends a pattern which was started with ps_begin_pattern. Once
   * a pattern has been ended, it can be used like a color to fill
   * areas.
   **/
}

/**
 * End a template.
 **/

function ps_end_template( resource $psdoc) {

  /**
   * Ends a template which was started with ps_begin_template.
   * Once a template has been ended, it can be used like an image.
   **/
}

/**
 * Fills and strokes the current path.
 **/

function ps_fill_stroke( resource $psdoc) {

  /**
   * Fills and draws the path constructed with previously called
   * drawing functions like ps_lineto.
   **/
}

/**
 * Fills the current path.
 **/

function ps_fill( resource $psdoc) {

  /**
   * Fills the path constructed with previously called drawing
   * functions like ps_lineto.
   **/
}

/**
 * Loads a font.
 **/

function ps_findfont(
     resource $psdoc
  ,  string $fontname
  ,  string $encoding
  ,  bool $embed = false
  ) {

  /**
   * Loads a font for later use. Before text is output with a
   * loaded font it must be set with ps_setfont. This function
   * needs the adobe font metric file in order to calculate the
   * space used up by the characters. A font which is loaded within
   * a page will only be available on that page. Fonts which are to
   * be used in the complete document have to be loaded before the
   * first call of ps_begin_page. Calling ps_findfont between pages
   * will make that font available for all following pages.
   *
   * The name of the afm file must be fontname.afm. If the font
   * shall be embedded the file fontname.pfb containing the font
   * outline must be present as well.
   *
   * Calling ps_findfont before the first page requires to output
   * the postscript header which includes the BoundingBox for the
   * whole document. Usually the BoundingBox is set with the first
   * call of ps_begin_page which now comes after ps_findfont.
   * Consequently the BoundingBox has not been set and a warning
   * will be issued when ps_findfont is called. In order to prevent
   * this situation, one should call ps_set_parameter to set the
   * BoundingBox before ps_findfont is called.
   **/
}

/**
 * Fetches the full buffer containig the generated PS data.
 **/

function ps_get_buffer( resource $psdoc) {

  /**
   * This function is not implemented yet. It will always return an
   * empty string. The idea for a later implementation is to write
   * the contents of the postscript file into an internal buffer if
   * in memory creation is requested, and retrieve the buffer
   * content with this function. Currently, documents created in
   * memory are send to the browser without buffering.
   **/
}

/**
 * Gets certain parameters.
 **/

function ps_get_parameter(
     resource $psdoc
  ,  string $name
  ,  float $modifier
  ) {

  /**
   * Gets several parameters which were directly set by
   * ps_set_parameter or indirectly by one of the other functions.
   * Parameters are by definition string values. This function
   * cannot be used to retrieve resources which were also set by
   * ps_set_parameter.
   *
   * The parameter name can have the following values.
   *
   * fontname The name of the currently active font or the font
   * whose identifier is passed in parameter modifier. fontencoding
   * The encoding of the currently active font. dottedversion The
   * version of the underlying pslib library in the format
   * <major>.<minor>.<subminor> scope The current drawing scope.
   * Can be object, document, null, page, pattern, path, template,
   * prolog, font, glyph. ligaturedisolvechar The character which
   * dissolves a ligature. If your are using a font which contains
   * the ligature `ff' and `|' is the char to dissolve the
   * ligature, then `f|f' will result in two `f' instead of the
   * ligature `ff'. imageencoding The encoding used for encoding
   * images. Can be either hex or 85. hex encoding uses two bytes
   * in the postscript file each byte in the image. 85 stand for
   * Ascii85 encoding. linenumbermode Set to paragraph if lines are
   * numbered within a paragraph or box if they are numbered within
   * the surrounding box. linebreak Only used if text is output
   * with ps_show_boxed. If set to &true; a carriage return will
   * add a line break. parbreak Only used if text is output with
   * ps_show_boxed. If set to &true; a carriage return will start a
   * new paragraph. hyphenation Only used if text is output with
   * ps_show_boxed. If set to &true; the paragraph will be
   * hyphenated if a hypen dictionary is set and exists. hyphendict
   * Filename of the dictionary used for hyphenation pattern.
   *
   * The name of the currently active font or the font whose
   * identifier is passed in parameter modifier.
   *
   * The encoding of the currently active font.
   *
   * The version of the underlying pslib library in the format
   * <major>.<minor>.<subminor>
   *
   * The current drawing scope. Can be object, document, null,
   * page, pattern, path, template, prolog, font, glyph.
   *
   * The character which dissolves a ligature. If your are using a
   * font which contains the ligature `ff' and `|' is the char to
   * dissolve the ligature, then `f|f' will result in two `f'
   * instead of the ligature `ff'.
   *
   * The encoding used for encoding images. Can be either hex or
   * 85. hex encoding uses two bytes in the postscript file each
   * byte in the image. 85 stand for Ascii85 encoding.
   *
   * Set to paragraph if lines are numbered within a paragraph or
   * box if they are numbered within the surrounding box.
   *
   * Only used if text is output with ps_show_boxed. If set to
   * &true; a carriage return will add a line break.
   *
   * Only used if text is output with ps_show_boxed. If set to
   * &true; a carriage return will start a new paragraph.
   *
   * Only used if text is output with ps_show_boxed. If set to
   * &true; the paragraph will be hyphenated if a hypen dictionary
   * is set and exists.
   *
   * Filename of the dictionary used for hyphenation pattern.
   **/
}

/**
 * Gets certain values.
 **/

function ps_get_value(
     resource $psdoc
  ,  string $name
  ,  float $modifier
  ) {

  /**
   * Gets several values which were set by ps_set_value. Values are
   * by definition float values.
   *
   * The parameter name can have the following values.
   *
   * fontsize The size of the currently active font or the font
   * whose identifier is passed in parameter modifier. font The
   * currently active font itself. imagewidth The width of the
   * image whose id is passed in the parameter modifier.
   * imageheight The height of the image whose id is passed in the
   * parameter modifier. capheight The height of a capital M in the
   * currently active font or the font whose identifier is passed
   * in parameter modifier. ascender The ascender of the currently
   * active font or the font whose identifier is passed in
   * parameter modifier. descender The descender of the currently
   * active font or the font whose identifier is passed in
   * parameter modifier. italicangle The italicangle of the
   * currently active font or the font whose identifier is passed
   * in parameter modifier. underlineposition The underlineposition
   * of the currently active font or the font whose identifier is
   * passed in parameter modifier. underlinethickness The
   * underlinethickness of the currently active font or the font
   * whose identifier is passed in parameter modifier. textx The
   * current x-position for text output. texty The current
   * y-position for text output. textrendering The current mode for
   * text rendering. textrise The space by which text is risen
   * above the base line. leading The distance between text lines
   * in points. wordspacing The space between words as a multiple
   * of the width of a space char. charspacing The space between
   * chars. If charspacing is != 0.0 ligatures will always be
   * dissolved. hyphenminchars Minimum number of chars hyphenated
   * at the end of a word. parindent Indention of the first n line
   * in a paragraph. numindentlines Number of line in a paragraph
   * to indent if parindent != 0.0. parskip Distance between
   * paragraphs. linenumberspace Overall space in front of each
   * line for the line number. linenumbersep Space between the line
   * and the line number. major The major version number of pslib.
   * minor The minor version number of pslib. subminor, revision
   * The subminor version number of pslib.
   *
   * The size of the currently active font or the font whose
   * identifier is passed in parameter modifier.
   *
   * The currently active font itself.
   *
   * The width of the image whose id is passed in the parameter
   * modifier.
   *
   * The height of the image whose id is passed in the parameter
   * modifier.
   *
   * The height of a capital M in the currently active font or the
   * font whose identifier is passed in parameter modifier.
   *
   * The ascender of the currently active font or the font whose
   * identifier is passed in parameter modifier.
   *
   * The descender of the currently active font or the font whose
   * identifier is passed in parameter modifier.
   *
   * The italicangle of the currently active font or the font
   * whose identifier is passed in parameter modifier.
   *
   * The underlineposition of the currently active font or the
   * font whose identifier is passed in parameter modifier.
   *
   * The underlinethickness of the currently active font or the
   * font whose identifier is passed in parameter modifier.
   *
   * The current x-position for text output.
   *
   * The current y-position for text output.
   *
   * The current mode for text rendering.
   *
   * The space by which text is risen above the base line.
   *
   * The distance between text lines in points.
   *
   * The space between words as a multiple of the width of a space
   * char.
   *
   * The space between chars. If charspacing is != 0.0 ligatures
   * will always be dissolved.
   *
   * Minimum number of chars hyphenated at the end of a word.
   *
   * Indention of the first n line in a paragraph.
   *
   * Number of line in a paragraph to indent if parindent != 0.0.
   *
   * Distance between paragraphs.
   *
   * Overall space in front of each line for the line number.
   *
   * Space between the line and the line number.
   *
   * The major version number of pslib.
   *
   * The minor version number of pslib.
   *
   * The subminor version number of pslib.
   **/
}

/**
 * Hyphenates a word.
 **/

function ps_hyphenate( resource $psdoc,  string $text) {

  /**
   * Hyphenates the passed word. ps_hyphenate evaluates the value
   * hyphenminchars (set by ps_set_value) and the parameter
   * hyphendict (set by ps_set_parameter). hyphendict must be set
   * before calling this function.
   *
   * This function requires the locale category LC_CTYPE to be set
   * properly. This is done when the extension is initialized by
   * using the environment variables. On Unix systems read the man
   * page of locale for more information.
   **/
}

/**
 * Reads an external file with raw PostScript code.
 **/

function ps_include_file( resource $psdoc,  string $file) {

  /**
   * &warn.undocumented.func;
   **/
}

/**
 * Draws a line.
 **/

function ps_lineto( resource $psdoc,  float $x,  float $y) {

  /**
   * Adds a straight line from the current point to the given
   * coordinates to the current path. Use ps_moveto to set the
   * starting point of the line.
   **/
}

/**
 * Create spot color.
 **/

function ps_makespotcolor(
     resource $psdoc
  ,  string $name
  ,  int $reserved = 0
  ) {

  /**
   * Creates a spot color from the current fill color. The fill
   * color must be defined in rgb, cmyk or gray colorspace. The
   * spot color name can be an arbitrary name. A spot color can be
   * set as any color with ps_setcolor. When the document is not
   * printed but displayed by an postscript viewer the given color
   * in the specified color space is use.
   **/
}

/**
 * Sets current point.
 **/

function ps_moveto( resource $psdoc,  float $x,  float $y) {

  /**
   * Sets the current point to new coordinates. If this is the
   * first call of ps_moveto after a previous path has been ended
   * then it will start a new path. If this function is called in
   * the middle of a path it will just set the current point and
   * start a subpath.
   **/
}

/**
 * Creates a new PostScript document object.
 **/

function ps_new() {

  /**
   * Creates a new document instance. It does not create the file
   * on disk or in memory, it just sets up everything. ps_new is
   * usually followed by a call of ps_open_file to actually create
   * the postscript document.
   **/
}

/**
 * Opens a file for output.
 **/

function ps_open_file( resource $psdoc,  string $filename) {

  /**
   * Creates a new file on disk and writes the PostScript document
   * into it. The file will be closed when ps_close is called.
   **/
}

/**
 * Opens image from file.
 **/

function ps_open_image_file(
     resource $psdoc
  ,  string $type
  ,  string $filename
  ,  string $stringparam
  ,  int $intparam = 0
  ) {

  /**
   * Loads an image for later use.
   **/
}

/**
 * Reads an image for later placement.
 **/

function ps_open_image(
     resource $psdoc
  ,  string $type
  ,  string $source
  ,  string $data
  ,  int $lenght
  ,  int $width
  ,  int $height
  ,  int $components
  ,  int $bpc
  ,  string $params
  ) {

  /**
   * Reads an image which is already available in memory. The
   * parameter source is currently not evaluated and assumed to be
   * memory. The image data is a sequence of pixels starting in th
   * upper left corner and ending in the lower right corner. Each
   * pixel consists of components color components, and each
   * component has bpc bits.
   **/
}

/**
 * Takes an GD image and returns an image for placement in a PS.
 * document.
 **/

function ps_open_memory_image( resource $psdoc,  int $gd) {

  /**
   * &warn.undocumented.func;
   **/
}

/**
 * Places image on the page.
 **/

function ps_place_image(
     resource $psdoc
  ,  int $imageid
  ,  float $x
  ,  float $y
  ,  float $scale
  ) {

  /**
   * Places a formerly loaded image on the page. The image can be
   * scaled. If the image shall be rotated as well, you will have
   * to rotate the coordinate system before with ps_rotate.
   **/
}

/**
 * Draws a rectangle.
 **/

function ps_rect(
     resource $psdoc
  ,  float $x
  ,  float $y
  ,  float $width
  ,  float $height
  ) {

  /**
   * Draws a rectangle with its lower left corner at (x, y). The
   * rectangle starts and ends in its lower left corner. If this
   * function is called outside a path it will start a new path. If
   * it is called within a path it will add the rectangle as a
   * subpath. If the last drawing operation does not end in the
   * lower left corner then there will be a gap in the path.
   **/
}

/**
 * Restore previously save context.
 **/

function ps_restore( resource $psdoc) {

  /**
   * Restores a previously saved graphics context. Any call of
   * ps_save must be accompanied by a call to ps_restore. All
   * coordinate transformations, line style settings, color
   * settings, etc. are being restored to the state before the call
   * of ps_save.
   **/
}

/**
 * Sets rotation factor.
 **/

function ps_rotate( resource $psdoc,  float $rot) {

  /**
   * Sets the rotation of the coordinate system.
   **/
}

/**
 * Save current context.
 **/

function ps_save( resource $psdoc) {

  /**
   * Saves the current graphics context, containing colors,
   * translation and rotation settings and some more. A saved
   * context can be restored with ps_restore.
   **/
}

/**
 * Sets scaling factor.
 **/

function ps_scale( resource $psdoc,  float $x,  float $y) {

  /**
   * Sets horizontal and vertical scaling of the coordinate
   * system.
   **/
}

/**
 * Sets color of border for annotations.
 **/

function ps_set_border_color(
     resource $psdoc
  ,  float $red
  ,  float $green
  ,  float $blue
  ) {

  /**
   * Links added with one of the functions ps_add_weblink,
   * ps_add_pdflink, etc. will be displayed with a surounded
   * rectangle when the postscript document is converted to pdf and
   * viewed in a pdf viewer. This rectangle is not visible in the
   * postscript document. This function sets the color of the
   * rectangle's border line.
   **/
}

/**
 * Sets length of dashes for border of annotations.
 **/

function ps_set_border_dash(
     resource $psdoc
  ,  float $black
  ,  float $white
  ) {

  /**
   * Links added with one of the functions ps_add_weblink,
   * ps_add_pdflink, etc. will be displayed with a surounded
   * rectangle when the postscript document is converted to pdf and
   * viewed in a pdf viewer. This rectangle is not visible in the
   * postscript document. This function sets the length of the
   * black and white portion of a dashed border line.
   **/
}

/**
 * Sets border style of annotations.
 **/

function ps_set_border_style(
     resource $psdoc
  ,  string $style
  ,  float $width
  ) {

  /**
   * Links added with one of the functions ps_add_weblink,
   * ps_add_pdflink, etc. will be displayed with a surounded
   * rectangle when the postscript document is converted to pdf and
   * viewed in a pdf viewer. This rectangle is not visible in the
   * postscript document. This function sets the appearance and
   * width of the border line.
   **/
}

/**
 * Sets information fields of document.
 **/

function ps_set_info( resource $p,  string $key,  string $val) {

  /**
   * Sets certain information fields of the document. This fields
   * will be shown as a comment in the header of the PostScript
   * file. If the document is converted to pdf this fields will
   * also be used for the document information.
   *
   * The BoundingBox is usually set to the value given to the
   * first page. This only works if ps_findfont has not been called
   * before. In such cases the BoundingBox would be left unset
   * unless you set it explicitly with this function.
   *
   * This function will have no effect anymore when the header of
   * the postscript file has been already written. It must be
   * called before the first page or the first call of ps_findfont.
   **/
}

/**
 * Sets certain parameters.
 **/

function ps_set_parameter(
     resource $psdoc
  ,  string $name
  ,  string $value
  ) {

  /**
   * Sets several parameters which are used by many functions.
   * Parameters are by definition string values.
   **/
}

/**
 * Sets position for text output.
 **/

function ps_set_text_pos( resource $psdoc,  float $x,  float $y) {

  /**
   * Set the position for the next text output. You may
   * alternatively set the x and y value separately by calling
   * ps_set_value and choosing textx respectively texty as the
   * value name.
   *
   * If you want to output text at a certain position it is more
   * convenient to use ps_show_xy instead of setting the text
   * position and calling ps_show.
   **/
}

/**
 * Sets certain values.
 **/

function ps_set_value( resource $psdoc,  string $name,  float $value) {

  /**
   * Sets several values which are used by many functions.
   * Parameters are by definition float values.
   **/
}

/**
 * Sets current color.
 **/

function ps_setcolor(
     resource $psdoc
  ,  string $type
  ,  string $colorspace
  ,  float $c1
  ,  float $c2
  ,  float $c3
  ,  float $c4
  ) {

  /**
   * Sets the color for drawing, filling, or both.
   **/
}

/**
 * Sets appearance of a dashed line.
 **/

function ps_setdash( resource $psdoc,  float $on,  float $off) {

  /**
   * Sets the length of the black and white portions of a dashed
   * line.
   **/
}

/**
 * Sets flatness.
 **/

function ps_setflat( resource $psdoc,  float $value) {

  /**
   * &warn.undocumented.func;
   **/
}

/**
 * Sets font to use for following output.
 **/

function ps_setfont( resource $psdoc,  int $fontid,  float $size) {

  /**
   * Sets a font, which has to be loaded before with ps_findfont.
   * Outputting text without setting a font results in an error.
   **/
}

/**
 * Sets gray value.
 **/

function ps_setgray( resource $psdoc,  float $gray) {

  /**
   * Sets the gray value for all following drawing operations.
   **/
}

/**
 * Sets appearance of line ends.
 **/

function ps_setlinecap( resource $psdoc,  int $type) {

  /**
   * Sets how line ends look like.
   **/
}

/**
 * Sets how contected lines are joined.
 **/

function ps_setlinejoin( resource $psdoc,  int $type) {

  /**
   * Sets how lines are joined.
   **/
}

/**
 * Sets width of a line.
 **/

function ps_setlinewidth( resource $psdoc,  float $width) {

  /**
   * Sets the line width for all following drawing operations.
   **/
}

/**
 * Sets the miter limit.
 **/

function ps_setmiterlimit( resource $psdoc,  float $value) {

  /**
   * If two lines join in a small angle and the line join is set
   * to PS_LINEJOIN_MITER, then the resulting spike will be very
   * long. The miter limit is the maximum ratio of the miter length
   * (the length of the spike) and the line width.
   **/
}

/**
 * Sets overprint mode.
 **/

function ps_setoverprintmode( resource $psdoc,  int $mode) {

  /**
   * &warn.undocumented.func;
   **/
}

/**
 * Sets appearance of a dashed line.
 **/

function ps_setpolydash( resource $psdoc,  float $arr) {

  /**
   * Sets the length of the black and white portions of a dashed
   * line. ps_setpolydash is used to set more complicated dash
   * patterns.
   **/
}

/**
 * Creates a pattern based on a shading.
 **/

function ps_shading_pattern(
     resource $psdoc
  ,  int $shadingid
  ,  string $optlist
  ) {

  /**
   * Creates a pattern based on a shading, which has to be created
   * before with ps_shading. Shading patterns can be used like
   * regular patterns.
   **/
}

/**
 * Creates a shading for later use.
 **/

function ps_shading(
     resource $psdoc
  ,  string $type
  ,  float $x0
  ,  float $y0
  ,  float $x1
  ,  float $y1
  ,  float $c1
  ,  float $c2
  ,  float $c3
  ,  float $c4
  ,  string $optlist
  ) {

  /**
   * Creates a shading, which can be used by ps_shfill or
   * ps_shading_pattern.
   *
   * The color of the shading can be in any color space except for
   * pattern.
   **/
}

/**
 * Fills an area with a shading.
 **/

function ps_shfill( resource $psdoc,  int $shadingid) {

  /**
   * Fills an area with a shading, which has to be created before
   * with ps_shading. This is an alternative way to creating a
   * pattern from a shading ps_shading_pattern and using the
   * pattern as the filling color.
   **/
}

/**
 * Output text in a box.
 **/

function ps_show_boxed(
     resource $psdoc
  ,  string $text
  ,  float $left
  ,  float $bottom
  ,  float $width
  ,  float $height
  ,  string $hmode
  ,  string $feature
  ) {

  /**
   * Outputs a text in a given box. The lower left corner of the
   * box is at (left, bottom). Line breaks will be inserted where
   * needed. Multiple spaces are treated as one. Tabulators are
   * treated as spaces.
   *
   * The text will be hyphenated if the parameter hyphenation is
   * set to &true; and the parameter hyphendict contains a valid
   * filename for a hyphenation file. The line spacing is taken
   * from the value leading. Paragraphs can be separated by an
   * empty line just like in TeX. If the value parindent is set to
   * value > 0.0 then the first n lines will be indented. The
   * number n of lines is set by the parameter numindentlines. In
   * order to prevent indenting of the first m paragraphs set the
   * value parindentskip to a positive number.
   **/
}

/**
 * Output text at given position.
 **/

function ps_show_xy(
     resource $psdoc
  ,  string $text
  ,  float $x
  ,  float $y
  ) {

  /**
   * Output a text at the given text position.
   **/
}

/**
 * Output text at position.
 **/

function ps_show_xy2(
     resource $psdoc
  ,  string $text
  ,  int $len
  ,  float $xcoor
  ,  float $ycoor
  ) {

  /**
   * &warn.undocumented.func;
   **/
}

/**
 * Output text.
 **/

function ps_show( resource $psdoc,  string $text) {

  /**
   * Output a text at the current text position. The text position
   * can be set by storing the x and y coordinates into the values
   * textx and texty with the function ps_set_value. The function
   * will issue an error if a font was not set before with
   * ps_setfont.
   *
   * ps_show evaluates the following parameters and values as set
   * by ps_set_parameter and ps_set_value.
   *
   * Distance between two consecutive glyphs. If this value is
   * unequal to zero then all ligatures will be resolved. Values
   * less than zero are allowed.
   *
   * Setting this parameter to "false" will turn off kerning.
   * Kerning is turned on by default.
   *
   * Setting this parameter to "false" will turn off the use of
   * ligatures. Ligatures are turned on by default.
   *
   * Setting this parameter to "true" will turn on underlining.
   * Underlining is turned off by default.
   *
   * Setting this parameter to "true" will turn on overlining.
   * Overlining is turned off by default.
   *
   * Setting this parameter to "true" will turn on striking out.
   * Striking out is turned off by default.
   **/
}

/**
 * Output a text at current position.
 **/

function ps_show2( resource $psdoc,  string $text,  int $len) {

  /**
   * Output text at the current position. Do not print more than
   * len characters.
   **/
}

/**
 * Gets geometry of a string.
 **/

function ps_string_geometry(
     resource $psdoc
  ,  string $text
  ,  int $fontid = 0
  ,  float $size = 0.0
  ) {

  /**
   * This function is similar to ps_stringwidth but returns an
   * array of dimensions containing the width, ascender, and
   * descender of the text.
   **/
}

/**
 * Gets width of a string.
 **/

function ps_stringwidth(
     resource $psdoc
  ,  string $text
  ,  int $fontid = 0
  ,  float $size = 0.0
  ) {

  /**
   * Calculates the width of a string in points if it was output
   * in the given font and font size. This function needs an Adobe
   * font metrics file to calculate the precise width. If kerning
   * is turned on, it will be taken into account.
   **/
}

/**
 * Draws the current path.
 **/

function ps_stroke( resource $psdoc) {

  /**
   * Draws the path constructed with previously called drawing
   * functions like ps_lineto.
   **/
}

/**
 * Gets name of a glyph.
 **/

function ps_symbol_name(
     resource $psdoc
  ,  int $ord
  ,  int $fontid = 0
  ) {

  /**
   * This function needs an Adobe font metrics file to know which
   * glyphs are available.
   **/
}

/**
 * Gets width of a glyph.
 **/

function ps_symbol_width(
     resource $psdoc
  ,  int $ord
  ,  int $fontid = 0
  ,  float $size = 0.0
  ) {

  /**
   * Calculates the width of a glyph in points if it was output in
   * the given font and font size. This function needs an Adobe
   * font metrics file to calculate the precise width.
   **/
}

/**
 * Output a glyph.
 **/

function ps_symbol( resource $psdoc,  int $ord) {

  /**
   * Output the glyph at position ord in the font encoding vector
   * of the current font. The font encoding for a font can be set
   * when loading the font with ps_findfont.
   **/
}

/**
 * Sets translation.
 **/

function ps_translate( resource $psdoc,  float $x,  float $y) {

  /**
   * Sets a new initial point of the coordinate system.
   **/
}

/**
 * Add the word to a personal wordlist.
 **/

function pspell_add_to_personal(
     PSpell\Dictionary $dictionary
  ,  string $word
  ) {

  /**
   **/
}

/**
 * Add the word to the wordlist in the current session.
 **/

function pspell_add_to_session(
     PSpell\Dictionary $dictionary
  ,  string $word
  ) {

  /**
   **/
}

/**
 * Check a word.
 **/

function pspell_check( PSpell\Dictionary $dictionary,  string $word) {

  /**
   **/
}

/**
 * Clear the current session.
 **/

function pspell_clear_session( PSpell\Dictionary $dictionary) {

  /**
   **/
}

/**
 * Create a config used to open a dictionary.
 **/

function pspell_config_create(
     string $language
  ,  string $spelling = ""
  ,  string $jargon = ""
  ,  string $encoding = ""
  ) {

  /**
   * Create a config used to open a dictionary.
   *
   * pspell_config_create has a very similar syntax to pspell_new.
   * In fact, using pspell_config_create immediately followed by
   * pspell_new_config will produce the exact same result. However,
   * after creating a new config, you can also use pspell_config_*
   * functions before calling pspell_new_config to take advantage
   * of some advanced functionality.
   *
   * For more information and examples, check out inline manual
   * pspell website:&url.pspell;.
   **/
}

/**
 * Location of language data files.
 **/

function pspell_config_data_dir(
     PSpell\Config $config
  ,  string $directory
  ) {

  /**
   * &warn.undocumented.func;
   **/
}

/**
 * Location of the main word list.
 **/

function pspell_config_dict_dir(
     PSpell\Config $config
  ,  string $directory
  ) {

  /**
   * &warn.undocumented.func;
   **/
}

/**
 * Ignore words less than N characters long.
 **/

function pspell_config_ignore(
     PSpell\Config $config
  ,  int $min_length
  ) {

  /**
   **/
}

/**
 * Change the mode number of suggestions returned.
 **/

function pspell_config_mode( PSpell\Config $config,  int $mode) {

  /**
   **/
}

/**
 * Set a file that contains personal wordlist.
 **/

function pspell_config_personal(
     PSpell\Config $config
  ,  string $filename
  ) {

  /**
   * Set a file that contains personal wordlist. The personal
   * wordlist will be loaded and used in addition to the standard
   * one after you call pspell_new_config. The file is also the
   * file where pspell_save_wordlist will save personal wordlist
   * to.
   *
   * pspell_config_personal should be used on a config before
   * calling pspell_new_config.
   **/
}

/**
 * Set a file that contains replacement pairs.
 **/

function pspell_config_repl(
     PSpell\Config $config
  ,  string $filename
  ) {

  /**
   * Set a file that contains replacement pairs.
   *
   * The replacement pairs improve the quality of the
   * spellchecker. When a word is misspelled, and a proper
   * suggestion was not found in the list, pspell_store_replacement
   * can be used to store a replacement pair and then
   * pspell_save_wordlist to save the wordlist along with the
   * replacement pairs.
   *
   * pspell_config_repl should be used on a config before calling
   * pspell_new_config.
   **/
}

/**
 * Consider run-together words as valid compounds.
 **/

function pspell_config_runtogether(
     PSpell\Config $config
  ,  bool $allow
  ) {

  /**
   * This function determines whether run-together words will be
   * treated as legal compounds. That is, "thecat" will be a legal
   * compound, although there should be a space between the two
   * words. Changing this setting only affects the results returned
   * by pspell_check; pspell_suggest will still return suggestions.
   *
   * pspell_config_runtogether should be used on a config before
   * calling pspell_new_config.
   **/
}

/**
 * Determine whether to save a replacement pairs list along with.
 * the wordlist.
 **/

function pspell_config_save_repl( PSpell\Config $config,  bool $save) {

  /**
   * pspell_config_save_repl determines whether
   * pspell_save_wordlist will save the replacement pairs along
   * with the wordlist. Usually there is no need to use this
   * function because if pspell_config_repl is used, the
   * replacement pairs will be saved by pspell_save_wordlist
   * anyway, and if it is not, the replacement pairs will not be
   * saved.
   *
   * pspell_config_save_repl should be used on a config before
   * calling pspell_new_config.
   **/
}

/**
 * Load a new dictionary with settings based on a given config.
 **/

function pspell_new_config( PSpell\Config $config) {

  /**
   **/
}

/**
 * Load a new dictionary with personal wordlist.
 **/

function pspell_new_personal(
     string $filename
  ,  string $language
  ,  string $spelling = ""
  ,  string $jargon = ""
  ,  string $encoding = ""
  ,  int $mode = 0
  ) {

  /**
   * For more information and examples, check out inline manual
   * pspell website:&url.pspell;.
   **/
}

/**
 * Load a new dictionary.
 **/

function pspell_new(
     string $language
  ,  string $spelling = ""
  ,  string $jargon = ""
  ,  string $encoding = ""
  ,  int $mode = 0
  ) {

  /**
   * pspell_new opens up a new dictionary and returns an
   * PSpell\Dictionary instance for use in other pspell functions.
   *
   * For more information and examples, check out inline manual
   * pspell website:&url.pspell;.
   **/
}

/**
 * Save the personal wordlist to a file.
 **/

function pspell_save_wordlist( PSpell\Dictionary $dictionary) {

  /**
   **/
}

/**
 * Store a replacement pair for a word.
 **/

function pspell_store_replacement(
     PSpell\Dictionary $dictionary
  ,  string $misspelled
  ,  string $correct
  ) {

  /**
   **/
}

/**
 * Suggest spellings of a word.
 **/

function pspell_suggest(
     PSpell\Dictionary $dictionary
  ,  string $word
  ) {

  /**
   **/
}

/**
 * Creates a Radius handle for accounting.
 **/

function radius_acct_open() {

  /**
   **/
}

/**
 * Adds a server.
 **/

function radius_add_server(
     resource $radius_handle
  ,  string $hostname
  ,  int $port
  ,  string $secret
  ,  int $timeout
  ,  int $max_tries
  ) {

  /**
   * radius_add_server may be called multiple times, and it may be
   * used together with radius_config. At most 10 servers may be
   * specified. When multiple servers are given, they are tried in
   * round-robin fashion until a valid response is received, or
   * until each server's max_tries limit has been reached.
   **/
}

/**
 * Creates a Radius handle for authentication.
 **/

function radius_auth_open() {

  /**
   **/
}

/**
 * Frees all ressources.
 **/

function radius_close( resource $radius_handle) {

  /**
   * It is not needed to call this function because php frees all
   * resources at the end of each request.
   **/
}

/**
 * Causes the library to read the given configuration file.
 **/

function radius_config( resource $radius_handle,  string $file) {

  /**
   * Before issuing any Radius requests, the library must be made
   * aware of the servers it can contact. The easiest way to
   * configure the library is to call radius_config. radius_config
   * causes the library to read a configuration file whose format
   * is described in radius.conf.
   **/
}

/**
 * Create accounting or authentication request.
 **/

function radius_create_request( resource $radius_handle,  int $type) {

  /**
   * A Radius request consists of a code specifying the kind of
   * request, and zero or more attributes which provide additional
   * information. To begin constructing a new request, call
   * radius_create_request.
   **/
}

/**
 * Converts raw data to IP-Address.
 **/

function radius_cvt_addr( string $data) {

  /**
   * Converts raw data to IP-Address
   **/
}

/**
 * Converts raw data to integer.
 **/

function radius_cvt_int( string $data) {

  /**
   * Converts raw data to integer
   **/
}

/**
 * Converts raw data to string.
 **/

function radius_cvt_string( string $data) {

  /**
   * Converts raw data to string
   **/
}

/**
 * Derives mppe-keys from mangled data.
 **/

function radius_demangle_mppe_key(
     resource $radius_handle
  ,  string $mangled
  ) {

  /**
   * When using MPPE with MS-CHAPv2, the send- and recv-keys are
   * mangled (see RFC 2548), however this function is useless,
   * because I don't think that there is or will be a PPTP-MPPE
   * implementation in PHP.
   **/
}

/**
 * Demangles data.
 **/

function radius_demangle( resource $radius_handle,  string $mangled) {

  /**
   * Some data (Passwords, MS-CHAPv1 MPPE-Keys) is mangled for
   * security reasons, and must be demangled before you can use
   * them.
   **/
}

/**
 * Extracts an attribute.
 **/

function radius_get_attr( resource $radius_handle) {

  /**
   * Like Radius requests, each response may contain zero or more
   * attributes. After a response has been received successfully by
   * radius_send_request, its attributes can be extracted one by
   * one using radius_get_attr. Each time radius_get_attr is
   * called, it gets the next attribute from the current response.
   **/
}

/**
 * Extracts the data from a tagged attribute.
 **/

function radius_get_tagged_attr_data( string $data) {

  /**
   * If a tagged attribute has been returned from radius_get_attr,
   * radius_get_tagged_attr_data will return the data from the
   * attribute.
   **/
}

/**
 * Extracts the tag from a tagged attribute.
 **/

function radius_get_tagged_attr_tag( string $data) {

  /**
   * If a tagged attribute has been returned from radius_get_attr,
   * radius_get_tagged_attr_data will return the tag from the
   * attribute.
   **/
}

/**
 * Extracts a vendor specific attribute.
 **/

function radius_get_vendor_attr( string $data) {

  /**
   * If radius_get_attr returns RADIUS_VENDOR_SPECIFIC,
   * radius_get_vendor_attr may be called to determine the vendor.
   **/
}

/**
 * Attaches an IP address attribute.
 **/

function radius_put_addr(
     resource $radius_handle
  ,  int $type
  ,  string $addr
  ,  int $options = 0
  ,  int $tag
  ) {

  /**
   * Attaches an IP address attribute to the current RADIUS
   * request.
   **/
}

/**
 * Attaches a binary attribute.
 **/

function radius_put_attr(
     resource $radius_handle
  ,  int $type
  ,  string $value
  ,  int $options = 0
  ,  int $tag
  ) {

  /**
   * Attaches a binary attribute to the current RADIUS request.
   **/
}

/**
 * Attaches an integer attribute.
 **/

function radius_put_int(
     resource $radius_handle
  ,  int $type
  ,  int $value
  ,  int $options = 0
  ,  int $tag
  ) {

  /**
   * Attaches an integer attribute to the current RADIUS request.
   **/
}

/**
 * Attaches a string attribute.
 **/

function radius_put_string(
     resource $radius_handle
  ,  int $type
  ,  string $value
  ,  int $options = 0
  ,  int $tag
  ) {

  /**
   * Attaches a string attribute to the current RADIUS request. In
   * general, radius_put_attr is a more useful function for
   * attaching string attributes, as it is binary safe.
   **/
}

/**
 * Attaches a vendor specific IP address attribute.
 **/

function radius_put_vendor_addr(
     resource $radius_handle
  ,  int $vendor
  ,  int $type
  ,  string $addr
  ) {

  /**
   * Attaches an IP address vendor specific attribute to the
   * current RADIUS request.
   **/
}

/**
 * Attaches a vendor specific binary attribute.
 **/

function radius_put_vendor_attr(
     resource $radius_handle
  ,  int $vendor
  ,  int $type
  ,  string $value
  ,  int $options = 0
  ,  int $tag
  ) {

  /**
   * Attaches a vendor specific binary attribute to the current
   * RADIUS request.
   **/
}

/**
 * Attaches a vendor specific integer attribute.
 **/

function radius_put_vendor_int(
     resource $radius_handle
  ,  int $vendor
  ,  int $type
  ,  int $value
  ,  int $options = 0
  ,  int $tag
  ) {

  /**
   * Attaches a vendor specific integer attribute to the current
   * RADIUS request.
   **/
}

/**
 * Attaches a vendor specific string attribute.
 **/

function radius_put_vendor_string(
     resource $radius_handle
  ,  int $vendor
  ,  int $type
  ,  string $value
  ,  int $options = 0
  ,  int $tag
  ) {

  /**
   * Attaches a vendor specific string attribute to the current
   * RADIUS request. In general, radius_put_vendor_attr is a more
   * useful function for attaching string attributes, as it is
   * binary safe.
   **/
}

/**
 * Returns the request authenticator.
 **/

function radius_request_authenticator( resource $radius_handle) {

  /**
   * The request authenticator is needed for demangling mangled
   * data like passwords and encryption-keys.
   **/
}

/**
 * Salt-encrypts a value.
 **/

function radius_salt_encrypt_attr(
     resource $radius_handle
  ,  string $data
  ) {

  /**
   * Applies the RADIUS salt-encryption algorithm to the given
   * value.
   *
   * In general, this is achieved automatically by providing the
   * RADIUS_OPTION_SALT option to an attribute setter function, but
   * this function can be used if low-level request construction is
   * required.
   **/
}

/**
 * Sends the request and waits for a reply.
 **/

function radius_send_request( resource $radius_handle) {

  /**
   * After the Radius request has been constructed, it is sent by
   * radius_send_request.
   *
   * The radius_send_request function sends the request and waits
   * for a valid reply, retrying the defined servers in round-robin
   * fashion as necessary.
   **/
}

/**
 * Returns the shared secret.
 **/

function radius_server_secret( resource $radius_handle) {

  /**
   * The shared secret is needed as salt for demangling mangled
   * data like passwords and encryption-keys.
   **/
}

/**
 * Returns an error message.
 **/

function radius_strerror( resource $radius_handle) {

  /**
   * If Radius-functions fail then they record an error message.
   * This error message can be retrieved with this function.
   **/
}

/**
 * Show largest possible random value.
 **/

function getrandmax() {

  /**
   **/
}

/**
 * Combined linear congruential generator.
 **/

function lcg_value() {

  /**
   * lcg_value returns a pseudo random number in the range of (0,
   * 1). The function combines two CGs with periods of 2^31 - 85
   * and 2^31 - 249. The period of this function is equal to the
   * product of both primes.
   *
   * Scaling the return value to a different interval using
   * multiplication or addition (a so-called affine transformation)
   * might result in a bias in the resulting value as floats are
   * not equally dense across the number line. As not all values
   * can be exactly represented by a float, the result of the
   * affine transformation might also result in values outside of
   * the requested interval.
   *
   * Use Random\Randomizer::getFloat to generate a random float
   * within an arbitrary interval. Use Random\Randomizer::getInt to
   * generate a random integer within an arbitrary interval.
   **/
}

/**
 * Show largest possible random value.
 **/

function mt_getrandmax() {

  /**
   **/
}

/**
 * Generate a random value via the Mersenne Twister Random Number.
 * Generator.
 **/

function mt_rand() {

  /**
   **/
}

/**
 * Seeds the Mersenne Twister Random Number Generator.
 **/

function mt_srand($seed = null,  int $mode = MT_RAND_MT19937) {

  /**
   * Seeds the random number generator with seed or with a random
   * value if no seed is given.
   **/
}

/**
 * Generate a random integer.
 **/

function rand() {

  /**
   **/
}

/**
 * Get cryptographically secure random bytes.
 **/

function random_bytes() {

  /**
   * Generates a string containing uniformly selected random bytes
   * with the requested length.
   *
   * As the returned bytes are selected completely randomly, the
   * resulting string is likely to contain unprintable characters
   * or invalid UTF-8 sequences. It may be necessary to encode it
   * before transmission or display.
   *
   * The randomness generated by this function is suitable for all
   * applications, including the generation of long-term secrets,
   * such as encryption keys.
   **/
}

/**
 * Get a cryptographically secure, uniformly selected integer.
 **/

function random_int() {

  /**
   * Generates a uniformly selected integer between the given
   * minimum and maximum.
   *
   * The randomness generated by this function is suitable for all
   * applications, including the generation of long-term secrets,
   * such as encryption keys.
   **/
}

/**
 * Seed the random number generator.
 **/

function srand($seed = null,  int $mode = MT_RAND_MT19937) {

  /**
   * Seeds the random number generator with seed or with a random
   * value if seed is 0.
   **/
}

/**
 * Cache hits and misses for the URL wrapper.
 **/

function rar_wrapper_cache_stats() {

  /**
   **/
}

/**
 * Adds a line to the history.
 **/

function readline_add_history( string $prompt) {

  /**
   * This function adds a line to the command line history.
   **/
}

/**
 * Initializes the readline callback interface and terminal,.
 * prints the prompt and returns immediately.
 **/

function readline_callback_handler_install(
     string $prompt
  ,  callable $callback
  ) {

  /**
   * Sets up a readline callback interface then prints prompt and
   * immediately returns. Calling this function twice without
   * removing the previous callback interface will automatically
   * and conveniently overwrite the old interface.
   *
   * The callback feature is useful when combined with
   * stream_select as it allows interleaving of IO and user input,
   * unlike readline.
   **/
}

/**
 * Removes a previously installed callback handler and restores.
 * terminal settings.
 **/

function readline_callback_handler_remove() {

  /**
   * Removes a previously installed callback handler and restores
   * terminal settings.
   **/
}

/**
 * Reads a character and informs the readline callback interface.
 * when a line is received.
 **/

function readline_callback_read_char() {

  /**
   * Reads a character of user input. When a line is received,
   * this function informs the readline callback interface
   * installed using readline_callback_handler_install that a line
   * is ready for input.
   **/
}

/**
 * Clears the history.
 **/

function readline_clear_history() {

  /**
   * This function clears the entire command line history.
   **/
}

/**
 * Registers a completion function.
 **/

function readline_completion_function( callable $callback) {

  /**
   * This function registers a completion function. This is the
   * same kind of functionality you'd get if you hit your tab key
   * while using Bash.
   **/
}

/**
 * Gets/sets various internal readline variables.
 **/

function readline_info($var_name = null, $value = null) {

  /**
   * Gets or sets various internal readline variables.
   **/
}

/**
 * Lists the history.
 **/

function readline_list_history() {

  /**
   * Gets the entire command line history.
   **/
}

/**
 * Inform readline that the cursor has moved to a new line.
 **/

function readline_on_new_line() {

  /**
   * Tells readline that the cursor has moved to a new line.
   **/
}

/**
 * Reads the history.
 **/

function readline_read_history($filename = null) {

  /**
   * This function reads a command history from a file.
   **/
}

/**
 * Redraws the display.
 **/

function readline_redisplay() {

  /**
   * Redraws readline to redraw the display.
   **/
}

/**
 * Writes the history.
 **/

function readline_write_history($filename = null) {

  /**
   * This function writes the command history to a file.
   **/
}

/**
 * Reads a line.
 **/

function readline($prompt = null) {

  /**
   * Reads a single line from the user. You must add this line to
   * the history yourself using readline_add_history.
   **/
}

/**
 * Recode from file to file according to recode request.
 **/

function recode_file(
     string $request
  ,  resource $input
  ,  resource $output
  ) {

  /**
   * Recode the file referenced by file handle input into the file
   * referenced by file handle output according to the recode
   * request.
   **/
}

/**
 * Recode a string according to a recode request.
 **/

function recode_string( string $request,  string $string) {

  /**
   * Recode the string string according to the recode request
   * request.
   **/
}

/**
 * &Alias; recode_string.
 **/

function () {

  /**
   **/
}

/**
 * Return cryptographic backend library name.
 **/

function rnp_backend_string() {

  /**
   **/
}

/**
 * Return cryptographic backend library version.
 **/

function rnp_backend_version() {

  /**
   **/
}

/**
 * Decrypt PGP message.
 **/

function rnp_decrypt( RnpFFI $ffi,  string $input) {

  /**
   * Private keys used for decryption should be loaded into the
   * FFI object before calling this function. If password
   * encryption was used, then password provider should be set by
   * calling rnp_ffi_set_pass_provider.
   **/
}

/**
 * Dump OpenPGP packets stream information to the JSON string.
 **/

function rnp_dump_packets_to_json( string $input,  int $flags) {

  /**
   **/
}

/**
 * Dump OpenPGP packets stream information in humand-readable.
 * format.
 **/

function rnp_dump_packets( string $input,  int $flags) {

  /**
   **/
}

/**
 * Create the top-level object used for interacting with the.
 * library.
 **/

function rnp_ffi_create( string $pub_format,  string $sec_format) {

  /**
   **/
}

/**
 * Destroy the top-level object used for interacting with the.
 * library.
 **/

function rnp_ffi_destroy( RnpFFI $ffi) {

  /**
   **/
}

/**
 * Set password provider callback function.
 **/

function rnp_ffi_set_pass_provider(
     RnpFFI $ffi
  ,  callable $password_callback
  ) {

  /**
   * Sets password provider function. This function can ask for
   * the password on a standard input (if PHP script is executed in
   * a command line environment), display GUI dialog or provide
   * password in any other possible ways. Requested passwords are
   * used to encrypt or decrypt secret keys or perform symmetric
   * encryption/decryption operations.
   **/
}

/**
 * Import keys from PHP string to the keyring and receive JSON.
 * describing new/updated keys.
 **/

function rnp_import_keys( RnpFFI $ffi,  string $input,  int $flags) {

  /**
   **/
}

/**
 * Import standalone signatures to the keyring and receive JSON.
 * describing updated keys.
 **/

function rnp_import_signatures(
     RnpFFI $ffi
  ,  string $input
  ,  int $flags
  ) {

  /**
   **/
}

/**
 * Export minimal key for autocrypt feature (just 5 packets:.
 * key, uid, signature, encryption subkey, signature).
 **/

function rnp_key_export_autocrypt(
     RnpFFI $ffi
  ,  string $key_fp
  ,  string $subkey_fp
  ,  string $uid
  ,  int $flags
  ) {

  /**
   **/
}

/**
 * Generate and export primary key revocation signature.
 **/

function rnp_key_export_revocation(
     RnpFFI $ffi
  ,  string $key_fp
  ,  int $flags
  ,  array $options
  ) {

  /**
   * Note: to revoke a key you'll need to import this signature
   * into the keystore or use rnp_key_revoke function.
   **/
}

/**
 * Export a key.
 **/

function rnp_key_export( RnpFFI $ffi,  string $key_fp,  int $flags) {

  /**
   **/
}

/**
 * Get information about the key.
 **/

function rnp_key_get_info( RnpFFI $ffi,  string $key_fp) {

  /**
   **/
}

/**
 * Remove a key from keyring(s).
 **/

function rnp_key_remove( RnpFFI $ffi,  string $key_fp,  int $flags) {

  /**
   * Note: you need to call rnp_save_keys to write updated
   * keyring(s) out.
   **/
}

/**
 * Revoke a key or subkey by generating and adding revocation.
 * signature.
 **/

function rnp_key_revoke(
     RnpFFI $ffi
  ,  string $key_fp
  ,  int $flags
  ,  array $options
  ) {

  /**
   * Note: you need to call rnp_save_keys to write updated
   * keyring(s) out.
   **/
}

/**
 * Enumerate all keys present in a keyring by specified identifer.
 * type.
 **/

function rnp_list_keys( RnpFFI $ffi,  string $identifier_type) {

  /**
   **/
}

/**
 * Load keys from specified path.
 **/

function rnp_load_keys_from_path(
     RnpFFI $ffi
  ,  string $format
  ,  string $input_path
  ,  int $flags
  ) {

  /**
   * Note that for G10, the input must be a directory (which must
   * already exist).
   **/
}

/**
 * Load keys from PHP string.
 **/

function rnp_load_keys(
     RnpFFI $ffi
  ,  string $format
  ,  string $input
  ,  int $flags
  ) {

  /**
   * Note that for G10, the input must be a directory (which must
   * already exist).
   **/
}

/**
 * Search for the key.
 **/

function rnp_locate_key(
     RnpFFI $ffi
  ,  string $identifier_type
  ,  string $identifier
  ) {

  /**
   * Note: only valid userids are checked while searching by
   * userid.
   **/
}

/**
 * Encrypt message.
 **/

function rnp_op_encrypt(
     RnpFFI $ffi
  ,  string $message
  ,  array $recipient_keys_fp
  ,  array $options
  ) {

  /**
   **/
}

/**
 * Generate key.
 **/

function rnp_op_generate_key(
     RnpFFI $ffi
  ,  string $userid
  ,  string $key_alg
  ,  string $sub_alg
  ,  array $options
  ) {

  /**
   **/
}

/**
 * Perform signing operation on a textual data, return cleartext.
 * signed message.
 **/

function rnp_op_sign_cleartext(
     RnpFFI $ffi
  ,  string $data
  ,  array $keys_fp
  ,  array $options
  ) {

  /**
   **/
}

/**
 * Perform signing operation, return detached signature(s).
 **/

function rnp_op_sign_detached(
     RnpFFI $ffi
  ,  string $data
  ,  array $keys_fp
  ,  array $options
  ) {

  /**
   **/
}

/**
 * Perform signing operation on a binary data, return embedded.
 * signature(s).
 **/

function rnp_op_sign(
     RnpFFI $ffi
  ,  string $data
  ,  array $keys_fp
  ,  array $options
  ) {

  /**
   **/
}

/**
 * Verify detached signatures.
 **/

function rnp_op_verify_detached(
     RnpFFI $ffi
  ,  string $data
  ,  string $signature
  ) {

  /**
   **/
}

/**
 * Verify embedded or cleartext signatures.
 **/

function rnp_op_verify( RnpFFI $ffi,  string $data) {

  /**
   **/
}

/**
 * Save keys to specified path.
 **/

function rnp_save_keys_to_path(
     RnpFFI $ffi
  ,  string $format
  ,  string $output_path
  ,  int $flags
  ) {

  /**
   * Saves keys present in the FFI object (loaded or generated) to
   * the specified file or directory.
   **/
}

/**
 * Save keys to PHP string.
 **/

function rnp_save_keys(
     RnpFFI $ffi
  ,  string $format
  ,  string &$output
  ,  int $flags
  ) {

  /**
   * Note that for G10, the output must be a directory (which must
   * already exist).
   **/
}

/**
 * Get supported features in JSON format.
 **/

function rnp_supported_features( string $type) {

  /**
   * Get the JSON formatted string containing array of supported
   * rnp feature values (algorithms, curves, etc) by type.
   **/
}

/**
 * Full version string of RNP library.
 **/

function rnp_version_string_full() {

  /**
   **/
}

/**
 * RNP library version.
 **/

function rnp_version_string() {

  /**
   **/
}

/**
 * Add tag retrieved in query.
 **/

function rpmaddtag( int $tag) {

  /**
   * Add an additional retrieved tag in subsequent queries.
   **/
}

/**
 * Get information from installed RPM.
 **/

function rpmdbinfo( string $nevr,  bool $full = false) {

  /**
   * Retrieve information about an installed package, from the
   * system RPM database.
   **/
}

/**
 * Search RPM packages.
 **/

function rpmdbsearch(
     string $pattern
  ,  int $rpmtag = RPMTAG_NAME
  ,  int $rpmmire = -1
  ,  bool $full = false
  ) {

  /**
   * Search packages in the system RPM database.
   **/
}

/**
 * Get target of a symlink.
 **/

function rpmgetsymlink( string $path,  string $name) {

  /**
   * Get target of a symlink.
   **/
}

/**
 * Get information from a RPM file.
 **/

function rpminfo( string $path,  bool $full = false,  string &$error) {

  /**
   * Retrieve information about a local file, a RPM package.
   **/
}

/**
 * RPM version comparison.
 **/

function rpmvercmp( string $evr1,  string $evr2, $operator = null) {

  /**
   * Compare 2 RPM versions.
   **/
}

/**
 * Creates rrd database file.
 **/

function rrd_create( string $filename,  array $options) {

  /**
   * Creates the rdd database file.
   **/
}

/**
 * Gets latest error message.
 **/

function rrd_error() {

  /**
   * Returns latest global rrd error message.
   **/
}

/**
 * Fetch the data for graph as array.
 **/

function rrd_fetch( string $filename,  array $options) {

  /**
   * Gets data for graph output from RRD database file as array.
   * This function has same result as rrd_graph, but fetched data
   * are returned as array, no image file is created.
   **/
}

/**
 * Gets the timestamp of the first sample from rrd file.
 **/

function rrd_first( string $file,  int $raaindex = 0) {

  /**
   * Returns the first data sample from the specified RRA of the
   * RRD file.
   **/
}

/**
 * Creates image from a data.
 **/

function rrd_graph( string $filename,  array $options) {

  /**
   * Creates image for a particular data from RRD file.
   **/
}

/**
 * Gets information about rrd file.
 **/

function rrd_info( string $filename) {

  /**
   * Returns information about particular RRD database file.
   **/
}

/**
 * Gets unix timestamp of the last sample.
 **/

function rrd_last( string $filename) {

  /**
   * Returns the UNIX timestamp of the most recent update of the
   * RRD database.
   **/
}

/**
 * Gets information about last updated data.
 **/

function rrd_lastupdate( string $filename) {

  /**
   * Gets array of the UNIX timestamp and the values stored for
   * each date in the most recent update of the RRD database file.
   **/
}

/**
 * Restores the RRD file from XML dump.
 **/

function rrd_restore(
     string $xml_file
  ,  string $rrd_file
  ,  array $options
  ) {

  /**
   * Restores the RRD file from the XML dump.
   **/
}

/**
 * Tunes some RRD database file header options.
 **/

function rrd_tune( string $filename,  array $options) {

  /**
   * Change some options in the RRD dabase header file. E.g.
   * renames the source for the data etc.
   **/
}

/**
 * Updates the RRD database.
 **/

function rrd_update( string $filename,  array $options) {

  /**
   * Updates the RRD database file. The input data is time
   * interpolated according to the properties of the RRD database
   * file.
   **/
}

/**
 * Gets information about underlying rrdtool library.
 **/

function rrd_version() {

  /**
   * Returns information about underlying rrdtool library.
   **/
}

/**
 * Exports the information about RRD database.
 **/

function rrd_xport( array $options) {

  /**
   * Exports the information about RRD database file. This data
   * can be converted to XML file via user space PHP script and
   * then restored back as RRD database file.
   **/
}

/**
 * Close any outstanding connection to rrd caching daemon.
 **/

function rrdc_disconnect() {

  /**
   * Close any outstanding connection to rrd caching daemon.
   *
   * This function is automatically called when the whole PHP
   * process is terminated. It depends on used SAPI. For example,
   * it's called automatically at the end of command line script.
   *
   * It's up user whether he wants to call this function at the
   * end of every request or otherwise.
   **/
}

/**
 * Similar to define(), but allows defining in class definitions.
 * as well.
 **/

function runkit7_constant_add(
     string $constant_name
  ,  mixed $value
  ,  int $newVisibility
  ) {

  /**
   **/
}

/**
 * Redefine an already defined constant.
 **/

function runkit7_constant_redefine(
     string $constant_name
  ,  mixed $value
  ,  int $new_visibility
  ) {

  /**
   **/
}

/**
 * Remove/Delete an already defined constant.
 **/

function runkit7_constant_remove( string $constant_name) {

  /**
   **/
}

/**
 * Add a new function, similar to create_function.
 **/

function runkit7_function_add(
     string $function_name
  ,  string $argument_list
  ,  string $code
  ,  bool $return_by_reference = null
  ,  string $doc_comment = null
  ,  string $return_type
  ,  bool $is_strict
  ) {

  /**
   **/
}

/**
 * Copy a function to a new function name.
 **/

function runkit7_function_copy(
     string $source_name
  ,  string $target_name
  ) {

  /**
   **/
}

/**
 * Replace a function definition with a new implementation.
 **/

function runkit7_function_redefine(
     string $function_name
  ,  string $argument_list
  ,  string $code
  ,  bool $return_by_reference = null
  ,  string $doc_comment = null
  ,  string $return_type
  ,  bool $is_strict
  ) {

  /**
   **/
}

/**
 * Remove a function definition.
 **/

function runkit7_function_remove( string $function_name) {

  /**
   **/
}

/**
 * Change a function's name.
 **/

function runkit7_function_rename(
     string $source_name
  ,  string $target_name
  ) {

  /**
   **/
}

/**
 * Process a PHP file importing function and class definitions,.
 * overwriting where appropriate.
 **/

function runkit7_import( string $filename,  int $flags) {

  /**
   * Similar to include. However, any code residing outside of a
   * function or class is simply ignored. Additionally, depending
   * on the value of flags, any functions or classes which already
   * exist in the currently running environment may be
   * automatically overwritten by their new definitions.
   **/
}

/**
 * Dynamically adds a new method to a given class.
 **/

function runkit7_method_add(
     string $class_name
  ,  string $method_name
  ,  string $argument_list
  ,  string $code
  ,  int $flags = RUNKIT7_ACC_PUBLIC
  ,  string $doc_comment = null
  ,  string $return_type
  ,  bool $is_strict
  ) {

  /**
   **/
}

/**
 * Copies a method from class to another.
 **/

function runkit7_method_copy(
     string $destination_class
  ,  string $destination_method_name
  ,  string $source_class
  ,  string $source_method_name
  ) {

  /**
   **/
}

/**
 * Dynamically changes the code of the given method.
 **/

function runkit7_method_redefine(
     string $class_name
  ,  string $method_name
  ,  string $argument_list
  ,  string $code
  ,  int $flags = RUNKIT7_ACC_PUBLIC
  ,  string $doc_comment = null
  ,  string $return_type
  ,  bool $is_strict
  ) {

  /**
   **/
}

/**
 * Dynamically removes the given method.
 **/

function runkit7_method_remove(
     string $class_name
  ,  string $method_name
  ) {

  /**
   **/
}

/**
 * Dynamically changes the name of the given method.
 **/

function runkit7_method_rename(
     string $class_name
  ,  string $source_method_name
  ,  string $target_method_name
  ) {

  /**
   **/
}

/**
 * Return the integer object handle for given object.
 **/

function runkit7_object_id( object $obj) {

  /**
   * This function is equivalent to spl_object_id.
   *
   * This function returns a unique identifier for the object. The
   * object id is unique for the lifetime of the object. Once the
   * object is destroyed, its id may be reused for other objects.
   * This behavior is similar to spl_object_hash.
   **/
}

/**
 * Return numerically indexed array of registered superglobals.
 **/

function runkit7_superglobals() {

  /**
   **/
}

/**
 * Returns information about the passed in value with data types,.
 * reference counts, etc.
 **/

function runkit7_zval_inspect( string $value) {

  /**
   **/
}

/**
 * Returns a list of instrumented calls that have occurred.
 **/

function scoutapm_get_calls() {

  /**
   * Returns a list of any instrumented function calls since
   * scoutapm_get_calls was last called. The list is cleared each
   * time the function is called.
   **/
}

/**
 * List functions scoutapm will instrument..
 **/

function scoutapm_list_instrumented_functions() {

  /**
   * Returns a list of the functions the extension will instrument.
   **/
}

/**
 * Get SeasLog author..
 **/

function seaslog_get_author() {

  /**
   **/
}

/**
 * Get SeasLog version..
 **/

function seaslog_get_version() {

  /**
   **/
}

/**
 * Convert a pathname and a project identifier to a System V IPC.
 * key.
 **/

function ftok( string $filename,  string $project_id) {

  /**
   * The function converts the filename of an existing accessible
   * file and a project identifier into an integer for use with for
   * example shmop_open and other System V IPC keys.
   **/
}

/**
 * Create or attach to a message queue.
 **/

function msg_get_queue( int $key,  int $permissions = 0666) {

  /**
   * msg_get_queue returns an id that can be used to access the
   * System V message queue with the given key. The first call
   * creates the message queue with the optional permissions. A
   * second call to msg_get_queue for the same key will return a
   * different message queue identifier, but both identifiers
   * access the same underlying message queue.
   **/
}

/**
 * Check whether a message queue exists.
 **/

function msg_queue_exists( int $key) {

  /**
   * Checks whether the message queue key exists.
   **/
}

/**
 * Receive a message from a message queue.
 **/

function msg_receive(
     SysvMessageQueue $queue
  ,  int $desired_message_type
  ,  int &$received_message_type
  ,  int $max_message_size
  ,  mixed &$message
  ,  bool $unserialize = true
  ,  int $flags = 0
  ,  int &$error_code = null
  ) {

  /**
   * msg_receive will receive the first message from the specified
   * queue of the type specified by desired_message_type.
   **/
}

/**
 * Destroy a message queue.
 **/

function msg_remove_queue( SysvMessageQueue $queue) {

  /**
   * msg_remove_queue destroys the message queue specified by the
   * queue. Only use this function when all processes have finished
   * working with the message queue and you need to release the
   * system resources held by it.
   **/
}

/**
 * Send a message to a message queue.
 **/

function msg_send(
     SysvMessageQueue $queue
  ,  int $message_type
  , $message
  ,  bool $serialize = true
  ,  bool $blocking = true
  ,  int &$error_code = null
  ) {

  /**
   * msg_send sends a message of type message_type (which MUST be
   * greater than 0) to the message queue specified by queue.
   **/
}

/**
 * Set information in the message queue data structure.
 **/

function msg_set_queue( SysvMessageQueue $queue,  array $data) {

  /**
   * msg_set_queue allows you to change the values of the
   * msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes
   * fields of the underlying message queue data structure.
   *
   * Changing the data structure will require that PHP be running
   * as the same user that created the queue, owns the queue (as
   * determined by the existing msg_perm.xxx fields), or be running
   * with root privileges. root privileges are required to raise
   * the msg_qbytes values above the system defined limit.
   **/
}

/**
 * Returns information from the message queue data structure.
 **/

function msg_stat_queue( SysvMessageQueue $queue) {

  /**
   * msg_stat_queue returns the message queue meta data for the
   * message queue specified by the queue. This is useful, for
   * example, to determine which process sent the message that was
   * just received.
   **/
}

/**
 * Acquire a semaphore.
 **/

function sem_acquire(
     SysvSemaphore $semaphore
  ,  bool $non_blocking = false
  ) {

  /**
   * sem_acquire by default blocks (if necessary) until the
   * semaphore can be acquired. A process attempting to acquire a
   * semaphore which it has already acquired will block forever if
   * acquiring the semaphore would cause its maximum number of
   * semaphore to be exceeded.
   *
   * After processing a request, any semaphores acquired by the
   * process but not explicitly released will be released
   * automatically and a warning will be generated.
   **/
}

/**
 * Get a semaphore id.
 **/

function sem_get(
     int $key
  ,  int $max_acquire = 1
  ,  int $permissions = 0666
  ,  bool $auto_release = true
  ) {

  /**
   * sem_get returns an id that can be used to access the System V
   * semaphore with the given key.
   *
   * A second call to sem_get for the same key will return a
   * different semaphore identifier, but both identifiers access
   * the same underlying semaphore.
   *
   * If key is 0, a new private semaphore is created for each call
   * to sem_get.
   **/
}

/**
 * Release a semaphore.
 **/

function sem_release( SysvSemaphore $semaphore) {

  /**
   * sem_release releases the semaphore if it is currently
   * acquired by the calling process, otherwise a warning is
   * generated.
   *
   * After releasing the semaphore, sem_acquire may be called to
   * re-acquire it.
   **/
}

/**
 * Remove a semaphore.
 **/

function sem_remove( SysvSemaphore $semaphore) {

  /**
   * sem_remove removes the given semaphore.
   *
   * After removing the semaphore, it is no longer accessible.
   **/
}

/**
 * Creates or open a shared memory segment.
 **/

function shm_attach(
     int $key
  , $size = null
  ,  int $permissions = 0666
  ) {

  /**
   * shm_attach returns an id that can be used to access the
   * System V shared memory with the given key, the first call
   * creates the shared memory segment with size and the optional
   * perm-bits permissions.
   *
   * A second call to shm_attach for the same key will return a
   * different SysvSharedMemory instance, but both instances access
   * the same underlying shared memory. size and permissions will
   * be ignored.
   **/
}

/**
 * Disconnects from shared memory segment.
 **/

function shm_detach( SysvSharedMemory $shm) {

  /**
   * shm_detach disconnects from the shared memory given by the
   * shm created by shm_attach. Remember, that shared memory still
   * exist in the Unix system and the data is still present.
   **/
}

/**
 * Returns a variable from shared memory.
 **/

function shm_get_var( SysvSharedMemory $shm,  int $key) {

  /**
   * shm_get_var returns the variable with a given key, in the
   * given shared memory segment. The variable is still present in
   * the shared memory.
   **/
}

/**
 * Check whether a specific entry exists.
 **/

function shm_has_var( SysvSharedMemory $shm,  int $key) {

  /**
   * Checks whether a specific key exists inside a shared memory
   * segment.
   **/
}

/**
 * Inserts or updates a variable in shared memory.
 **/

function shm_put_var(
     SysvSharedMemory $shm
  ,  int $key
  ,  mixed $value
  ) {

  /**
   * shm_put_var inserts or updates the value with the given key.
   *
   * Warnings (E_WARNING level) will be issued if shm is not a
   * valid SysV shared memory index or if there was not enough
   * shared memory remaining to complete your request.
   **/
}

/**
 * Removes a variable from shared memory.
 **/

function shm_remove_var( SysvSharedMemory $shm,  int $key) {

  /**
   * Removes a variable with a given key and frees the occupied
   * memory.
   **/
}

/**
 * Removes shared memory from Unix systems.
 **/

function shm_remove( SysvSharedMemory $shm) {

  /**
   * shm_remove removes the shared memory shm. All data will be
   * destroyed.
   **/
}

/**
 * Discard session array changes and finish session.
 **/

function session_abort() {

  /**
   * session_abort finishes session without saving data. Thus the
   * original values in session data are kept.
   **/
}

/**
 * Get and/or set current cache expire.
 **/

function session_cache_expire($value = null) {

  /**
   * session_cache_expire returns the current setting of
   * session.cache_expire.
   *
   * The cache expire is reset to the default value of 180 stored
   * in session.cache_expire at request startup time. Thus, you
   * need to call session_cache_expire for every request (and
   * before session_start is called).
   **/
}

/**
 * Get and/or set the current cache limiter.
 **/

function session_cache_limiter($value = null) {

  /**
   * session_cache_limiter returns the name of the current cache
   * limiter.
   *
   * The cache limiter defines which cache control HTTP headers
   * are sent to the client. These headers determine the rules by
   * which the page content may be cached by the client and
   * intermediate proxies. Setting the cache limiter to nocache
   * disallows any client/proxy caching. A value of public permits
   * caching by proxies and the client, whereas private disallows
   * caching by proxies and permits the client to cache the
   * contents.
   *
   * In private mode, the Expire header sent to the client may
   * cause confusion for some browsers, including Mozilla. You can
   * avoid this problem by using private_no_expire mode. The Expire
   * header is never sent to the client in this mode.
   *
   * Setting the cache limiter to '' will turn off automatic
   * sending of cache headers entirely.
   *
   * The cache limiter is reset to the default value stored in
   * session.cache_limiter at request startup time. Thus, you need
   * to call session_cache_limiter for every request (and before
   * session_start is called).
   **/
}

/**
 * &Alias; session_write_close.
 **/

function () {

  /**
   **/
}

/**
 * Create new session id.
 **/

function session_create_id( string $prefix = "") {

  /**
   * session_create_id is used to create new session id for the
   * current session. It returns collision free session id.
   *
   * If session is not active, collision check is omitted.
   *
   * Session ID is created according to php.ini settings.
   *
   * It is important to use the same user ID of your web server
   * for GC task script. Otherwise, you may have permission
   * problems especially with files save handler.
   **/
}

/**
 * Decodes session data from a session encoded string.
 **/

function session_decode( string $data) {

  /**
   * session_decode decodes the serialized session data provided
   * in $data, and populates the $_SESSION superglobal with the
   * result.
   *
   * By default, the unserialization method used is internal to
   * PHP, and is not the same as unserialize. The serialization
   * method can be set using session.serialize_handler.
   **/
}

/**
 * Destroys all data registered to a session.
 **/

function session_destroy() {

  /**
   * In order to kill the session altogether, the session ID must
   * also be unset. If a cookie is used to propagate the session ID
   * (default behavior), then the session cookie must be deleted.
   * setcookie may be used for that.
   *
   * When session.use_strict_mode is enabled. You do not have to
   * remove obsolete session ID cookie because session module will
   * not accept session ID cookie when there is no data associated
   * to the session ID and set new session ID cookie. Enabling
   * session.use_strict_mode is recommended for all sites.
   *
   * Immediate session deletion may cause unwanted results. When
   * there is concurrent requests, other connections may see sudden
   * session data loss. e.g. Requests from JavaScript and/or
   * requests from URL links.
   *
   * Although current session module does not accept empty session
   * ID cookie, but immediate session deletion may result in empty
   * session ID cookie due to client(browser) side race condition.
   * This will result that the client creates many session ID
   * needlessly.
   *
   * To avoid these, you must set deletion time-stamp to $_SESSION
   * and reject access while later. Or make sure your application
   * does not have concurrent requests. This applies to
   * session_regenerate_id also.
   **/
}

/**
 * Encodes the current session data as a session encoded string.
 **/

function session_encode() {

  /**
   * session_encode returns a serialized string of the contents of
   * the current session data stored in the $_SESSION superglobal.
   *
   * By default, the serialization method used is internal to PHP,
   * and is not the same as serialize. The serialization method can
   * be set using session.serialize_handler.
   **/
}

/**
 * Perform session data garbage collection.
 **/

function session_gc() {

  /**
   * session_gc is used to perform session data GC (garbage
   * collection). PHP does probability based session GC by default.
   *
   * Probability based GC works somewhat but it has few problems.
   * 1) Low traffic sites' session data may not be deleted within
   * the preferred duration. 2) High traffic sites' GC may be too
   * frequent GC. 3) GC is performed on the user's request and the
   * user will experience a GC delay.
   *
   * Therefore, it is recommended to execute GC periodically for
   * production systems using, e.g., "cron" for UNIX-like systems.
   * Make sure to disable probability based GC by setting
   * session.gc_probability to 0.
   **/
}

/**
 * Get the session cookie parameters.
 **/

function session_get_cookie_params() {

  /**
   * Gets the session cookie parameters.
   **/
}

/**
 * Get and/or set the current session id.
 **/

function session_id($id = null) {

  /**
   * session_id is used to get or set the session id for the
   * current session.
   *
   * The constant SID can also be used to retrieve the current
   * name and session id as a string suitable for adding to URLs.
   * See also Session handling.
   **/
}

/**
 * Get and/or set the current session module.
 **/

function session_module_name($module = null) {

  /**
   * session_module_name gets the name of the current session
   * module, which is also known as session.save_handler.
   **/
}

/**
 * Get and/or set the current session name.
 **/

function session_name($name = null) {

  /**
   * session_name returns the name of the current session. If name
   * is given, session_name will update the session name and return
   * the old session name.
   *
   * If a new session name is supplied, session_name modifies the
   * HTTP cookie (and output content when session.transid is
   * enabled). Once the HTTP cookie is sent, session_name raises
   * error. session_name must be called before session_start for
   * the session to work properly.
   *
   * The session name is reset to the default value stored in
   * session.name at request startup time. Thus, you need to call
   * session_name for every request (and before session_start is
   * called).
   **/
}

/**
 * Update the current session id with a newly generated one.
 **/

function session_regenerate_id( bool $delete_old_session = false) {

  /**
   * session_regenerate_id will replace the current session id
   * with a new one, and keep the current session information.
   *
   * When session.use_trans_sid is enabled, output must be started
   * after session_regenerate_id call. Otherwise, old session ID is
   * used.
   *
   * Currently, session_regenerate_id does not handle an unstable
   * network well, e.g. Mobile and WiFi network. Therefore, you may
   * experience a lost session by calling session_regenerate_id.
   *
   * You should not destroy old session data immediately, but
   * should use destroy time-stamp and control access to old
   * session ID. Otherwise, concurrent access to page may result in
   * inconsistent state, or you may have lost session, or it may
   * cause client (browser) side race condition and may create many
   * session ID needlessly. Immediate session data deletion
   * disables session hijack attack detection and prevention also.
   **/
}

/**
 * Session shutdown function.
 **/

function session_register_shutdown() {

  /**
   * Registers session_write_close as a shutdown function.
   **/
}

/**
 * Re-initialize session array with original values.
 **/

function session_reset() {

  /**
   * session_reset reinitializes a session with original values
   * stored in session storage. This function requires an active
   * session and discards changes in $_SESSION.
   **/
}

/**
 * Get and/or set the current session save path.
 **/

function session_save_path($path = null) {

  /**
   * session_save_path returns the path of the current directory
   * used to save session data.
   **/
}

/**
 * Set the session cookie parameters.
 **/

function session_set_cookie_params(
     int $lifetime_or_options
  , $path = null
  , $domain = null
  , $secure = null
  , $httponly = null
  ) {

  /**
   * Alternative signature available as of PHP 7.3.0:
   *
   * Set cookie parameters defined in the &php.ini; file. The
   * effect of this function only lasts for the duration of the
   * script. Thus, you need to call session_set_cookie_params for
   * every request and before session_start is called.
   *
   * This function updates the runtime ini values of the
   * corresponding PHP ini configuration keys which can be
   * retrieved with the ini_get.
   **/
}

/**
 * Sets user-level session storage functions.
 **/

function session_set_save_handler(
     callable $open
  ,  callable $close
  ,  callable $read
  ,  callable $write
  ,  callable $destroy
  ,  callable $gc
  ,  callable $create_sid
  ,  callable $validate_sid
  ,  callable $update_timestamp
  ) {

  /**
   * It is possible to register the following prototype:
   *
   * session_set_save_handler sets the user-level session storage
   * functions which are used for storing and retrieving data
   * associated with a session. This is most useful when a storage
   * method other than those supplied by PHP sessions is preferred,
   * e.g. storing the session data in a local database.
   **/
}

/**
 * Start new or resume existing session.
 **/

function session_start( array $options = []) {

  /**
   * session_start creates a session or resumes the current one
   * based on a session identifier passed via a GET or POST
   * request, or passed via a cookie.
   *
   * When session_start is called or when a session auto starts,
   * PHP will call the open and read session save handlers. These
   * will either be a built-in save handler provided by default or
   * by PHP extensions (such as SQLite or Memcached); or can be
   * custom handler as defined by session_set_save_handler. The
   * read callback will retrieve any existing session data (stored
   * in a special serialized format) and will be unserialized and
   * used to automatically populate the $_SESSION superglobal when
   * the read callback returns the saved session data back to PHP
   * session handling.
   *
   * To use a named session, call session_name before calling
   * session_start.
   *
   * When session.use_trans_sid is enabled, the session_start
   * function will register an internal output handler for URL
   * rewriting.
   *
   * If a user uses ob_gzhandler or similar with ob_start, the
   * function order is important for proper output. For example,
   * ob_gzhandler must be registered before starting the session.
   **/
}

/**
 * Returns the current session status.
 **/

function session_status() {

  /**
   * session_status is used to return the current session status.
   **/
}

/**
 * Free all session variables.
 **/

function session_unset() {

  /**
   * The session_unset function frees all session variables
   * currently registered.
   **/
}

/**
 * Write session data and end session.
 **/

function session_write_close() {

  /**
   * End the current session and store session data.
   *
   * Session data is usually stored after your script terminated
   * without the need to call session_write_close, but as session
   * data is locked to prevent concurrent writes only one script
   * may operate on a session at any time. When using framesets
   * together with sessions you will experience the frames loading
   * one by one due to this locking. You can reduce the time needed
   * to load all the frames by ending the session as soon as all
   * changes to session variables are done.
   **/
}

/**
 * Close shared memory block.
 **/

function shmop_close( Shmop $shmop) {

  /**
   * shmop_close is used to close a shared memory block.
   **/
}

/**
 * Delete shared memory block.
 **/

function shmop_delete( Shmop $shmop) {

  /**
   * shmop_delete is used to delete a shared memory block.
   **/
}

/**
 * Create or open shared memory block.
 **/

function shmop_open(
     int $key
  ,  string $mode
  ,  int $permissions
  ,  int $size
  ) {

  /**
   * shmop_open can create or open a shared memory block.
   **/
}

/**
 * Read data from shared memory block.
 **/

function shmop_read( Shmop $shmop,  int $offset,  int $size) {

  /**
   * shmop_read will read a string from shared memory block.
   **/
}

/**
 * Get size of shared memory block.
 **/

function shmop_size( Shmop $shmop) {

  /**
   * shmop_size is used to get the size, in bytes of the shared
   * memory block.
   **/
}

/**
 * Write data into shared memory block.
 **/

function shmop_write( Shmop $shmop,  string $data,  int $offset) {

  /**
   * shmop_write will write a string into shared memory block.
   **/
}

/**
 * Decodes a JSON string.
 **/

function simdjson_decode(
     string $json
  ,  bool $associative = false
  ,  int $depth = 512
  ) {

  /**
   * Takes a JSON encoded string and converts it into a PHP value.
   * This uses a faster Simultaneous Instruction, Multiple Data
   * implementation than json_decode when it is supported by the
   * computer architecture.
   **/
}

/**
 * Check if a JSON string is valid.
 **/

function simdjson_is_valid( string $json = false,  int $depth = 512) {

  /**
   * Takes a JSON encoded string and returns true if it is valid.
   **/
}

/**
 * Returns the value at a JSON pointer..
 **/

function simdjson_key_count(
     string $json
  ,  string $key
  ,  int $depth = 512
  ,  bool $throw_if_uncountable = false
  ) {

  /**
   * Count the number of elements of the object/array found at the
   * requested JSON pointer.
   **/
}

/**
 * Check if the JSON contains the value referred to by a JSON.
 * pointer..
 **/

function simdjson_key_exists(
     string $json
  ,  string $key
  ,  int $depth
  ) {

  /**
   * Count the number of elements of the object/array found at the
   * requested JSON pointer.
   **/
}

/**
 * Decodes the value of a JSON string located at the requested.
 * JSON pointer..
 **/

function simdjson_key_value(
     string $json
  ,  string $key
  ,  bool $associative = false
  ,  int $depth = 512
  ) {

  /**
   * Decodes and returns the value found at the requested JSON
   * pointer.
   **/
}

/**
 * Get a SimpleXMLElement object from a DOM node.
 **/

function simplexml_import_dom(
     object $node
  , $class_name = SimpleXMLElement::class
  ) {

  /**
   * This function takes a node of a DOM document and makes it
   * into a SimpleXML node. This new object can then be used as a
   * native SimpleXML element.
   **/
}

/**
 * Interprets an XML file into an object.
 **/

function simplexml_load_file(
     string $filename
  , $class_name = SimpleXMLElement::class
  ,  int $options = 0
  ,  string $namespace_or_prefix = ""
  ,  bool $is_prefix = false
  ) {

  /**
   * Convert the well-formed XML document in the given file to an
   * object.
   **/
}

/**
 * Interprets a string of XML into an object.
 **/

function simplexml_load_string(
     string $data
  , $class_name = SimpleXMLElement::class
  ,  int $options = 0
  ,  string $namespace_or_prefix = ""
  ,  bool $is_prefix = false
  ) {

  /**
   * Takes a well-formed XML string and returns it as an object.
   **/
}

/**
 * Fetches the current value of the NET-SNMP library's.
 * quick_print setting.
 **/

function snmp_get_quick_print() {

  /**
   * Returns the current value stored in the NET-SNMP Library for
   * quick_print. quick_print is off by default.
   **/
}

/**
 * Return the method how the SNMP values will be returned.
 **/

function snmp_get_valueretrieval() {

  /**
   **/
}

/**
 * Reads and parses a MIB file into the active MIB tree.
 **/

function snmp_read_mib( string $filename) {

  /**
   * This function is used to load additional, e.g. vendor
   * specific, MIBs so that human readable OIDs like
   * VENDOR-MIB::foo.1 instead of error prone numeric OIDs can be
   * used.
   *
   * The order in which the MIBs are loaded does matter as the
   * underlying Net-SNMP library will print warnings if referenced
   * objects cannot be resolved.
   **/
}

/**
 * Return all values that are enums with their enum value.
 * instead of the raw integer.
 **/

function snmp_set_enum_print( bool $enable) {

  /**
   * This function toggles if snmpwalk/snmpget etc. should
   * automatically lookup enum values in the MIB and return them
   * together with their human readable string.
   **/
}

/**
 * &Alias; snmp_set_oid_output_format.
 **/

function () {

  /**
   * &info.function.alias; snmp_set_oid_output_format.
   **/
}

/**
 * Set the OID output format.
 **/

function snmp_set_oid_output_format( int $format) {

  /**
   * snmp_set_oid_output_format sets the output format to be full
   * or numeric.
   **/
}

/**
 * Set the value of enable within the NET-SNMP library.
 **/

function snmp_set_quick_print( bool $enable) {

  /**
   * Sets the value of enable within the NET-SNMP library. When
   * this is set (1), the SNMP library will return 'quick printed'
   * values. This means that just the value will be printed. When
   * enable is not enabled (default) the NET-SNMP library prints
   * extra information including the type of the value (i.e.
   * IpAddress or OID). Additionally, if quick_print is not
   * enabled, the library prints additional hex values for all
   * strings of three characters or less.
   *
   * By default the NET-SNMP library returns verbose values,
   * quick_print is used to return only the value.
   *
   * Currently strings are still returned with extra quotes, this
   * will be corrected in a later release.
   **/
}

/**
 * Specify the method how the SNMP values will be returned.
 **/

function snmp_set_valueretrieval( int $method) {

  /**
   **/
}

/**
 * Fetch an SNMP object.
 **/

function snmp2_get(
     string $hostname
  ,  string $community
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * The snmp2_get function is used to read the value of an SNMP
   * object specified by the object_id.
   **/
}

/**
 * Fetch the SNMP object which follows the given object id.
 **/

function snmp2_getnext(
     string $hostname
  ,  string $community
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * The snmp2_get_next function is used to read the value of the
   * SNMP object that follows the specified object_id.
   **/
}

/**
 * Return all objects including their respective object ID within.
 * the specified one.
 **/

function snmp2_real_walk(
     string $hostname
  ,  string $community
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * The snmp2_real_walk function is used to traverse over a
   * number of SNMP objects starting from object_id and return not
   * only their values but also their object ids.
   **/
}

/**
 * Set the value of an SNMP object.
 **/

function snmp2_set(
     string $hostname
  ,  string $community
  , $object_id
  , $type
  , $value
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * snmp2_set is used to set the value of an SNMP object
   * specified by the object_id.
   **/
}

/**
 * Fetch all the SNMP objects from an agent.
 **/

function snmp2_walk(
     string $hostname
  ,  string $community
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * snmp2_walk function is used to read all the values from an
   * SNMP agent specified by the hostname.
   **/
}

/**
 * Fetch an SNMP object.
 **/

function snmp3_get(
     string $hostname
  ,  string $security_name
  ,  string $security_level
  ,  string $auth_protocol
  ,  string $auth_passphrase
  ,  string $privacy_protocol
  ,  string $privacy_passphrase
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * The snmp3_get function is used to read the value of an SNMP
   * object specified by the object_id.
   **/
}

/**
 * Fetch the SNMP object which follows the given object id.
 **/

function snmp3_getnext(
     string $hostname
  ,  string $security_name
  ,  string $security_level
  ,  string $auth_protocol
  ,  string $auth_passphrase
  ,  string $privacy_protocol
  ,  string $privacy_passphrase
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * The snmp3_getnext function is used to read the value of the
   * SNMP object that follows the specified object_id.
   **/
}

/**
 * Return all objects including their respective object ID within.
 * the specified one.
 **/

function snmp3_real_walk(
     string $hostname
  ,  string $security_name
  ,  string $security_level
  ,  string $auth_protocol
  ,  string $auth_passphrase
  ,  string $privacy_protocol
  ,  string $privacy_passphrase
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * The snmp3_real_walk function is used to traverse over a
   * number of SNMP objects starting from object_id and return not
   * only their values but also their object ids.
   **/
}

/**
 * Set the value of an SNMP object.
 **/

function snmp3_set(
     string $hostname
  ,  string $security_name
  ,  string $security_level
  ,  string $auth_protocol
  ,  string $auth_passphrase
  ,  string $privacy_protocol
  ,  string $privacy_passphrase
  , $object_id
  , $type
  , $value
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * snmp3_set is used to set the value of an SNMP object
   * specified by the object_id.
   *
   * Even if the security level does not use an auth or priv
   * protocol/password valid values have to be specified.
   **/
}

/**
 * Fetch all the SNMP objects from an agent.
 **/

function snmp3_walk(
     string $hostname
  ,  string $security_name
  ,  string $security_level
  ,  string $auth_protocol
  ,  string $auth_passphrase
  ,  string $privacy_protocol
  ,  string $privacy_passphrase
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * snmp3_walk function is used to read all the values from an
   * SNMP agent specified by the hostname.
   *
   * Even if the security level does not use an auth or priv
   * protocol/password valid values have to be specified.
   **/
}

/**
 * Fetch an SNMP object.
 **/

function snmpget(
     string $hostname
  ,  string $community
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * The snmpget function is used to read the value of an SNMP
   * object specified by the object_id.
   **/
}

/**
 * Fetch the SNMP object which follows the given object id.
 **/

function snmpgetnext(
     string $hostname
  ,  string $community
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * The snmpgetnext function is used to read the value of the
   * SNMP object that follows the specified object_id.
   **/
}

/**
 * Return all objects including their respective object ID.
 * within the specified one.
 **/

function snmprealwalk(
     string $hostname
  ,  string $community
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * The snmprealwalk function is used to traverse over a number
   * of SNMP objects starting from object_id and return not only
   * their values but also their object ids.
   **/
}

/**
 * Set the value of an SNMP object.
 **/

function snmpset(
     string $hostname
  ,  string $community
  , $object_id
  , $type
  , $value
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * snmpset is used to set the value of an SNMP object specified
   * by the object_id.
   **/
}

/**
 * Fetch all the SNMP objects from an agent.
 **/

function snmpwalk(
     string $hostname
  ,  string $community
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * snmpwalk function is used to read all the values from an SNMP
   * agent specified by the hostname.
   **/
}

/**
 * Query for a tree of information about a network entity.
 **/

function snmpwalkoid(
     string $hostname
  ,  string $community
  , $object_id
  ,  int $timeout = -1
  ,  int $retries = -1
  ) {

  /**
   * snmpwalkoid function is used to read all object ids and their
   * respective values from an SNMP agent specified by hostname.
   *
   * The existence of snmpwalkoid and snmpwalk has historical
   * reasons. Both functions are provided for backward
   * compatibility. Use snmprealwalk instead.
   **/
}

/**
 * Checks if a SOAP call has failed.
 **/

function is_soap_fault( mixed $object) {

  /**
   * This function is useful to check if the SOAP call failed, but
   * without using exceptions. To use it, create a SoapClient
   * object with the exceptions option set to zero or &false;. In
   * this case, the SOAP method will return a special SoapFault
   * object which encapsulates the fault details (faultcode,
   * faultstring, faultactor and faultdetails).
   *
   * If exceptions is not set then SOAP call will throw an
   * exception on error. is_soap_fault checks if the given
   * parameter is a SoapFault object.
   **/
}

/**
 * Set whether to use the SOAP error handler.
 **/

function use_soap_error_handler( bool $enable = true) {

  /**
   * This function sets whether or not to use the SOAP error
   * handler in the SOAP server. It will return the previous value.
   * If set to &true;, details of errors in a SoapServer
   * application will be sent to the client as a SOAP fault
   * message. If &false;, the standard PHP error handler is used.
   * The default is to send error to the client as SOAP fault
   * message.
   **/
}

/**
 * Accepts a connection on a socket.
 **/

function socket_accept( Socket $socket) {

  /**
   * After the socket socket has been created using socket_create,
   * bound to a name with socket_bind, and told to listen for
   * connections with socket_listen, this function will accept
   * incoming connections on that socket. Once a successful
   * connection is made, a new Socket instance is returned, which
   * may be used for communication. If there are multiple
   * connections queued on the socket, the first will be used. If
   * there are no pending connections, socket_accept will block
   * until a connection becomes present. If socket has been made
   * non-blocking using socket_set_blocking or socket_set_nonblock,
   * &false; will be returned.
   *
   * The Socket instance returned by socket_accept may not be used
   * to accept new connections. The original listening socket
   * socket, however, remains open and may be reused.
   **/
}

/**
 * Create and bind to a socket from a given addrinfo.
 **/

function socket_addrinfo_bind( AddressInfo $address) {

  /**
   * Create a Socket instance, and bind it to the provided
   * AddressInfo. The return value of this function may be used
   * with socket_listen.
   **/
}

/**
 * Create and connect to a socket from a given addrinfo.
 **/

function socket_addrinfo_connect( AddressInfo $address) {

  /**
   * Create a Socket instance, and connect it to the provided
   * AddressInfo instance. The return value of this function may be
   * used with the rest of the socket functions.
   **/
}

/**
 * Get information about addrinfo.
 **/

function socket_addrinfo_explain( AddressInfo $address) {

  /**
   * socket_addrinfo_explain exposed the underlying addrinfo
   * structure.
   **/
}

/**
 * Get array with contents of getaddrinfo about the given.
 * hostname.
 **/

function socket_addrinfo_lookup(
     string $host
  , $service = null
  ,  array $hints = []
  ) {

  /**
   * Lookup different ways we can connect to host. The returned
   * array contains a set of AddressInfo instances that we can bind
   * to using socket_addrinfo_bind.
   **/
}

/**
 * Determines whether socket is at out-of-band mark.
 **/

function socket_atmark( Socket $socket) {

  /**
   * Determines whether socket is at out-of-band mark.
   **/
}

/**
 * Binds a name to a socket.
 **/

function socket_bind(
     Socket $socket
  ,  string $address
  ,  int $port = 0
  ) {

  /**
   * Binds the name given in address to the socket described by
   * socket. This has to be done before a connection is established
   * using socket_connect or socket_listen.
   **/
}

/**
 * Clears the error on the socket or the last error code.
 **/

function socket_clear_error($socket = null) {

  /**
   * This function clears the error code on the given socket or
   * the global last socket error if no socket is specified.
   *
   * This function allows explicitly resetting the error code
   * value either of a socket or of the extension global last error
   * code. This may be useful to detect within a part of the
   * application if an error occurred or not.
   **/
}

/**
 * Closes a Socket instance.
 **/

function socket_close( Socket $socket) {

  /**
   * socket_close closes the Socket instance given by socket.
   **/
}

/**
 * Calculate message buffer size.
 **/

function socket_cmsg_space( int $level,  int $type,  int $num = 0) {

  /**
   * Calculates the size of the buffer that should be allocated
   * for receiving the ancillary data.
   **/
}

/**
 * Initiates a connection on a socket.
 **/

function socket_connect(
     Socket $socket
  ,  string $address
  , $port = null
  ) {

  /**
   * Initiate a connection to address using the Socket instance
   * socket, which must be Socket instance created with
   * socket_create.
   **/
}

/**
 * Opens a socket on port to accept connections.
 **/

function socket_create_listen( int $port,  int $backlog = SOMAXCONN) {

  /**
   * socket_create_listen creates a new Socket instance of type
   * AF_INET listening on all local interfaces on the given port
   * waiting for new connections.
   *
   * This function is meant to ease the task of creating a new
   * socket which only listens to accept new connections.
   **/
}

/**
 * Creates a pair of indistinguishable sockets and stores them in.
 * an array.
 **/

function socket_create_pair(
     int $domain
  ,  int $type
  ,  int $protocol
  ,  array &$pair
  ) {

  /**
   * socket_create_pair creates two connected and
   * indistinguishable sockets, and stores them in pair. This
   * function is commonly used in IPC (InterProcess Communication).
   **/
}

/**
 * Create a socket (endpoint for communication).
 **/

function socket_create( int $domain,  int $type,  int $protocol) {

  /**
   * Creates and returns a Socket instance, also referred to as an
   * endpoint of communication. A typical network connection is
   * made up of 2 sockets, one performing the role of the client,
   * and another performing the role of the server.
   **/
}

/**
 * Export a socket into a stream that encapsulates a socket.
 **/

function socket_export_stream( Socket $socket) {

  /**
   **/
}

/**
 * Gets socket options for the socket.
 **/

function socket_get_option(
     Socket $socket
  ,  int $level
  ,  int $option
  ) {

  /**
   * The socket_get_option function retrieves the value for the
   * option specified by the option parameter for the specified
   * socket.
   **/
}

/**
 * &Alias; socket_get_option.
 **/

function () {

  /**
   **/
}

/**
 * Queries the remote side of the given socket.
 **/

function socket_getpeername(
     Socket $socket
  ,  string &$address
  ,  int &$port = null
  ) {

  /**
   * Queries the remote side of the given socket which may either
   * result in host/port or in a Unix filesystem path, dependent on
   * its type.
   **/
}

/**
 * Queries the local side of the given socket which may either.
 * result in host/port or in a Unix filesystem path, dependent on.
 * its type.
 **/

function socket_getsockname(
     Socket $socket
  ,  string &$address
  ,  int &$port = null
  ) {

  /**
   **/
}

/**
 * Import a stream.
 **/

function socket_import_stream( resource $stream) {

  /**
   * Imports a stream that encapsulates a socket into a socket
   * extension resource.
   **/
}

/**
 * Returns the last error on the socket.
 **/

function socket_last_error($socket = null) {

  /**
   * If a Socket instance is passed to this function, the last
   * error which occurred on this particular socket is returned. If
   * socket is &null;, the error code of the last failed socket
   * function is returned. The latter is particularly helpful for
   * functions like socket_create which don't return a socket on
   * failure and socket_select which can fail for reasons not
   * directly tied to a particular socket. The error code is
   * suitable to be fed to socket_strerror which returns a string
   * describing the given error code.
   *
   * If no error had occurred, or the error had been cleared with
   * socket_clear_error, the function returns 0.
   **/
}

/**
 * Listens for a connection on a socket.
 **/

function socket_listen( Socket $socket,  int $backlog = 0) {

  /**
   * After the socket socket has been created using socket_create
   * and bound to a name with socket_bind, it may be told to listen
   * for incoming connections on socket.
   *
   * socket_listen is applicable only to sockets of type
   * SOCK_STREAM or SOCK_SEQPACKET.
   **/
}

/**
 * Reads a maximum of length bytes from a socket.
 **/

function socket_read(
     Socket $socket
  ,  int $length
  ,  int $mode = PHP_BINARY_READ
  ) {

  /**
   * The function socket_read reads from the Socket instance
   * socket created by the socket_create or socket_accept
   * functions.
   **/
}

/**
 * Receives data from a connected socket.
 **/

function socket_recv(
     Socket $socket
  , &$data
  ,  int $length
  ,  int $flags
  ) {

  /**
   * The socket_recv function receives length bytes of data in
   * data from socket. socket_recv can be used to gather data from
   * connected sockets. Additionally, one or more flags can be
   * specified to modify the behaviour of the function.
   *
   * data is passed by reference, so it must be specified as a
   * variable in the argument list. Data read from socket by
   * socket_recv will be returned in data.
   **/
}

/**
 * Receives data from a socket whether or not it is.
 * connection-oriented.
 **/

function socket_recvfrom(
     Socket $socket
  ,  string &$data
  ,  int $length
  ,  int $flags
  ,  string &$address
  ,  int &$port = null
  ) {

  /**
   * The socket_recvfrom function receives length bytes of data in
   * data from address on port port (if the socket is not of type
   * AF_UNIX) using socket. socket_recvfrom can be used to gather
   * data from both connected and unconnected sockets.
   * Additionally, one or more flags can be specified to modify the
   * behaviour of the function.
   *
   * The address and port must be passed by reference. If the
   * socket is not connection-oriented, address will be set to the
   * internet protocol address of the remote host or the path to
   * the UNIX socket. If the socket is connection-oriented, address
   * is &null;. Additionally, the port will contain the port of the
   * remote host in the case of an unconnected AF_INET or AF_INET6
   * socket.
   **/
}

/**
 * Read a message.
 **/

function socket_recvmsg(
     Socket $socket
  ,  array &$message
  ,  int $flags = 0
  ) {

  /**
   **/
}

/**
 * Runs the select() system call on the given arrays of sockets.
 * with a specified timeout.
 **/

function socket_select(
    &$read
  , &$write
  , &$except
  , $seconds
  ,  int $microseconds = 0
  ) {

  /**
   * socket_select accepts arrays of sockets and waits for them to
   * change status. Those coming with BSD sockets background will
   * recognize that those socket arrays are in fact the so-called
   * file descriptor sets. Three independent arrays of sockets are
   * watched.
   **/
}

/**
 * Sends data to a connected socket.
 **/

function socket_send(
     Socket $socket
  ,  string $data
  ,  int $length
  ,  int $flags
  ) {

  /**
   * The function socket_send sends length bytes to the socket
   * socket from data.
   **/
}

/**
 * Send a message.
 **/

function socket_sendmsg(
     Socket $socket
  ,  array $message
  ,  int $flags = 0
  ) {

  /**
   **/
}

/**
 * Sends a message to a socket, whether it is connected or not.
 **/

function socket_sendto(
     Socket $socket
  ,  string $data
  ,  int $length
  ,  int $flags
  ,  string $address
  , $port = null
  ) {

  /**
   * The function socket_sendto sends length bytes from data
   * through the socket socket to the port at the address address.
   **/
}

/**
 * Sets blocking mode on a socket.
 **/

function socket_set_block( Socket $socket) {

  /**
   * The socket_set_block function removes the O_NONBLOCK flag on
   * the socket specified by the socket parameter.
   *
   * When an operation (e.g. receive, send, connect, accept, ...)
   * is performed on a blocking socket, the script will pause its
   * execution until it receives a signal or it can perform the
   * operation.
   **/
}

/**
 * Sets nonblocking mode for file descriptor fd.
 **/

function socket_set_nonblock( Socket $socket) {

  /**
   * The socket_set_nonblock function sets the O_NONBLOCK flag on
   * the socket specified by the socket parameter.
   *
   * When an operation (e.g. receive, send, connect, accept, ...)
   * is performed on a non-blocking socket, the script will not
   * pause its execution until it receives a signal or it can
   * perform the operation. Rather, if the operation would result
   * in a block, the called function will fail.
   **/
}

/**
 * Sets socket options for the socket.
 **/

function socket_set_option(
     Socket $socket
  ,  int $level
  ,  int $option
  , $value
  ) {

  /**
   * The socket_set_option function sets the option specified by
   * the option parameter, at the specified protocol level, to the
   * value pointed to by the value parameter for the socket.
   **/
}

/**
 * &Alias; socket_set_option.
 **/

function () {

  /**
   **/
}

/**
 * Shuts down a socket for receiving, sending, or both.
 **/

function socket_shutdown( Socket $socket,  int $mode = 2) {

  /**
   * The socket_shutdown function allows you to stop incoming,
   * outgoing or all data (the default) from being sent through the
   * socket
   *
   * The associated buffer, or buffers, may or may not be emptied.
   **/
}

/**
 * Return a string describing a socket error.
 **/

function socket_strerror( int $error_code) {

  /**
   * socket_strerror takes as its error_code parameter a socket
   * error code as returned by socket_last_error and returns the
   * corresponding explanatory text.
   *
   * Although the error messages generated by the socket extension
   * are in English, the system messages retrieved with this
   * function will appear depending on the current locale
   * (LC_MESSAGES).
   **/
}

/**
 * Write to a socket.
 **/

function socket_write( Socket $socket,  string $data, $length = null) {

  /**
   * The function socket_write writes to the socket from the given
   * data.
   **/
}

/**
 * Exports the WSAPROTOCOL_INFO Structure.
 **/

function socket_wsaprotocol_info_export(
     Socket $socket
  ,  int $process_id
  ) {

  /**
   * Exports the WSAPROTOCOL_INFO structure into shared memory and
   * returns an identifier to be used with
   * socket_wsaprotocol_info_import. The exported ID is only valid
   * for the given process_id.
   **/
}

/**
 * Imports a Socket from another Process.
 **/

function socket_wsaprotocol_info_import( string $info_id) {

  /**
   * Imports a socket which has formerly been exported from
   * another process.
   **/
}

/**
 * Releases an exported WSAPROTOCOL_INFO Structure.
 **/

function socket_wsaprotocol_info_release( string $info_id) {

  /**
   * Releases the shared memory corresponding to the given
   * info_id.
   **/
}

/**
 * Add large numbers.
 **/

function sodium_add( string &$string1,  string $string2) {

  /**
   * This adds the parameter string2 to string1, overwriting the
   * value stored in string1. This function assumes both parameters
   * are binary strings that represent unsigned integers in
   * little-endian byte order.
   **/
}

/**
 * Decodes a base64-encoded string into raw binary..
 **/

function sodium_base642bin(
     string $string
  ,  int $id
  ,  string $ignore = ""
  ) {

  /**
   * Converts a base64 encoded string into raw binary. Unlike
   * base64_decode, sodium_base642bin is constant-time (a property
   * that is important for any code that touches cryptographic
   * inputs, such as plaintexts or keys) and supports multiple
   * character sets.
   **/
}

/**
 * Encodes a raw binary string with base64..
 **/

function sodium_bin2base64( string $string,  int $id) {

  /**
   * Converts a raw binary string into a base64-encoded string.
   * Unlike base64_encode, sodium_bin2base64 is constant-time (a
   * property that is important for any code that touches
   * cryptographic inputs, such as plaintexts or keys) and supports
   * multiple character sets.
   **/
}

/**
 * Encode to hexadecimal.
 **/

function sodium_bin2hex( string $string) {

  /**
   * Converts a raw binary string into a hex-encoded string.
   * Unlike the standard hex-encoding function, sodium_bin2hex is
   * constant-time (a property that is important for any code that
   * touches cryptographic inputs, such as plaintexts or keys).
   **/
}

/**
 * Compare large numbers.
 **/

function sodium_compare( string $string1,  string $string2) {

  /**
   * Compare two strings as if they were arbitrary-length,
   * unsigned little-endian integers, without side-channel leakage.
   **/
}

/**
 * Verify then decrypt a message with AES-256-GCM.
 **/

function sodium_crypto_aead_aes256gcm_decrypt(
     string $ciphertext
  ,  string $additional_data
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Verify then decrypt with AES-256-GCM. Only available if
   * sodium_crypto_aead_aes256gcm_is_available returns &true;.
   **/
}

/**
 * Encrypt then authenticate with AES-256-GCM.
 **/

function sodium_crypto_aead_aes256gcm_encrypt(
     string $message
  ,  string $additional_data
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Encrypt then authenticate with AES-256-GCM. Only available if
   * sodium_crypto_aead_aes256gcm_is_available returns &true;.
   **/
}

/**
 * Check if hardware supports AES256-GCM.
 **/

function sodium_crypto_aead_aes256gcm_is_available() {

  /**
   * The return value of this function depends on whether or not
   * the hardware supports hardware-accelerated AES.
   **/
}

/**
 * Generate a random AES-256-GCM key.
 **/

function sodium_crypto_aead_aes256gcm_keygen() {

  /**
   * Generate a random key for use with
   * sodium_crypto_aead_aes256gcm_encrypt and
   * sodium_crypto_aead_aes256gcm_decrypt.
   **/
}

/**
 * Verify then decrypt with ChaCha20-Poly1305.
 **/

function sodium_crypto_aead_chacha20poly1305_decrypt(
     string $ciphertext
  ,  string $additional_data
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Verify then decrypt with ChaCha20-Poly1305.
   **/
}

/**
 * Encrypt then authenticate with ChaCha20-Poly1305.
 **/

function sodium_crypto_aead_chacha20poly1305_encrypt(
     string $message
  ,  string $additional_data
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Encrypt then authenticate with ChaCha20-Poly1305.
   **/
}

/**
 * Verify that the ciphertext includes a valid tag.
 **/

function sodium_crypto_aead_chacha20poly1305_ietf_decrypt(
     string $ciphertext
  ,  string $additional_data
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Verify then decrypt with ChaCha20-Poly1305 (IETF variant).
   *
   * The IETF variant uses 96-bit nonces and 32-bit internal
   * counters, instead of 64-bit for both.
   **/
}

/**
 * Encrypt a message.
 **/

function sodium_crypto_aead_chacha20poly1305_ietf_encrypt(
     string $message
  ,  string $additional_data
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Encrypt then authenticate with ChaCha20-Poly1305 (IETF
   * variant).
   *
   * The IETF variant uses 96-bit nonces and 32-bit internal
   * counters, instead of 64-bit for both.
   **/
}

/**
 * Generate a random ChaCha20-Poly1305 (IETF) key..
 **/

function sodium_crypto_aead_chacha20poly1305_ietf_keygen() {

  /**
   * Generate a random key for use with
   * sodium_crypto_aead_chacha20poly1305_ietf_encrypt and
   * sodium_crypto_aead_chacha20poly1305_ietf_decrypt.
   **/
}

/**
 * Generate a random ChaCha20-Poly1305 key..
 **/

function sodium_crypto_aead_chacha20poly1305_keygen() {

  /**
   * Generate a random key for use with
   * sodium_crypto_aead_chacha20poly1305_encrypt and
   * sodium_crypto_aead_chacha20poly1305_decrypt.
   **/
}

/**
 * (Preferred) Verify then decrypt with XChaCha20-Poly1305.
 **/

function sodium_crypto_aead_xchacha20poly1305_ietf_decrypt(
     string $ciphertext
  ,  string $additional_data
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Verify then decrypt with ChaCha20-Poly1305 (eXtended-nonce
   * variant).
   *
   * Generally, XChaCha20-Poly1305 is the best of the provided
   * AEAD modes to use.
   **/
}

/**
 * (Preferred) Encrypt then authenticate with XChaCha20-Poly1305.
 **/

function sodium_crypto_aead_xchacha20poly1305_ietf_encrypt(
     string $message
  ,  string $additional_data
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Encrypt then authenticate with XChaCha20-Poly1305
   * (eXtended-nonce variant).
   *
   * Generally, XChaCha20-Poly1305 is the best of the provided
   * AEAD modes to use.
   **/
}

/**
 * Generate a random XChaCha20-Poly1305 key..
 **/

function sodium_crypto_aead_xchacha20poly1305_ietf_keygen() {

  /**
   * Generate a random key for use with
   * sodium_crypto_aead_xchacha20poly1305_ietf_encrypt and
   * sodium_crypto_aead_xchacha20poly1305_ietf_decrypt.
   **/
}

/**
 * Generate a random key for sodium_crypto_auth.
 **/

function sodium_crypto_auth_keygen() {

  /**
   * Generate a key for use with sodium_crypto_auth and
   * sodium_crypto_auth_verify.
   **/
}

/**
 * Verifies that the tag is valid for the message.
 **/

function sodium_crypto_auth_verify(
     string $mac
  ,  string $message
  ,  string $key
  ) {

  /**
   * Verify the authentication tag is valid for a given message
   * and key.
   *
   * Unlike with digital signatures (e.g.
   * sodium_crypto_sign_verify_detached), any party capable of
   * verifying a message is also capable of authenticating their
   * own messages. (Hence, symmetric authentication.)
   **/
}

/**
 * Compute a tag for the message.
 **/

function sodium_crypto_auth( string $message,  string $key) {

  /**
   * Symmetric message authentication via sodium_crypto_auth
   * provides integrity, but not confidentiality.
   *
   * Unlike with digital signatures (e.g.
   * sodium_crypto_sign_detached), any party capable of verifying a
   * message is also capable of authenticating their own messages.
   * (Hence, symmetric authentication.)
   **/
}

/**
 * Create a unified keypair string from a secret key and public.
 * key.
 **/

function sodium_crypto_box_keypair_from_secretkey_and_publickey(
     string $secret_key
  ,  string $public_key
  ) {

  /**
   * This function exists to satisfy the API requirements of e.g.
   * crypto_box. Pass in one party's secret key and the other's
   * public key, and you will obtain a "keypair" for your
   * conversation.
   **/
}

/**
 * Randomly generate a secret key and a corresponding public key.
 **/

function sodium_crypto_box_keypair() {

  /**
   * Generates a secret key and a public key as one string.
   *
   * To get the secret key out of this unified keypair string, see
   * sodium_crypto_box_secretkey. To get the public key out of this
   * unified keypair string, see sodium_crypto_box_publickey.
   **/
}

/**
 * Authenticated public-key decryption.
 **/

function sodium_crypto_box_open(
     string $ciphertext
  ,  string $nonce
  ,  string $key_pair
  ) {

  /**
   * Decrypt a message using asymmetric (public key) cryptography.
   **/
}

/**
 * Calculate the public key from a secret key.
 **/

function sodium_crypto_box_publickey_from_secretkey(
     string $secret_key
  ) {

  /**
   * Given a secret key, calculate the corresponding public key.
   *
   * This only works with the type of keys intended for use with
   * crypto_box (which uses Elliptic Curve Diffie-Hellman over the
   * Montgomery curve, Curve25519; abbreviated as X25519), not
   * crypto_sign (which uses Edwards Digital Signature Algorithm
   * over the Edwards Curve with the corresponding paramaters;
   * abbreviated Ed25519).
   **/
}

/**
 * Extract the public key from a crypto_box keypair.
 **/

function sodium_crypto_box_publickey( string $key_pair) {

  /**
   * Given a keypair, fetch only the public key.
   **/
}

/**
 * Anonymous public-key decryption.
 **/

function sodium_crypto_box_seal_open(
     string $ciphertext
  ,  string $key_pair
  ) {

  /**
   * Decrypt a message that was encrypted with
   * sodium_crypto_box_seal
   **/
}

/**
 * Anonymous public-key encryption.
 **/

function sodium_crypto_box_seal(
     string $message
  ,  string $public_key
  ) {

  /**
   * Encrypt a message such that only the recipient can decrypt
   * it.
   *
   * Unlike with sodium_crypto_box, you only need to know the
   * recipient's public key to use sodium_crypto_box_seal. One
   * consequence of this convenience, however, is that the
   * ciphertext isn't bound to a static public key, and is
   * therefore not authenticated. Hence, anonymous public-key
   * encryption.
   *
   * sodium_crypto_box_seal still provides ciphertext integrity.
   * Just not sender identity authentication.
   *
   * If you also need sender authentication, the
   * sodium_crypto_sign functions are likely the best place to
   * start.
   **/
}

/**
 * Extracts the secret key from a crypto_box keypair.
 **/

function sodium_crypto_box_secretkey( string $key_pair) {

  /**
   * Given a keypair, fetch only the secret key.
   **/
}

/**
 * Deterministically derive the key pair from a single key.
 **/

function sodium_crypto_box_seed_keypair( string $seed) {

  /**
   * Clamps the seed to form a secret key, derives the public key,
   * and returns the two as a keypair.
   *
   * The *_seed_keypair functions are ideal for generating a
   * keypair from a password and salt. Use the result as a seed to
   * generate the desired keys.
   **/
}

/**
 * Authenticated public-key encryption.
 **/

function sodium_crypto_box(
     string $message
  ,  string $nonce
  ,  string $key_pair
  ) {

  /**
   * Encrypt a message using asymmetric (public key) cryptography.
   *
   * The algorithm used by functions prefixed with
   * sodium_crypto_box are Elliptic Curve Diffie-Hellman over the
   * Montgomery curve, Curve25519; usually abbreviated as X25519.
   **/
}

/**
 * Adds an element.
 **/

function sodium_crypto_core_ristretto255_add( string $p,  string $q) {

  /**
   * Adds an element q to p. Available as of libsodium 1.0.18.
   **/
}

/**
 * Maps a vector.
 **/

function sodium_crypto_core_ristretto255_from_hash( string $s) {

  /**
   * Maps a 64-bytes vector s to a group element. Available as of
   * libsodium 1.0.18.
   **/
}

/**
 * Determines if a point on the ristretto255 curve.
 **/

function sodium_crypto_core_ristretto255_is_valid_point( string $s) {

  /**
   * Determines if a point on the ristretto255 curve, in canonical
   * form, on the main subgroup, and that the point doesn't have a
   * small order. Available as of libsodium 1.0.18.
   **/
}

/**
 * Generates a random key.
 **/

function sodium_crypto_core_ristretto255_random() {

  /**
   * Generates a random key. Available as of libsodium 1.0.18.
   **/
}

/**
 * Adds a scalar value.
 **/

function sodium_crypto_core_ristretto255_scalar_add(
     string $x
  ,  string $y
  ) {

  /**
   * Adds an element y to x. Available as of libsodium 1.0.18.
   **/
}

/**
 * The sodium_crypto_core_ristretto255_scalar_complement purpose.
 **/

function sodium_crypto_core_ristretto255_scalar_complement(
     string $s
  ) {

  /**
   * Available as of libsodium 1.0.18.
   **/
}

/**
 * Inverts a scalar value.
 **/

function sodium_crypto_core_ristretto255_scalar_invert( string $s) {

  /**
   * Inverts a scalar value. Available as of libsodium 1.0.18.
   **/
}

/**
 * Multiplies a scalar value.
 **/

function sodium_crypto_core_ristretto255_scalar_mul(
     string $x
  ,  string $y
  ) {

  /**
   * Multiplies a scalar value. Available as of libsodium 1.0.18.
   **/
}

/**
 * Negates a scalar value.
 **/

function sodium_crypto_core_ristretto255_scalar_negate( string $s) {

  /**
   * Negates a scalar value. Available as of libsodium 1.0.18.
   **/
}

/**
 * Generates a random key.
 **/

function sodium_crypto_core_ristretto255_scalar_random() {

  /**
   * Generates a random key. Available as of libsodium 1.0.18.
   **/
}

/**
 * Reduces a scalar value.
 **/

function sodium_crypto_core_ristretto255_scalar_reduce( string $s) {

  /**
   * Reduces a scalar value. Available as of libsodium 1.0.18.
   **/
}

/**
 * Subtracts a scalar value.
 **/

function sodium_crypto_core_ristretto255_scalar_sub(
     string $x
  ,  string $y
  ) {

  /**
   * Subtracts a scalar y from x. Available as of libsodium
   * 1.0.18.
   **/
}

/**
 * Subtracts an element.
 **/

function sodium_crypto_core_ristretto255_sub( string $p,  string $q) {

  /**
   * Subtracts an element q from p. Available as of libsodium
   * 1.0.18.
   **/
}

/**
 * Complete the hash.
 **/

function sodium_crypto_generichash_final(
     string &$state
  ,  int $length = SODIUM_CRYPTO_GENERICHASH_BYTES
  ) {

  /**
   * The finalization method for the streaming generichash API.
   **/
}

/**
 * Initialize a hash for streaming.
 **/

function sodium_crypto_generichash_init(
     string $key = ""
  ,  int $length = SODIUM_CRYPTO_GENERICHASH_BYTES
  ) {

  /**
   * The initialization method for the streaming generichash API.
   **/
}

/**
 * Generate a random generichash key.
 **/

function sodium_crypto_generichash_keygen() {

  /**
   * Generate a random key for use with the generichash API.
   **/
}

/**
 * Add message to a hash.
 **/

function sodium_crypto_generichash_update(
     string &$state
  ,  string $message
  ) {

  /**
   * Appends a message to the internal hash state.
   **/
}

/**
 * Get a hash of the message.
 **/

function sodium_crypto_generichash(
     string $message
  ,  string $key = ""
  ,  int $length = SODIUM_CRYPTO_GENERICHASH_BYTES
  ) {

  /**
   * Hash a message with BLAKE2b.
   **/
}

/**
 * Derive a subkey.
 **/

function sodium_crypto_kdf_derive_from_key(
     int $subkey_length
  ,  int $subkey_id
  ,  string $context
  ,  string $key
  ) {

  /**
   * Derive a subkey from a root key and additional context.
   *
   * Similar to hash_hkdf.
   **/
}

/**
 * Generate a random root key for the KDF interface.
 **/

function sodium_crypto_kdf_keygen() {

  /**
   * Generates a random key suitable for serving as the root key
   * for sodium_crypto_kdf_derive_from_key.
   **/
}

/**
 * Calculate the client-side session keys..
 **/

function sodium_crypto_kx_client_session_keys(
     string $client_key_pair
  ,  string $server_key
  ) {

  /**
   * Calculate the client-side session keys, using the X25519 +
   * BLAKE2b key-exchange method.
   **/
}

/**
 * Creates a new sodium keypair.
 **/

function sodium_crypto_kx_keypair() {

  /**
   * Create a new sodium keypair consisting of the secret key (32
   * bytes) followed by the public key (32 bytes). The keys can be
   * retrieved by calling sodium_crypto_kx_secretkey and
   * sodium_crypto_kx_publickey, respectively.
   **/
}

/**
 * Extract the public key from a crypto_kx keypair.
 **/

function sodium_crypto_kx_publickey( string $key_pair) {

  /**
   * Extract the public key from a crypto_kx keypair.
   **/
}

/**
 * Extract the secret key from a crypto_kx keypair..
 **/

function sodium_crypto_kx_secretkey( string $key_pair) {

  /**
   * Extract the secret key from a crypto_kx keypair.
   **/
}

/**
 * Description.
 **/

function sodium_crypto_kx_seed_keypair( string $seed) {

  /**
   **/
}

/**
 * Calculate the server-side session keys..
 **/

function sodium_crypto_kx_server_session_keys(
     string $server_key_pair
  ,  string $client_key
  ) {

  /**
   * Calculate the server-side session keys, using the X25519 +
   * BLAKE2b key-exchange method.
   **/
}

/**
 * Verify that the password is a valid password verification.
 * string.
 **/

function sodium_crypto_pwhash_scryptsalsa208sha256_str_verify(
     string $hash
  ,  string $password
  ) {

  /**
   **/
}

/**
 * Get an ASCII encoded hash.
 **/

function sodium_crypto_pwhash_scryptsalsa208sha256_str(
     string $password
  ,  int $opslimit
  ,  int $memlimit
  ) {

  /**
   **/
}

/**
 * Derives a key from a password, using scrypt.
 **/

function sodium_crypto_pwhash_scryptsalsa208sha256(
     int $length
  ,  string $password
  ,  string $salt
  ,  int $opslimit
  ,  int $memlimit
  ) {

  /**
   * This is the scrypt counterpart to sodium_crypto_pwhash.
   *
   * A common reason to use this particular function is to derive
   * the seeds for cryptographic keys from a password and salt, and
   * then use these seeds to generate the actual keys needed for
   * some purpose (e.g. sodium_crypto_sign_detached).
   **/
}

/**
 * Determine whether or not to rehash a password.
 **/

function sodium_crypto_pwhash_str_needs_rehash(
     string $password
  ,  int $opslimit
  ,  int $memlimit
  ) {

  /**
   * Determine whether or not to rehash a password, based on the
   * current hash opslimit and memlimit.
   **/
}

/**
 * Verifies that a password matches a hash.
 **/

function sodium_crypto_pwhash_str_verify(
     string $hash
  ,  string $password
  ) {

  /**
   * Checks that a password hash created using
   * sodium_crypto_pwhash_str matches a given plain-text password.
   * Note that the parameters are in the opposite order to the same
   * parameters in the similar password_verify function.
   **/
}

/**
 * Get an ASCII-encoded hash.
 **/

function sodium_crypto_pwhash_str(
     string $password
  ,  int $opslimit
  ,  int $memlimit
  ) {

  /**
   * Uses a CPU- and memory-hard hash algorithm along with a
   * randomly-generated salt, and memory and CPU limits to generate
   * an ASCII-encoded hash suitable for password storage.
   **/
}

/**
 * Derive a key from a password, using Argon2.
 **/

function sodium_crypto_pwhash(
     int $length
  ,  string $password
  ,  string $salt
  ,  int $opslimit
  ,  int $memlimit
  ,  int $algo = SODIUM_CRYPTO_PWHASH_ALG_DEFAULT
  ) {

  /**
   * This function provides low-level access to libsodium's
   * crypto_pwhash key derivation function. Unless you have
   * specific reason to use this function, you should use
   * sodium_crypto_pwhash_str or password_hash functions instead.
   *
   * A common reason to use this particular function is to derive
   * the seeds for cryptographic keys from a password and salt, and
   * then use these seeds to generate the actual keys needed for
   * some purpose (e.g. sodium_crypto_sign_detached).
   **/
}

/**
 * &Alias; sodium_crypto_box_publickey_from_secretkey.
 **/

function () {

  /**
   **/
}

/**
 * Calculates the public key from a secret key.
 **/

function sodium_crypto_scalarmult_ristretto255_base( string $n) {

  /**
   * Given a secret key, calculates the corresponding public key.
   * Available as of libsodium 1.0.18.
   **/
}

/**
 * Computes a shared secret.
 **/

function sodium_crypto_scalarmult_ristretto255(
     string $n
  ,  string $p
  ) {

  /**
   * Calculates scalar n times point p. Available as of libsodium
   * 1.0.18.
   **/
}

/**
 * Compute a shared secret given a user's secret key and another.
 * user's public key.
 **/

function sodium_crypto_scalarmult( string $n,  string $p) {

  /**
   * Elliptic Curve Diffie-Hellman. Calculates scalar n times
   * point p, on an elliptic curve.
   **/
}

/**
 * Generate random key for sodium_crypto_secretbox.
 **/

function sodium_crypto_secretbox_keygen() {

  /**
   * Generate a key for use with sodium_crypto_secretbox and
   * sodium_crypto_secretbox_open.
   **/
}

/**
 * Authenticated shared-key decryption.
 **/

function sodium_crypto_secretbox_open(
     string $ciphertext
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Decrypt an encrypted message with a symmetric (shared) key.
   **/
}

/**
 * Authenticated shared-key encryption.
 **/

function sodium_crypto_secretbox(
     string $message
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Encrypt a message with a symmetric (shared) key.
   **/
}

/**
 * Initialize a secretstream context for decryption.
 **/

function sodium_crypto_secretstream_xchacha20poly1305_init_pull(
     string $header
  ,  string $key
  ) {

  /**
   * Initialize a secretstream context for decryption.
   **/
}

/**
 * Initialize a secretstream context for encryption.
 **/

function sodium_crypto_secretstream_xchacha20poly1305_init_push(
     string $key
  ) {

  /**
   * Initialize a secretstream context for encryption.
   **/
}

/**
 * Generate a random secretstream key..
 **/

function sodium_crypto_secretstream_xchacha20poly1305_keygen() {

  /**
   * Generate a random secretstream key.
   **/
}

/**
 * Decrypt a chunk of data from an encrypted stream.
 **/

function sodium_crypto_secretstream_xchacha20poly1305_pull(
     string &$state
  ,  string $ciphertext
  ,  string $additional_data = ""
  ) {

  /**
   * Decrypt a chunk of data from an encrypted stream.
   **/
}

/**
 * Encrypt a chunk of data so that it can safely be decrypted in.
 * a streaming API.
 **/

function sodium_crypto_secretstream_xchacha20poly1305_push(
     string &$state
  ,  string $message
  ,  string $additional_data = ""
  ,  int $tag = SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_MESSAGE
  ) {

  /**
   * Encrypt a chunk of data so that it can safely be decrypted in
   * a streaming API.
   **/
}

/**
 * Explicitly rotate the key in the secretstream state.
 **/

function sodium_crypto_secretstream_xchacha20poly1305_rekey(
     string &$state
  ) {

  /**
   * Explicitly rotate the key in the secretstream state.
   * Overwrites the value passed in.
   **/
}

/**
 * Get random bytes for key.
 **/

function sodium_crypto_shorthash_keygen() {

  /**
   * Generate a key for use with sodium_crypto_shorthash.
   **/
}

/**
 * Compute a short hash of a message and key.
 **/

function sodium_crypto_shorthash( string $message,  string $key) {

  /**
   * sodium_crypto_shorthash wraps a hash function called
   * SipHash-2-4, which is ideal for implementing hash tables that
   * are not susceptible to hash collision denial of service
   * attacks (Hash-DoS).
   *
   * SipHash-2-4 isn't a general purpose cryptographic hash
   * function.
   **/
}

/**
 * Sign the message.
 **/

function sodium_crypto_sign_detached(
     string $message
  ,  string $secret_key
  ) {

  /**
   * Sign a message with a secret key, that can be verified by the
   * corresponding public key. This function returns a detached
   * signature.
   **/
}

/**
 * Convert an Ed25519 public key to a Curve25519 public key.
 **/

function sodium_crypto_sign_ed25519_pk_to_curve25519(
     string $public_key
  ) {

  /**
   * Given an Ed25519 public key, calculate the birationally
   * equivalent X25519 public key.
   **/
}

/**
 * Convert an Ed25519 secret key to a Curve25519 secret key.
 **/

function sodium_crypto_sign_ed25519_sk_to_curve25519(
     string $secret_key
  ) {

  /**
   * Given an Ed25519 secret key, calculate the birationally
   * equivalent X25519 secret key.
   **/
}

/**
 * Join a secret key and public key together.
 **/

function sodium_crypto_sign_keypair_from_secretkey_and_publickey(
     string $secret_key
  ,  string $public_key
  ) {

  /**
   * Join a secret key and public key together.
   **/
}

/**
 * Randomly generate a secret key and a corresponding public key.
 **/

function sodium_crypto_sign_keypair() {

  /**
   * Generate a random Ed25519 keypair as one string.
   **/
}

/**
 * Check that the signed message has a valid signature.
 **/

function sodium_crypto_sign_open(
     string $signed_message
  ,  string $public_key
  ) {

  /**
   * Verify the signature attached to a message and return the
   * message
   **/
}

/**
 * Extract the Ed25519 public key from the secret key.
 **/

function sodium_crypto_sign_publickey_from_secretkey(
     string $secret_key
  ) {

  /**
   * Extract the Ed25519 public key from the secret key
   **/
}

/**
 * Extract the Ed25519 public key from a keypair.
 **/

function sodium_crypto_sign_publickey( string $key_pair) {

  /**
   * Extract the Ed25519 public key from a keypair
   **/
}

/**
 * Extract the Ed25519 secret key from a keypair.
 **/

function sodium_crypto_sign_secretkey( string $key_pair) {

  /**
   * Extract the Ed25519 secret key from a keypair
   **/
}

/**
 * Deterministically derive the key pair from a single key.
 **/

function sodium_crypto_sign_seed_keypair( string $seed) {

  /**
   * Clamps the seed to form a secret key, derives the public key,
   * and returns the two as a keypair.
   *
   * The *_seed_keypair functions are ideal for generating a
   * keypair from a password and salt. Use the result as a seed to
   * generate the desired keys.
   **/
}

/**
 * Verify signature for the message.
 **/

function sodium_crypto_sign_verify_detached(
     string $signature
  ,  string $message
  ,  string $public_key
  ) {

  /**
   * Verify signature for the message
   **/
}

/**
 * Sign a message.
 **/

function sodium_crypto_sign( string $message,  string $secret_key) {

  /**
   * Sign a message with a secret key, that can be verified by the
   * corresponding public key. This function attaches the signature
   * to the message. See sodium_crypto_sign_detached for detached
   * signatures.
   **/
}

/**
 * Generate a random sodium_crypto_stream key..
 **/

function sodium_crypto_stream_keygen() {

  /**
   * Generate a key for use with sodium_crypto_stream and
   * sodium_crypto_stream_xor.
   **/
}

/**
 * Returns a secure random key.
 **/

function sodium_crypto_stream_xchacha20_keygen() {

  /**
   * Returns a secure random key for use with
   * sodium_crypto_stream_xchacha20.
   **/
}

/**
 * Encrypts a message using a nonce and a secret key (no.
 * authentication).
 **/

function sodium_crypto_stream_xchacha20_xor_ic(
     string $message
  ,  string $nonce
  ,  int $counter
  ,  string $key
  ) {

  /**
   * The function is similar to sodium_crypto_stream_xchacha20_xor
   * but adds the ability to set the initial value of the block
   * counter to a non-zero value. This permits direct access to any
   * block without having to compute the previous ones.
   *
   * This encryption is unauthenticated, and does not prevent
   * chosen-ciphertext attacks. Make sure to combine the ciphertext
   * with a Message Authentication Code, for example with
   * sodium_crypto_aead_xchacha20poly1305_ietf_encrypt function, or
   * sodium_crypto_auth.
   **/
}

/**
 * Encrypts a message using a nonce and a secret key (no.
 * authentication).
 **/

function sodium_crypto_stream_xchacha20_xor(
     string $message
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Encrypts a message using a nonce and a secret key (no
   * authentication).
   *
   * This encryption is unauthenticated, and does not prevent
   * chosen-ciphertext attacks. Make sure to combine the ciphertext
   * with a Message Authentication Code, for example with
   * sodium_crypto_aead_xchacha20poly1305_ietf_encrypt function, or
   * sodium_crypto_auth.
   **/
}

/**
 * Expands the key and nonce into a keystream of pseudorandom.
 * bytes.
 **/

function sodium_crypto_stream_xchacha20(
     int $length
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Expands the key and nonce into a keystream of pseudorandom
   * bytes.
   **/
}

/**
 * Encrypt a message without authentication.
 **/

function sodium_crypto_stream_xor(
     string $message
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * This function encrypts a message with XSalsa20, but does not
   * provide any ciphertext guarantees about the plaintext.
   **/
}

/**
 * Generate a deterministic sequence of bytes from a seed.
 **/

function sodium_crypto_stream(
     int $length
  ,  string $nonce
  ,  string $key
  ) {

  /**
   * Generate a deterministic sequence of bytes from a seed, using
   * the XSalsa20 stream cipher.
   **/
}

/**
 * Decodes a hexadecimally encoded binary string.
 **/

function sodium_hex2bin( string $string,  string $ignore = "") {

  /**
   * Decodes a hexadecimally encoded binary string.
   *
   * Like sodium_bin2hex, sodium_hex2bin is resistant to
   * side-channel attacks while hex2bin is not.
   **/
}

/**
 * Increment large number.
 **/

function sodium_increment( string &$string) {

  /**
   * Treat the string as a little-endian unsigned integer, then
   * increase it by 1. Constant-time.
   **/
}

/**
 * Test for equality in constant-time.
 **/

function sodium_memcmp( string $string1,  string $string2) {

  /**
   * Compare two strings in constant-time.
   *
   * In practice, you almost always want to use hash_equals
   * instead, since it provides the same logic but returns a bool
   * instead of an int. However, if you're using the return value
   * of a comparison in a calculation that's timing-sensitive, and
   * worried about timing leaks with bool-to-int conversions,
   * sodium_memcmp is an ideal replacement.
   **/
}

/**
 * Overwrite a string with NUL characters.
 **/

function sodium_memzero( string &$string) {

  /**
   * sodium_memzero zeroes out the string that is passed by
   * reference.
   **/
}

/**
 * Add padding data.
 **/

function sodium_pad( string $string,  int $block_size) {

  /**
   * Right-pad a string to a desired length. Timing-safe.
   **/
}

/**
 * Remove padding data.
 **/

function sodium_unpad( string $string,  int $block_size) {

  /**
   * Unpad a padded string. Timing-safe.
   **/
}

/**
 * Returns the current version of the Apache Solr extension.
 **/

function solr_get_version() {

  /**
   * This function returns the current version of the extension as
   * a string.
   **/
}

/**
 * Return the interfaces which are implemented by the given.
 * class or interface.
 **/

function class_implements($object_or_class,  bool $autoload = true) {

  /**
   * This function returns an array with the names of the
   * interfaces that the given object_or_class and its parents
   * implement.
   **/
}

/**
 * Return the parent classes of the given class.
 **/

function class_parents($object_or_class,  bool $autoload = true) {

  /**
   * This function returns an array with the name of the parent
   * classes of the given object_or_class.
   **/
}

/**
 * Return the traits used by the given class.
 **/

function class_uses($object_or_class,  bool $autoload = true) {

  /**
   * This function returns an array with the names of the traits
   * that the given object_or_class uses. This does however not
   * include any traits used by a parent class.
   **/
}

/**
 * Call a function for every element in an iterator.
 **/

function iterator_apply(
     Traversable $iterator
  ,  callable $callback
  , $args = null
  ) {

  /**
   * Calls a function for every element in an iterator.
   **/
}

/**
 * Count the elements in an iterator.
 **/

function iterator_count($iterator) {

  /**
   * Count the elements in an iterator. iterator_count is not
   * guaranteed to retain the current position of the iterator.
   **/
}

/**
 * Copy the iterator into an array.
 **/

function iterator_to_array($iterator,  bool $preserve_keys = true) {

  /**
   * Copy the elements of an iterator into an array.
   **/
}

/**
 * Try all registered __autoload() functions to load the.
 * requested class.
 **/

function spl_autoload_call( string $class) {

  /**
   * This function can be used to manually search for a class or
   * interface using the registered __autoload functions.
   **/
}

/**
 * Register and return default file extensions for spl_autoload.
 **/

function spl_autoload_extensions($file_extensions = null) {

  /**
   * This function can modify and check the file extensions that
   * the built in __autoload fallback function spl_autoload will be
   * using.
   **/
}

/**
 * Return all registered __autoload() functions.
 **/

function spl_autoload_functions() {

  /**
   * Get all registered __autoload() functions.
   **/
}

/**
 * Register given function as __autoload() implementation.
 **/

function spl_autoload_register(
    $callback = null
  ,  bool $throw = true
  ,  bool $prepend = false
  ) {

  /**
   * Register a function with the spl provided __autoload queue.
   * If the queue is not yet activated it will be activated.
   *
   * If your code has an existing __autoload function then this
   * function must be explicitly registered on the __autoload
   * queue. This is because spl_autoload_register will effectively
   * replace the engine cache for the __autoload function by either
   * spl_autoload or spl_autoload_call.
   *
   * If there must be multiple autoload functions,
   * spl_autoload_register allows for this. It effectively creates
   * a queue of autoload functions, and runs through each of them
   * in the order they are defined. By contrast, __autoload may
   * only be defined once.
   **/
}

/**
 * Unregister given function as __autoload() implementation.
 **/

function spl_autoload_unregister( callable $callback) {

  /**
   * Removes a function from the autoload queue. If the queue is
   * activated and empty after removing the given function then it
   * will be deactivated.
   *
   * When this function results in the queue being deactivated,
   * any __autoload function that previously existed will not be
   * reactivated.
   **/
}

/**
 * Default implementation for __autoload().
 **/

function spl_autoload( string $class, $file_extensions = null) {

  /**
   * This function is intended to be used as a default
   * implementation for __autoload. If nothing else is specified
   * and spl_autoload_register is called without any parameters
   * then spl_autoload will be used for any later call to
   * __autoload.
   **/
}

/**
 * Return available SPL classes.
 **/

function spl_classes() {

  /**
   * This function returns an array with the current available SPL
   * classes.
   **/
}

/**
 * Return hash id for given object.
 **/

function spl_object_hash( object $object) {

  /**
   * This function returns a unique identifier for the object.
   * This id can be used as a hash key for storing objects, or for
   * identifying an object, as long as the object is not destroyed.
   * Once the object is destroyed, its hash may be reused for other
   * objects. This behavior is similar to spl_object_id.
   **/
}

/**
 * Return the integer object handle for given object.
 **/

function spl_object_id( object $object) {

  /**
   * This function returns a unique identifier for the object. The
   * object id is unique for the lifetime of the object. Once the
   * object is destroyed, its id may be reused for other objects.
   * This behavior is similar to spl_object_hash.
   **/
}

/**
 * Begins a database transaction.
 **/

function sqlsrv_begin_transaction( resource $conn) {

  /**
   * The transaction begun by sqlsrv_begin_transaction includes
   * all statements that were executed after the call to
   * sqlsrv_begin_transaction and before calls to sqlsrv_rollback
   * or sqlsrv_commit. Explicit transactions should be started and
   * committed or rolled back using these functions instead of
   * executing SQL statements that begin and commit/roll back
   * transactions. For more information, see SQLSRV Transactions.
   **/
}

/**
 * Cancels a statement.
 **/

function sqlsrv_cancel( resource $stmt) {

  /**
   * Cancels a statement. Any results associated with the
   * statement that have not been consumed are deleted. After
   * sqlsrv_cancel has been called, the specified statement can be
   * re-executed if it was created with sqlsrv_prepare. Calling
   * sqlsrv_cancel is not necessary if all the results associated
   * with the statement have been consumed.
   **/
}

/**
 * Returns information about the client and specified connection.
 **/

function sqlsrv_client_info( resource $conn) {

  /**
   * Returns information about the client and specified connection
   **/
}

/**
 * Closes an open connection and releases resourses associated.
 * with the connection.
 **/

function sqlsrv_close( resource $conn) {

  /**
   * Closes an open connection and releases resourses associated
   * with the connection.
   **/
}

/**
 * Commits a transaction that was begun with.
 * sqlsrv_begin_transaction.
 **/

function sqlsrv_commit( resource $conn) {

  /**
   * Commits a transaction that was begun with
   * sqlsrv_begin_transaction. The connection is returned to
   * auto-commit mode after sqlsrv_commit is called. The
   * transaction that is committed includes all statements that
   * were executed after the call to sqlsrv_begin_transaction.
   * Explicit transactions should be started and committed or
   * rolled back using these functions instead of executing SQL
   * statements that begin and commit/roll back transactions. For
   * more information, see SQLSRV Transactions.
   **/
}

/**
 * Changes the driver error handling and logging configurations.
 **/

function sqlsrv_configure( string $setting,  mixed $value) {

  /**
   * Changes the driver error handling and logging configurations.
   **/
}

/**
 * Opens a connection to a Microsoft SQL Server database.
 **/

function sqlsrv_connect( string $serverName,  array $connectionInfo) {

  /**
   * Opens a connection to a Microsoft SQL Server database. By
   * default, the connection is attempted using Windows
   * Authentication. To connect using SQL Server Authentication,
   * include "UID" and "PWD" in the connection options array.
   **/
}

/**
 * Returns error and warning information about the last SQLSRV.
 * operation performed.
 **/

function sqlsrv_errors( int $errorsOrWarnings) {

  /**
   * Returns error and warning information about the last SQLSRV
   * operation performed.
   **/
}

/**
 * Executes a statement prepared with sqlsrv_prepare.
 **/

function sqlsrv_execute( resource $stmt) {

  /**
   * Executes a statement prepared with sqlsrv_prepare. This
   * function is ideal for executing a prepared statement multiple
   * times with different parameter values.
   **/
}

/**
 * Returns a row as an array.
 **/

function sqlsrv_fetch_array(
     resource $stmt
  ,  int $fetchType
  ,  int $row
  ,  int $offset
  ) {

  /**
   * Returns the next available row of data as an associative
   * array, a numeric array, or both (the default).
   **/
}

/**
 * Retrieves the next row of data in a result set as an object.
 **/

function sqlsrv_fetch_object(
     resource $stmt
  ,  string $className
  ,  array $ctorParams
  ,  int $row
  ,  int $offset
  ) {

  /**
   * Retrieves the next row of data in a result set as an instance
   * of the specified class with properties that match the row
   * field names and values that correspond to the row field
   * values.
   **/
}

/**
 * Makes the next row in a result set available for reading.
 **/

function sqlsrv_fetch( resource $stmt,  int $row,  int $offset) {

  /**
   * Makes the next row in a result set available for reading. Use
   * sqlsrv_get_field to read the fields of the row.
   **/
}

/**
 * Retrieves metadata for the fields of a statement prepared by.
 * sqlsrv_prepare or sqlsrv_query.
 **/

function sqlsrv_field_metadata( resource $stmt) {

  /**
   * Retrieves metadata for the fields of a statement prepared by
   * sqlsrv_prepare or sqlsrv_query. sqlsrv_field_metadata can be
   * called on a statement before or after statement execution.
   **/
}

/**
 * Frees all resources for the specified statement.
 **/

function sqlsrv_free_stmt( resource $stmt) {

  /**
   * Frees all resources for the specified statement. The
   * statement cannot be used after sqlsrv_free_stmt has been
   * called on it. If sqlsrv_free_stmt is called on an in-progress
   * statement that alters server state, statement execution is
   * terminated and the statement is rolled back.
   **/
}

/**
 * Returns the value of the specified configuration setting.
 **/

function sqlsrv_get_config( string $setting) {

  /**
   * Returns the value of the specified configuration setting.
   **/
}

/**
 * Gets field data from the currently selected row.
 **/

function sqlsrv_get_field(
     resource $stmt
  ,  int $fieldIndex
  ,  int $getAsType
  ) {

  /**
   * Gets field data from the currently selected row. Fields must
   * be accessed in order. Field indices start at 0.
   **/
}

/**
 * Indicates whether the specified statement has rows.
 **/

function sqlsrv_has_rows( resource $stmt) {

  /**
   * Indicates whether the specified statement has rows.
   **/
}

/**
 * Makes the next result of the specified statement active.
 **/

function sqlsrv_next_result( resource $stmt) {

  /**
   * Makes the next result of the specified statement active.
   * Results include result sets, row counts, and output
   * parameters.
   **/
}

/**
 * Retrieves the number of fields (columns) on a statement.
 **/

function sqlsrv_num_fields( resource $stmt) {

  /**
   * Retrieves the number of fields (columns) on a statement.
   **/
}

/**
 * Retrieves the number of rows in a result set.
 **/

function sqlsrv_num_rows( resource $stmt) {

  /**
   * Retrieves the number of rows in a result set. This function
   * requires that the statement resource be created with a static
   * or keyset cursor. For more information, see sqlsrv_query,
   * sqlsrv_prepare, or Specifying a Cursor Type and Selecting Rows
   * in the Microsoft SQLSRV documentation.
   **/
}

/**
 * Prepares a query for execution.
 **/

function sqlsrv_prepare(
     resource $conn
  ,  string $sql
  ,  array $params
  ,  array $options
  ) {

  /**
   * Prepares a query for execution. This function is ideal for
   * preparing a query that will be executed multiple times with
   * different parameter values.
   **/
}

/**
 * Prepares and executes a query.
 **/

function sqlsrv_query(
     resource $conn
  ,  string $sql
  ,  array $params
  ,  array $options
  ) {

  /**
   * Prepares and executes a query.
   **/
}

/**
 * Rolls back a transaction that was begun with.
 * sqlsrv_begin_transaction.
 **/

function sqlsrv_rollback( resource $conn) {

  /**
   * Rolls back a transaction that was begun with
   * sqlsrv_begin_transaction and returns the connection to
   * auto-commit mode.
   **/
}

/**
 * Returns the number of rows modified by the last INSERT,.
 * UPDATE, or DELETE query executed.
 **/

function sqlsrv_rows_affected( resource $stmt) {

  /**
   * Returns the number of rows modified by the last INSERT,
   * UPDATE, or DELETE query executed. For information about the
   * number of rows returned by a SELECT query, see
   * sqlsrv_num_rows.
   **/
}

/**
 * Sends data from parameter streams to the server.
 **/

function sqlsrv_send_stream_data( resource $stmt) {

  /**
   * Send data from parameter streams to the server. Up to 8 KB of
   * data is sent with each call.
   **/
}

/**
 * Returns information about the server.
 **/

function sqlsrv_server_info( resource $conn) {

  /**
   * Returns information about the server.
   **/
}

/**
 * Calculates the match score between two fuzzy hash signatures.
 **/

function ssdeep_fuzzy_compare(
     string $signature1
  ,  string $signature2
  ) {

  /**
   * Calculates the match score between signature1 and signature2
   * using context-triggered piecewise hashing, and returns the
   * match score.
   **/
}

/**
 * Create a fuzzy hash from a file.
 **/

function ssdeep_fuzzy_hash_filename( string $file_name) {

  /**
   * ssdeep_fuzzy_hash_filename calculates the hash of the file
   * specified by file_name using context-triggered piecewise
   * hashing, and returns that hash.
   **/
}

/**
 * Create a fuzzy hash from a string.
 **/

function ssdeep_fuzzy_hash( string $to_hash) {

  /**
   * ssdeep_fuzzy_hash calculates the hash of to_hash using
   * context-triggered piecewise hashing, and returns that hash.
   **/
}

/**
 * Authenticate over SSH using the ssh agent.
 **/

function ssh2_auth_agent( resource $session,  string $username) {

  /**
   * Authenticate over SSH using the ssh agent
   **/
}

/**
 * Authenticate using a public hostkey.
 **/

function ssh2_auth_hostbased_file(
     resource $session
  ,  string $username
  ,  string $hostname
  ,  string $pubkeyfile
  ,  string $privkeyfile
  ,  string $passphrase
  ,  string $local_username
  ) {

  /**
   * Authenticate using a public hostkey read from a file.
   **/
}

/**
 * Authenticate as "none".
 **/

function ssh2_auth_none( resource $session,  string $username) {

  /**
   * Attempt "none" authentication which usually will (and should)
   * fail. As part of the failure, this function will return an
   * array of accepted authentication methods.
   **/
}

/**
 * Authenticate over SSH using a plain password.
 **/

function ssh2_auth_password(
     resource $session
  ,  string $username
  ,  string $password
  ) {

  /**
   * Authenticate over SSH using a plain password. Since version
   * 0.12 this function also supports keyboard_interactive method.
   **/
}

/**
 * Authenticate using a public key.
 **/

function ssh2_auth_pubkey_file(
     resource $session
  ,  string $username
  ,  string $pubkeyfile
  ,  string $privkeyfile
  ,  string $passphrase
  ) {

  /**
   * Authenticate using a public key read from a file.
   **/
}

/**
 * Connect to an SSH server.
 **/

function ssh2_connect(
     string $host
  ,  int $port = 22
  ,  array $methods
  ,  array $callbacks
  ) {

  /**
   * Establish a connection to a remote SSH server.
   *
   * Once connected, the client should verify the server's hostkey
   * using ssh2_fingerprint, then authenticate using either
   * password or public key.
   **/
}

/**
 * Close a connection to a remote SSH server.
 **/

function ssh2_disconnect() {

  /**
   * Close a connection to a remote SSH server.
   **/
}

/**
 * Execute a command on a remote server.
 **/

function ssh2_exec(
     resource $session
  ,  string $command
  ,  string $pty
  ,  array $env
  ,  int $width = 80
  ,  int $height = 25
  ,  int $width_height_type = SSH2_TERM_UNIT_CHARS
  ) {

  /**
   * Execute a command at the remote end and allocate a channel
   * for it.
   **/
}

/**
 * Fetch an extended data stream.
 **/

function ssh2_fetch_stream( resource $channel,  int $streamid) {

  /**
   * Fetches an alternate substream associated with an SSH2
   * channel stream. The SSH2 protocol currently defines only one
   * substream, STDERR, which has a substream ID of
   * SSH2_STREAM_STDERR (defined as 1).
   **/
}

/**
 * Retrieve fingerprint of remote server.
 **/

function ssh2_fingerprint(
     resource $session
  ,  int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX
  ) {

  /**
   * Returns a server hostkey hash from an active session.
   **/
}

/**
 * Accept a connection created by a listener.
 **/

function ssh2_forward_accept( resource $listener) {

  /**
   * Accepts a connection created by a listener.
   **/
}

/**
 * Bind a port on the remote server and listen for connections.
 **/

function ssh2_forward_listen(
     resource $session
  ,  int $port
  ,  string $host
  ,  int $max_connections = 16
  ) {

  /**
   * Binds a port on the remote server and listen for connections.
   **/
}

/**
 * Return list of negotiated methods.
 **/

function ssh2_methods_negotiated( resource $session) {

  /**
   * Returns list of negotiated methods.
   **/
}

/**
 * Poll the channels/listeners/streams for events.
 **/

function ssh2_poll( array &$desc,  int $timeout = 30) {

  /**
   * Polls the channels/listeners/streams for events, and returns
   * the number of descriptors which returned non-zero revents.
   **/
}

/**
 * Add an authorized publickey.
 **/

function ssh2_publickey_add(
     resource $pkey
  ,  string $algoname
  ,  string $blob
  ,  bool $overwrite = false
  ,  array $attributes
  ) {

  /**
   **/
}

/**
 * Initialize Publickey subsystem.
 **/

function ssh2_publickey_init( resource $session) {

  /**
   * Request the Publickey subsystem from an already connected
   * SSH2 server.
   *
   * The publickey subsystem allows an already connected and
   * authenticated client to manage the list of authorized public
   * keys stored on the target server in an implementation agnostic
   * manner. If the remote server does not support the publickey
   * subsystem, the ssh2_publickey_init function will return
   * &false;.
   **/
}

/**
 * List currently authorized publickeys.
 **/

function ssh2_publickey_list( resource $pkey) {

  /**
   * List currently authorized publickeys.
   **/
}

/**
 * Remove an authorized publickey.
 **/

function ssh2_publickey_remove(
     resource $pkey
  ,  string $algoname
  ,  string $blob
  ) {

  /**
   * Removes an authorized publickey.
   **/
}

/**
 * Request a file via SCP.
 **/

function ssh2_scp_recv(
     resource $session
  ,  string $remote_file
  ,  string $local_file
  ) {

  /**
   * Copy a file from the remote server to the local filesystem
   * using the SCP protocol.
   **/
}

/**
 * Send a file via SCP.
 **/

function ssh2_scp_send(
     resource $session
  ,  string $local_file
  ,  string $remote_file
  ,  int $create_mode = 0644
  ) {

  /**
   * Copy a file from the local filesystem to the remote server
   * using the SCP protocol.
   **/
}

/**
 * Send EOF to stream.
 **/

function ssh2_send_eof() {

  /**
   * Sends an EOF to the stream; this is typically used to close
   * standard input, while keeping output and error alive. For
   * example, one can send a remote process some data over standard
   * input, close it to start processing, and still be able to read
   * out the results without creating additional files.
   **/
}

/**
 * Changes file mode.
 **/

function ssh2_sftp_chmod(
     resource $sftp
  ,  string $filename
  ,  int $mode
  ) {

  /**
   * Attempts to change the mode of the specified file to that
   * given in mode.
   **/
}

/**
 * Stat a symbolic link.
 **/

function ssh2_sftp_lstat( resource $sftp,  string $path) {

  /**
   * Stats a symbolic link on the remote filesystem without
   * following the link.
   *
   * This function is similar to using the lstat function with the
   * ssh2.sftp:// wrapper and returns the same values.
   **/
}

/**
 * Create a directory.
 **/

function ssh2_sftp_mkdir(
     resource $sftp
  ,  string $dirname
  ,  int $mode = 0777
  ,  bool $recursive = false
  ) {

  /**
   * Creates a directory on the remote file server with
   * permissions set to mode.
   *
   * This function is similar to using mkdir with the ssh2.sftp://
   * wrapper.
   **/
}

/**
 * Return the target of a symbolic link.
 **/

function ssh2_sftp_readlink( resource $sftp,  string $link) {

  /**
   * Returns the target of a symbolic link.
   **/
}

/**
 * Resolve the realpath of a provided path string.
 **/

function ssh2_sftp_realpath( resource $sftp,  string $filename) {

  /**
   * Translates filename into the effective real path on the
   * remote filesystem.
   **/
}

/**
 * Rename a remote file.
 **/

function ssh2_sftp_rename(
     resource $sftp
  ,  string $from
  ,  string $to
  ) {

  /**
   * Renames a file on the remote filesystem.
   **/
}

/**
 * Remove a directory.
 **/

function ssh2_sftp_rmdir( resource $sftp,  string $dirname) {

  /**
   * Removes a directory from the remote file server.
   *
   * This function is similar to using rmdir with the ssh2.sftp://
   * wrapper.
   **/
}

/**
 * Stat a file on a remote filesystem.
 **/

function ssh2_sftp_stat( resource $sftp,  string $path) {

  /**
   * Stats a file on the remote filesystem following any symbolic
   * links.
   *
   * This function is similar to using the stat function with the
   * ssh2.sftp:// wrapper and returns the same values.
   **/
}

/**
 * Create a symlink.
 **/

function ssh2_sftp_symlink(
     resource $sftp
  ,  string $target
  ,  string $link
  ) {

  /**
   * Creates a symbolic link named link on the remote filesystem
   * pointing to target.
   **/
}

/**
 * Delete a file.
 **/

function ssh2_sftp_unlink( resource $sftp,  string $filename) {

  /**
   * Deletes a file on the remote filesystem.
   **/
}

/**
 * Initialize SFTP subsystem.
 **/

function ssh2_sftp( resource $session) {

  /**
   * Request the SFTP subsystem from an already connected SSH2
   * server.
   **/
}

/**
 * Request an interactive shell.
 **/

function ssh2_shell(
     resource $session
  ,  string $termtype = "vanilla"
  , $env = null
  ,  int $width = 80
  ,  int $height = 25
  ,  int $width_height_type = SSH2_TERM_UNIT_CHARS
  ) {

  /**
   * Open a shell at the remote end and allocate a stream for it.
   **/
}

/**
 * Open a tunnel through a remote server.
 **/

function ssh2_tunnel( resource $session,  string $host,  int $port) {

  /**
   * Open a socket stream to an arbitrary host/port by way of the
   * currently connected SSH server.
   **/
}

/**
 * Returns the absolute deviation of an array of values.
 **/

function stats_absolute_deviation( array $a) {

  /**
   * Returns the absolute deviation of the values in a.
   **/
}

/**
 * Calculates any one parameter of the beta distribution given.
 * values for the others.
 **/

function stats_cdf_beta(
     float $par1
  ,  float $par2
  ,  float $par3
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the beta distribution. The kind of
   * the return value and parameters (par1, par2, and par3) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, alpha, and beta denotes cumulative distribution
   * function, the value of the random variable, and shape
   * parameters of the beta distribution, respectively. Return
   * value and parameters which Return value par1 par2 par3 1 CDF x
   * alpha beta 2 x CDF alpha beta 3 alpha x CDF beta 4 beta x CDF
   * alpha
   **/
}

/**
 * Calculates any one parameter of the binomial distribution.
 * given values for the others.
 **/

function stats_cdf_binomial(
     float $par1
  ,  float $par2
  ,  float $par3
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the binomial distribution. The kind
   * of the return value and parameters (par1, par2, and par3) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, n, and p denotes cumulative distribution
   * function, the number of successes, the number of trials, and
   * the success rate for each trial, respectively. Return value
   * and parameters which Return value par1 par2 par3 1 CDF x n p 2
   * x CDF n p 3 n x CDF p 4 p x CDF n
   **/
}

/**
 * Calculates any one parameter of the Cauchy distribution given.
 * values for the others.
 **/

function stats_cdf_cauchy(
     float $par1
  ,  float $par2
  ,  float $par3
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the Cauchy distribution. The kind of
   * the return value and parameters (par1, par2, and par3) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, x0, and gamma denotes cumulative distribution
   * function, the value of the random variable, the location and
   * the scale parameter of the Cauchy distribution, respectively.
   * Return value and parameters which Return value par1 par2 par3
   * 1 CDF x x0 gamma 2 x CDF x0 gamma 3 x0 x CDF gamma 4 gamma x
   * CDF x0
   **/
}

/**
 * Calculates any one parameter of the chi-square distribution.
 * given values for the others.
 **/

function stats_cdf_chisquare( float $par1,  float $par2,  int $which) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the chi-square distribution. The
   * kind of the return value and parameters (par1 and par2) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, and k denotes cumulative distribution function,
   * the value of the random variable, and the degree of freedom of
   * the chi-square distribution, respectively. Return value and
   * parameters which Return value par1 par2 1 CDF x k 2 x CDF k 3
   * k x CDF
   **/
}

/**
 * Calculates any one parameter of the exponential distribution.
 * given values for the others.
 **/

function stats_cdf_exponential(
     float $par1
  ,  float $par2
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the exponential distribution. The
   * kind of the return value and parameters (par1 and par2) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, and lambda denotes cumulative distribution
   * function, the value of the random variable, and the rate
   * parameter of the exponential distribution, respectively.
   * Return value and parameters which Return value par1 par2 1 CDF
   * x lambda 2 x CDF lambda 3 lambda x CDF
   **/
}

/**
 * Calculates any one parameter of the F distribution given.
 * values for the others.
 **/

function stats_cdf_f(
     float $par1
  ,  float $par2
  ,  float $par3
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the F distribution. The kind of the
   * return value and parameters (par1, par2, and par3) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, d1, and d2 denotes cumulative distribution
   * function, the value of the random variable, and the degree of
   * freedoms of the F distribution, respectively. Return value and
   * parameters which Return value par1 par2 par3 1 CDF x d1 d2 2 x
   * CDF d1 d2 3 d1 x CDF d2 4 d2 x CDF d1
   **/
}

/**
 * Calculates any one parameter of the gamma distribution given.
 * values for the others.
 **/

function stats_cdf_gamma(
     float $par1
  ,  float $par2
  ,  float $par3
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the gamma distribution. The kind of
   * the return value and parameters (par1, par2, and par3) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, k, and theta denotes cumulative distribution
   * function, the value of the random variable, and the shape and
   * the scale parameter of the gamma distribution, respectively.
   * Return value and parameters which Return value par1 par2 par3
   * 1 CDF x k theta 2 x CDF k theta 3 k x CDF theta 4 theta x CDF
   * k
   **/
}

/**
 * Calculates any one parameter of the Laplace distribution given.
 * values for the others.
 **/

function stats_cdf_laplace(
     float $par1
  ,  float $par2
  ,  float $par3
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the Laplace distribution. The kind
   * of the return value and parameters (par1, par2, and par3) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, mu, and b denotes cumulative distribution
   * function, the value of the random variable, and the location
   * and the scale parameter of the Laplace distribution,
   * respectively. Return value and parameters which Return value
   * par1 par2 par3 1 CDF x mu b 2 x CDF mu b 3 mu x CDF b 4 b x
   * CDF mu
   **/
}

/**
 * Calculates any one parameter of the logistic distribution.
 * given values for the others.
 **/

function stats_cdf_logistic(
     float $par1
  ,  float $par2
  ,  float $par3
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the logistic distribution. The kind
   * of the return value and parameters (par1, par2, and par3) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, mu, and s denotes cumulative distribution
   * function, the value of the random variable, and the location
   * and the scale parameter of the logistic distribution,
   * respectively. Return value and parameters which Return value
   * par1 par2 par3 1 CDF x mu s 2 x CDF mu s 3 mu x CDF s 4 s x
   * CDF mu
   **/
}

/**
 * Calculates any one parameter of the negative binomial.
 * distribution given values for the others.
 **/

function stats_cdf_negative_binomial(
     float $par1
  ,  float $par2
  ,  float $par3
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the negative binomial distribution.
   * The kind of the return value and parameters (par1, par2, and
   * par3) are determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, r, and p denotes cumulative distribution
   * function, the number of failure, the number of success, and
   * the success rate for each trial, respectively. Return value
   * and parameters which Return value par1 par2 par3 1 CDF x r p 2
   * x CDF r p 3 r x CDF p 4 p x CDF r
   **/
}

/**
 * Calculates any one parameter of the non-central chi-square.
 * distribution given values for the others.
 **/

function stats_cdf_noncentral_chisquare(
     float $par1
  ,  float $par2
  ,  float $par3
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the non-central chi-square
   * distribution. The kind of the return value and parameters
   * (par1, par2, and par3) are determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, k, and lambda denotes cumulative distribution
   * function, the value of the random variable, the degree of
   * freedom and the non-centrality parameter of the distribution,
   * respectively. Return value and parameters which Return value
   * par1 par2 par3 1 CDF x k lambda 2 x CDF k lambda 3 k x CDF
   * lambda 4 lambda x CDF k
   **/
}

/**
 * Calculates any one parameter of the non-central F distribution.
 * given values for the others.
 **/

function stats_cdf_noncentral_f(
     float $par1
  ,  float $par2
  ,  float $par3
  ,  float $par4
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the non-central F distribution. The
   * kind of the return value and parameters (par1, par2, par3, and
   * par4) are determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, nu1, nu2, and lambda denotes cumulative
   * distribution function, the value of the random variable, the
   * degree of freedoms and the non-centrality parameter of the
   * distribution, respectively. Return value and parameters which
   * Return value par1 par2 par3 par4 1 CDF x nu1 nu2 lambda 2 x
   * CDF nu1 nu2 lambda 3 nu1 x CDF nu2 lambda 4 nu2 x CDF nu1
   * lambda 5 lambda x CDF nu1 nu2
   **/
}

/**
 * Calculates any one parameter of the non-central t-distribution.
 * give values for the others.
 **/

function stats_cdf_noncentral_t() {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the non-central t-distribution. The
   * kind of the return value and parameters (par1, par2, and par3)
   * are determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, nu, and mu denotes cumulative distribution
   * function, the value of the random variable, the degrees of
   * freedom and the non-centrality parameter of the distribution,
   * respectively. Return value and parameters which Return value
   * par1 par2 par3 1 CDF x nu mu 2 x CDF nu mu 3 nu x CDF mu 4 mu
   * x CDF nu
   **/
}

/**
 * Calculates any one parameter of the normal distribution given.
 * values for the others.
 **/

function stats_cdf_normal() {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the normal distribution. The kind of
   * the return value and parameters (par1, par2, and par3) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, mu, and sigma denotes cumulative distribution
   * function, the value of the random variable, the mean and the
   * standard deviation of the normal distribution, respectively.
   * Return value and parameters which Return value par1 par2 par3
   * 1 CDF x mu sigma 2 x CDF mu sigma 3 mu x CDF sigma 4 sigma x
   * CDF mu
   **/
}

/**
 * Calculates any one parameter of the Poisson distribution given.
 * values for the others.
 **/

function stats_cdf_poisson( float $par1,  float $par2,  int $which) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the Poisson distribution. The kind
   * of the return value and parameters (par1 and par2) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, and lambda denotes cumulative distribution
   * function, the value of the random variable, and the parameter
   * of the Poisson distribution, respectively. Return value and
   * parameters which Return value par1 par2 1 CDF x lambda 2 x CDF
   * lambda 3 lambda x CDF
   **/
}

/**
 * Calculates any one parameter of the t-distribution given.
 * values for the others.
 **/

function stats_cdf_t( float $par1,  float $par2,  int $which) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the t-distribution. The kind of the
   * return value and parameters (par1 and par2) are determined by
   * which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, and nu denotes cumulative distribution
   * function, the value of the random variable, and the degrees of
   * freedom of the t-distribution, respectively. Return value and
   * parameters which Return value par1 par2 1 CDF x nu 2 x CDF nu
   * 3 nu x CDF
   **/
}

/**
 * Calculates any one parameter of the uniform distribution given.
 * values for the others.
 **/

function stats_cdf_uniform(
     float $par1
  ,  float $par2
  ,  float $par3
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the uniform distribution. The kind
   * of the return value and parameters (par1, par2, and par3) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, a, and b denotes cumulative distribution
   * function, the value of the random variable, the lower bound
   * and the higher bound of the uniform distribution,
   * respectively. Return value and parameters which Return value
   * par1 par2 par3 1 CDF x a b 2 x CDF a b 3 a x CDF b 4 b x CDF a
   **/
}

/**
 * Calculates any one parameter of the Weibull distribution given.
 * values for the others.
 **/

function stats_cdf_weibull(
     float $par1
  ,  float $par2
  ,  float $par3
  ,  int $which
  ) {

  /**
   * Returns the cumulative distribution function, its inverse, or
   * one of its parameters, of the Weibull distribution. The kind
   * of the return value and parameters (par1, par2, and par3) are
   * determined by which.
   *
   * The following table lists the return value and parameters by
   * which. CDF, x, k, and lambda denotes cumulative distribution
   * function, the value of the random variable, the shape and the
   * scale parameter of the Weibull distribution, respectively.
   * Return value and parameters which Return value par1 par2 par3
   * 1 CDF x k lambda 2 x CDF k lambda 3 k x CDF lambda 4 lambda x
   * CDF k
   **/
}

/**
 * Computes the covariance of two data sets.
 **/

function stats_covariance( array $a,  array $b) {

  /**
   * Returns the covariance of a and b.
   **/
}

/**
 * Probability density function of the beta distribution.
 **/

function stats_dens_beta( float $x,  float $a,  float $b) {

  /**
   * Returns the probability density at x, where the random
   * variable follows the beta distribution of which the shape
   * parameters are a and b.
   **/
}

/**
 * Probability density function of the Cauchy distribution.
 **/

function stats_dens_cauchy( float $x,  float $ave,  float $stdev) {

  /**
   * Returns the probability density at x, where the random
   * variable follows the Cauchy distribution whose location and
   * scale are ave and stdev, respectively.
   **/
}

/**
 * Probability density function of the chi-square distribution.
 **/

function stats_dens_chisquare( float $x,  float $dfr) {

  /**
   * Returns the probability density at x, where the random
   * variable follows the chi-square distribution of which the
   * degree of freedom is dfr.
   **/
}

/**
 * Probability density function of the exponential distribution.
 **/

function stats_dens_exponential( float $x,  float $scale) {

  /**
   * Returns the probability density at x, where the random
   * variable follows the exponential distribution of which the
   * scale is scale.
   **/
}

/**
 * Probability density function of the F distribution.
 **/

function stats_dens_f( float $x,  float $dfr1,  float $dfr2) {

  /**
   * Returns the probability density at x, where the random
   * variable follows the F distribution of which the degree of
   * freedoms are dfr1 and dfr2.
   **/
}

/**
 * Probability density function of the gamma distribution.
 **/

function stats_dens_gamma( float $x,  float $shape,  float $scale) {

  /**
   * Returns the probability density at x, where the random
   * variable follows the gamma distribution of which the shape
   * parameter is shape and the scale parameter is scale.
   **/
}

/**
 * Probability density function of the Laplace distribution.
 **/

function stats_dens_laplace( float $x,  float $ave,  float $stdev) {

  /**
   * Returns the probability density at x, where the random
   * variable follows the Laplace distribution of which the
   * location parameter is ave and the scale parameter is stdev.
   **/
}

/**
 * Probability density function of the logistic distribution.
 **/

function stats_dens_logistic( float $x,  float $ave,  float $stdev) {

  /**
   * Returns the probability density at x, where the random
   * variable follows the logistic distribution of which the
   * location parameter is ave and the scale parameter is stdev.
   **/
}

/**
 * Probability density function of the normal distribution.
 **/

function stats_dens_normal( float $x,  float $ave,  float $stdev) {

  /**
   * Returns the probability density at x, where the random
   * variable follows the normal distribution of which the mean is
   * ave and the standard deviation is stdev.
   **/
}

/**
 * Probability mass function of the binomial distribution.
 **/

function stats_dens_pmf_binomial( float $x,  float $n,  float $pi) {

  /**
   * Returns the probability mass at x, where the random variable
   * follows the binomial distribution of which the number of
   * trials is n and the success rate is pi.
   **/
}

/**
 * Probability mass function of the hypergeometric distribution.
 **/

function stats_dens_pmf_hypergeometric(
     float $n1
  ,  float $n2
  ,  float $N1
  ,  float $N2
  ) {

  /**
   * Returns the probability mass at n1, where the random variable
   * follows the hypergeometric distribution of which the number of
   * failure is n2, the number of success samples is N1, and the
   * number of failure samples is N2.
   **/
}

/**
 * Probability mass function of the negative binomial.
 * distribution.
 **/

function stats_dens_pmf_negative_binomial(
     float $x
  ,  float $n
  ,  float $pi
  ) {

  /**
   * Returns the probability mass at x, where the random variable
   * follows the negative binomial distribution of which the number
   * of the success is n and the success rate is pi.
   **/
}

/**
 * Probability mass function of the Poisson distribution.
 **/

function stats_dens_pmf_poisson( float $x,  float $lb) {

  /**
   * Returns the probability mass at x, where the random variable
   * follows the Poisson distribution whose parameter is lb.
   **/
}

/**
 * Probability density function of the t-distribution.
 **/

function stats_dens_t( float $x,  float $dfr) {

  /**
   * Returns the probability density at x, where the random
   * variable follows the t-distribution of which the degree of
   * freedom is dfr.
   **/
}

/**
 * Probability density function of the uniform distribution.
 **/

function stats_dens_uniform( float $x,  float $a,  float $b) {

  /**
   * Returns the probability density at x, where the random
   * variable follows the uniform distribution of which the lower
   * bound is a and the upper bound is b.
   **/
}

/**
 * Probability density function of the Weibull distribution.
 **/

function stats_dens_weibull( float $x,  float $a,  float $b) {

  /**
   * Returns the probability density at x, where the random
   * variable follows the Weibull distribution of which the shape
   * parameter is a and the scale parameter is b.
   **/
}

/**
 * Returns the harmonic mean of an array of values.
 **/

function stats_harmonic_mean( array $a) {

  /**
   * Returns the harmonic mean of the values in a.
   **/
}

/**
 * Computes the kurtosis of the data in the array.
 **/

function stats_kurtosis( array $a) {

  /**
   * Returns the kurtosis of the values in a.
   **/
}

/**
 * Generates a random deviate from the beta distribution.
 **/

function stats_rand_gen_beta( float $a,  float $b) {

  /**
   * Returns a random deviate from the beta distribution with
   * parameters A and B. The density of the beta is x^(a-1) *
   * (1-x)^(b-1) / B(a,b) for 0 < x <. Method R. C. H. Cheng.
   **/
}

/**
 * Generates a random deviate from the chi-square distribution.
 **/

function stats_rand_gen_chisquare( float $df) {

  /**
   * Returns a random deviate from the chi-square distribution
   * where the degrees of freedom is df.
   **/
}

/**
 * Generates a random deviate from the exponential distribution.
 **/

function stats_rand_gen_exponential( float $av) {

  /**
   * Returns a random deviate from the exponential distribution of
   * which the scale is av.
   **/
}

/**
 * Generates a random deviate from the F distribution.
 **/

function stats_rand_gen_f( float $dfn,  float $dfd) {

  /**
   * Generates a random deviate from the F (variance ratio)
   * distribution with "dfn" degrees of freedom in the numerator
   * and "dfd" degrees of freedom in the denominator. Method :
   * directly generates ratio of chisquare variates.
   **/
}

/**
 * Generates uniform float between low (exclusive) and high.
 * (exclusive).
 **/

function stats_rand_gen_funiform( float $low,  float $high) {

  /**
   * Returns a random deviate from the uniform distribution from
   * low to high.
   **/
}

/**
 * Generates a random deviate from the gamma distribution.
 **/

function stats_rand_gen_gamma( float $a,  float $r) {

  /**
   * Generates a random deviate from the gamma distribution whose
   * density is (A**R)/Gamma(R) * X**(R-1) * Exp(-A*X).
   **/
}

/**
 * Generates a random deviate from the negative binomial.
 * distribution.
 **/

function stats_rand_gen_ibinomial_negative( int $n,  float $p) {

  /**
   * Returns a random deviate from a negative binomial
   * distribution where the number of success is n and the success
   * rate is p.
   **/
}

/**
 * Generates a random deviate from the binomial distribution.
 **/

function stats_rand_gen_ibinomial( int $n,  float $pp) {

  /**
   * Returns a random deviate from the binomial distribution whose
   * number of trials is n and whose probability of an event in
   * each trial is pp.
   **/
}

/**
 * Generates random integer between 1 and 2147483562.
 **/

function stats_rand_gen_int() {

  /**
   * Returns a random integer between 1 and 2147483562
   **/
}

/**
 * Generates a single random deviate from a Poisson distribution.
 **/

function stats_rand_gen_ipoisson( float $mu) {

  /**
   * Returns a random deviate from the Poisson distribution with
   * parameter mu.
   **/
}

/**
 * Generates integer uniformly distributed between LOW.
 * (inclusive) and HIGH (inclusive).
 **/

function stats_rand_gen_iuniform( int $low,  int $high) {

  /**
   * Returns a random integer from the discrete uniform
   * distribution between low (inclusive) and high (inclusive).
   **/
}

/**
 * Generates a random deviate from the non-central chi-square.
 * distribution.
 **/

function stats_rand_gen_noncentral_chisquare(
     float $df
  ,  float $xnonc
  ) {

  /**
   * Returns a random deviate from the non-central chi-square
   * distribution with degrees of freedom, df, and non-centrality
   * parameter, xnonc.
   **/
}

/**
 * Generates a random deviate from the noncentral F distribution.
 **/

function stats_rand_gen_noncentral_f(
     float $dfn
  ,  float $dfd
  ,  float $xnonc
  ) {

  /**
   * Returns a random deviate from the non-central F distribution
   * where the degrees of freedoms are dfn (numerator) and dfd
   * (denominator), and the non-centrality parameter is xnonc.
   **/
}

/**
 * Generates a single random deviate from a non-central.
 * t-distribution.
 **/

function stats_rand_gen_noncentral_t( float $df,  float $xnonc) {

  /**
   * Returns a random deviate from the non-central t-distribution
   * with the degrees of freedom, df, and the non-centrality
   * parameter, xnonc.
   **/
}

/**
 * Generates a single random deviate from a normal distribution.
 **/

function stats_rand_gen_normal( float $av,  float $sd) {

  /**
   * Returns a random deviate from the normal distribution with
   * mean, av, and standard deviation, sd.
   **/
}

/**
 * Generates a single random deviate from a t-distribution.
 **/

function stats_rand_gen_t( float $df) {

  /**
   * Returns a random deviate from the t-distribution with the
   * degrees of freedom, df.
   **/
}

/**
 * Get the seed values of the random number generator.
 **/

function stats_rand_get_seeds() {

  /**
   * Returns the current seed values of the random number
   * generator
   **/
}

/**
 * Generate two seeds for the RGN random number generator.
 **/

function stats_rand_phrase_to_seeds( string $phrase) {

  /**
   * Generate two seeds for the random number generator from a
   * phrase.
   **/
}

/**
 * Generates a random floating point number between 0 and 1.
 **/

function stats_rand_ranf() {

  /**
   * Returns a random floating point number from a uniform
   * distribution between 0 (exclusive) and 1 (exclusive).
   **/
}

/**
 * Set seed values to the random generator.
 **/

function stats_rand_setall( int $iseed1,  int $iseed2) {

  /**
   * Set iseed1 and iseed2 as seed values to the random generator
   * used in statistic functions.
   **/
}

/**
 * Computes the skewness of the data in the array.
 **/

function stats_skew( array $a) {

  /**
   * Returns the skewness of the values in a.
   **/
}

/**
 * Returns the standard deviation.
 **/

function stats_standard_deviation( array $a,  bool $sample = false) {

  /**
   * Returns the standard deviation of the values in a.
   **/
}

/**
 * Returns a binomial coefficient.
 **/

function stats_stat_binomial_coef( int $x,  int $n) {

  /**
   * Returns the binomial coefficient of n choose x.
   **/
}

/**
 * Returns the Pearson correlation coefficient of two data sets.
 **/

function stats_stat_correlation( array $arr1,  array $arr2) {

  /**
   * Returns the Pearson correlation coefficient between arr1 and
   * arr2.
   **/
}

/**
 * Returns the factorial of an integer.
 **/

function stats_stat_factorial( int $n) {

  /**
   * Returns the factorial of an integer, n.
   **/
}

/**
 * Returns the t-value from the independent two-sample t-test.
 **/

function stats_stat_independent_t( array $arr1,  array $arr2) {

  /**
   * Returns the t-value of the independent two-sample t-test
   * between arr1 and arr2.
   **/
}

/**
 * Returns the inner product of two vectors.
 **/

function stats_stat_innerproduct( array $arr1,  array $arr2) {

  /**
   * Returns the inner product of arr1 and arr2.
   **/
}

/**
 * Returns the t-value of the dependent t-test for paired samples.
 **/

function stats_stat_paired_t( array $arr1,  array $arr2) {

  /**
   * Returns the t-value of the dependent t-test for paired
   * samples arr1 and arr2.
   **/
}

/**
 * Returns the percentile value.
 **/

function stats_stat_percentile( array $arr,  float $perc) {

  /**
   * Returns the perc-th percentile value of the array arr.
   **/
}

/**
 * Returns the power sum of a vector.
 **/

function stats_stat_powersum( array $arr,  float $power) {

  /**
   * Returns the sum of the power-th power of a vector represented
   * as an array arr.
   **/
}

/**
 * Returns the variance.
 **/

function stats_variance( array $a,  bool $sample = false) {

  /**
   * Returns the variance of the values in a.
   **/
}

/**
 * Returns a string description of the last connect error.
 **/

function stomp_connect_error() {

  /**
   * Returns a string description of the last connect error.
   **/
}

/**
 * Gets the current stomp extension version.
 **/

function stomp_version() {

  /**
   * Returns a string containing the version of the current stomp
   * extension.
   **/
}

/**
 * Append bucket to brigade.
 **/

function stream_bucket_append( resource $brigade,  object $bucket) {

  /**
   **/
}

/**
 * Returns a bucket object from the brigade to operate on.
 **/

function stream_bucket_make_writeable( resource $brigade) {

  /**
   * This function is called whenever there is the need to access
   * and operate on the content contains in a brigade. It is
   * typically called from php_user_filter::filter.
   **/
}

/**
 * Create a new bucket for use on the current stream.
 **/

function stream_bucket_new( resource $stream,  string $buffer) {

  /**
   **/
}

/**
 * Prepend bucket to brigade.
 **/

function stream_bucket_prepend( resource $brigade,  object $bucket) {

  /**
   * This function can be called to prepend a bucket to a bucket
   * brigade. It is typically called from php_user_filter::filter.
   **/
}

/**
 * Creates a stream context.
 **/

function stream_context_create($options = null, $params = null) {

  /**
   * Creates and returns a stream context with any options
   * supplied in options preset.
   **/
}

/**
 * Retrieve the default stream context.
 **/

function stream_context_get_default($options = null) {

  /**
   **/
}

/**
 * Retrieve options for a stream/wrapper/context.
 **/

function stream_context_get_options( resource $stream_or_context) {

  /**
   **/
}

/**
 * Retrieves parameters from a context.
 **/

function stream_context_get_params( resource $context) {

  /**
   * Retrieves parameter and options information from the stream
   * or context.
   **/
}

/**
 * Set the default stream context.
 **/

function stream_context_set_default( array $options) {

  /**
   **/
}

/**
 * Sets an option for a stream/wrapper/context.
 **/

function stream_context_set_option(
     resource $stream_or_context
  ,  string $wrapper
  ,  string $option
  ,  mixed $value
  ) {

  /**
   **/
}

/**
 * Sets options on the specified context.
 **/

function stream_context_set_options(
     resource $context
  ,  array $options
  ) {

  /**
   * Sets options on the specified context.
   **/
}

/**
 * Set parameters for a stream/wrapper/context.
 **/

function stream_context_set_params(
     resource $context
  ,  array $params
  ) {

  /**
   * Sets parameters on the specified context.
   **/
}

/**
 * Copies data from one stream to another.
 **/

function stream_copy_to_stream(
     resource $from
  ,  resource $to
  , $length = null
  ,  int $offset = 0
  ) {

  /**
   * Makes a copy of up to length bytes of data from the current
   * position (or from the offset position, if specified) in from
   * to to. If length is &null;, all remaining content in from will
   * be copied.
   **/
}

/**
 * Attach a filter to a stream.
 **/

function stream_filter_append(
     resource $stream
  ,  string $filtername
  ,  int $read_write
  ,  mixed $params
  ) {

  /**
   * Adds filtername to the list of filters attached to stream.
   **/
}

/**
 * Attach a filter to a stream.
 **/

function stream_filter_prepend(
     resource $stream
  ,  string $filtername
  ,  int $read_write
  ,  mixed $params
  ) {

  /**
   * Adds filtername to the list of filters attached to stream.
   **/
}

/**
 * Register a user defined stream filter.
 **/

function stream_filter_register( string $filter_name,  string $class) {

  /**
   * stream_filter_register allows you to implement your own
   * filter on any registered stream used with all the other
   * filesystem functions (such as fopen, fread etc.).
   **/
}

/**
 * Remove a filter from a stream.
 **/

function stream_filter_remove( resource $stream_filter) {

  /**
   * Removes a stream filter previously added to a stream with
   * stream_filter_prepend or stream_filter_append. Any data
   * remaining in the filter's internal buffer will be flushed
   * through to the next filter before removing it.
   **/
}

/**
 * Reads remainder of a stream into a string.
 **/

function stream_get_contents(
     resource $stream
  , $length = null
  ,  int $offset = -1
  ) {

  /**
   * Identical to file_get_contents, except that
   * stream_get_contents operates on an already open stream
   * resource and returns the remaining contents in a string, up to
   * length bytes and starting at the specified offset.
   **/
}

/**
 * Retrieve list of registered filters.
 **/

function stream_get_filters() {

  /**
   **/
}

/**
 * Gets line from stream resource up to a given delimiter.
 **/

function stream_get_line(
     resource $stream
  ,  int $length
  ,  string $ending = ""
  ) {

  /**
   * Gets a line from the given handle.
   *
   * Reading ends when length bytes have been read, when the
   * non-empty string specified by ending is found (which is not
   * included in the return value), or on EOF (whichever comes
   * first).
   *
   * This function is nearly identical to fgets except in that it
   * allows end of line delimiters other than the standard \n, \r,
   * and \r\n, and does not return the delimiter itself.
   **/
}

/**
 * Retrieves header/meta data from streams/file pointers.
 **/

function stream_get_meta_data( resource $stream) {

  /**
   * Returns information about an existing stream.
   **/
}

/**
 * Retrieve list of registered socket transports.
 **/

function stream_get_transports() {

  /**
   **/
}

/**
 * Retrieve list of registered streams.
 **/

function stream_get_wrappers() {

  /**
   * Retrieve list of registered streams available on the running
   * system.
   **/
}

/**
 * Checks if a stream is a local stream.
 **/

function stream_is_local($stream) {

  /**
   * Checks if a stream, or a URL, is a local one or not.
   **/
}

/**
 * Check if a stream is a TTY.
 **/

function stream_isatty( resource $stream) {

  /**
   * Determines if stream stream refers to a valid terminal type
   * device. This is a more portable version of posix_isatty, since
   * it works on Windows systems too.
   **/
}

/**
 * A callback function for the notification context parameter.
 **/

function stream_notification_callback() {

  /**
   * A callable function, used by the notification context
   * parameter, called during an event.
   *
   * This is not a real function, only a prototype of how the
   * function should be.
   **/
}

/**
 * &Alias; stream_wrapper_register.
 **/

function () {

  /**
   * &info.function.alias; stream_wrapper_register.
   **/
}

/**
 * Resolve filename against the include path.
 **/

function stream_resolve_include_path( string $filename) {

  /**
   * Resolve filename against the include path according to the
   * same rules as fopen/include.
   **/
}

/**
 * Runs the equivalent of the select() system call on the given.
 * arrays of streams with a timeout specified by seconds and.
 * microseconds.
 **/

function stream_select(
    &$read
  , &$write
  , &$except
  , $seconds
  , $microseconds = null
  ) {

  /**
   * The stream_select function accepts arrays of streams and
   * waits for them to change status. Its operation is equivalent
   * to that of the socket_select function except in that it acts
   * on streams.
   **/
}

/**
 * Set blocking/non-blocking mode on a stream.
 **/

function stream_set_blocking( resource $stream,  bool $enable) {

  /**
   * Sets blocking or non-blocking mode on a stream.
   *
   * This function works for any stream that supports non-blocking
   * mode (currently, regular files and socket streams).
   **/
}

/**
 * Set the stream chunk size.
 **/

function stream_set_chunk_size( resource $stream,  int $size) {

  /**
   * Set the stream chunk size.
   **/
}

/**
 * Set read file buffering on the given stream.
 **/

function stream_set_read_buffer( resource $stream,  int $size) {

  /**
   * Sets the read buffer. It's the equivalent of
   * stream_set_write_buffer, but for read operations.
   **/
}

/**
 * Set timeout period on a stream.
 **/

function stream_set_timeout(
     resource $stream
  ,  int $seconds
  ,  int $microseconds = 0
  ) {

  /**
   * Sets the timeout value on stream, expressed in the sum of
   * seconds and microseconds.
   *
   * When the stream times out, the 'timed_out' key of the array
   * returned by stream_get_meta_data is set to &true;, although no
   * error/warning is generated.
   **/
}

/**
 * Sets write file buffering on the given stream.
 **/

function stream_set_write_buffer( resource $stream,  int $size) {

  /**
   * Sets the buffering for write operations on the given stream
   * to size bytes.
   **/
}

/**
 * Accept a connection on a socket created by.
 * stream_socket_server.
 **/

function stream_socket_accept(
     resource $socket
  , $timeout = null
  ,  string &$peer_name = null
  ) {

  /**
   * Accept a connection on a socket previously created by
   * stream_socket_server.
   **/
}

/**
 * Open Internet or Unix domain socket connection.
 **/

function stream_socket_client(
     string $address
  ,  int &$error_code = null
  ,  string &$error_message = null
  , $timeout = null
  ,  int $flags = STREAM_CLIENT_CONNECT
  , $context = null
  ) {

  /**
   * Initiates a stream or datagram connection to the destination
   * specified by address. The type of socket created is determined
   * by the transport specified using standard URL formatting:
   * transport://target. For Internet Domain sockets (AF_INET) such
   * as TCP and UDP, the target portion of the address parameter
   * should consist of a hostname or IP address followed by a colon
   * and a port number. For Unix domain sockets, the target portion
   * should point to the socket file on the filesystem.
   *
   * The stream will by default be opened in blocking mode. You
   * can switch it to non-blocking mode by using
   * stream_set_blocking.
   **/
}

/**
 * Turns encryption on/off on an already connected socket.
 **/

function stream_socket_enable_crypto(
     resource $stream
  ,  bool $enable
  , $crypto_method = null
  , $session_stream = null
  ) {

  /**
   **/
}

/**
 * Retrieve the name of the local or remote sockets.
 **/

function stream_socket_get_name( resource $socket,  bool $remote) {

  /**
   * Returns the local or remote name of a given socket
   * connection.
   **/
}

/**
 * Creates a pair of connected, indistinguishable socket streams.
 **/

function stream_socket_pair( int $domain,  int $type,  int $protocol) {

  /**
   * stream_socket_pair creates a pair of connected,
   * indistinguishable socket streams. This function is commonly
   * used in IPC (Inter-Process Communication).
   **/
}

/**
 * Receives data from a socket, connected or not.
 **/

function stream_socket_recvfrom(
     resource $socket
  ,  int $length
  ,  int $flags = 0
  , &$address = null
  ) {

  /**
   * stream_socket_recvfrom accepts data from a remote socket up
   * to length bytes.
   **/
}

/**
 * Sends a message to a socket, whether it is connected or not.
 **/

function stream_socket_sendto(
     resource $socket
  ,  string $data
  ,  int $flags = 0
  ,  string $address = ""
  ) {

  /**
   * Sends the specified data through the socket.
   **/
}

/**
 * Create an Internet or Unix domain server socket.
 **/

function stream_socket_server(
     string $address
  ,  int &$error_code = null
  ,  string &$error_message = null
  ,  int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN
  , $context = null
  ) {

  /**
   * Creates a stream or datagram socket on the specified address.
   *
   * This function only creates a socket, to begin accepting
   * connections use stream_socket_accept.
   **/
}

/**
 * Shutdown a full-duplex connection.
 **/

function stream_socket_shutdown( resource $stream,  int $mode) {

  /**
   * Shutdowns (partially or not) a full-duplex connection.
   *
   * The associated buffer, or buffers, may or may not be emptied.
   **/
}

/**
 * Tells whether the stream supports locking.
 **/

function stream_supports_lock( resource $stream) {

  /**
   * Tells whether the stream supports locking through flock.
   **/
}

/**
 * Register a URL wrapper implemented as a PHP class.
 **/

function stream_wrapper_register() {

  /**
   * Allows you to implement your own protocol handlers and
   * streams for use with all the other filesystem functions (such
   * as fopen, fread etc.).
   **/
}

/**
 * Restores a previously unregistered built-in wrapper.
 **/

function stream_wrapper_restore( string $protocol) {

  /**
   * Restores a built-in wrapper previously unregistered with
   * stream_wrapper_unregister.
   **/
}

/**
 * Unregister a URL wrapper.
 **/

function stream_wrapper_unregister( string $protocol) {

  /**
   * Allows you to disable an already defined stream wrapper. Once
   * the wrapper has been disabled you may override it with a
   * user-defined wrapper using stream_wrapper_register or reenable
   * it later on with stream_wrapper_restore.
   **/
}

/**
 * Quote string with slashes in a C style.
 **/

function addcslashes( string $string,  string $characters) {

  /**
   * Returns a string with backslashes before characters that are
   * listed in characters parameter.
   **/
}

/**
 * Quote string with slashes.
 **/

function addslashes( string $string) {

  /**
   * Returns a string with backslashes added before characters
   * that need to be escaped. These characters are: single quote
   * (') double quote (") backslash (\) NUL (the NUL byte)
   *
   * A use case of addslashes is escaping the aforementioned
   * characters in a string that is to be evaluated by PHP: ]]>
   *
   * The addslashes is sometimes incorrectly used to try to
   * prevent SQL Injection. Instead, database-specific escaping
   * functions and/or prepared statements should be used.
   **/
}

/**
 * Convert binary data into hexadecimal representation.
 **/

function bin2hex( string $string) {

  /**
   * Returns an ASCII string containing the hexadecimal
   * representation of string. The conversion is done byte-wise
   * with the high-nibble first.
   **/
}

/**
 * &Alias; rtrim.
 **/

function () {

  /**
   **/
}

/**
 * Generate a single-byte string from a number.
 **/

function chr( int $codepoint) {

  /**
   * Returns a one-character string containing the character
   * specified by interpreting codepoint as an unsigned integer.
   *
   * This can be used to create a one-character string in a
   * single-byte encoding such as ASCII, ISO-8859, or Windows 1252,
   * by passing the position of a desired character in the
   * encoding's mapping table. However, note that this function is
   * not aware of any string encoding, and in particular cannot be
   * passed a Unicode code point value to generate a string in a
   * multibyte encoding like UTF-8 or UTF-16.
   *
   * This function complements ord.
   **/
}

/**
 * Split a string into smaller chunks.
 **/

function chunk_split(
     string $string
  ,  int $length = 76
  ,  string $separator = "\r\n"
  ) {

  /**
   * Can be used to split a string into smaller chunks which is
   * useful for e.g. converting base64_encode output to match RFC
   * 2045 semantics. It inserts separator every length characters.
   **/
}

/**
 * Convert from one Cyrillic character set to another.
 **/

function convert_cyr_string( string $str,  string $from,  string $to) {

  /**
   * Converts from one Cyrillic character set to another.
   **/
}

/**
 * Decode a uuencoded string.
 **/

function convert_uudecode( string $string) {

  /**
   * convert_uudecode decodes a uuencoded string.
   **/
}

/**
 * Uuencode a string.
 **/

function convert_uuencode( string $string) {

  /**
   * convert_uuencode encodes a string using the uuencode
   * algorithm.
   *
   * Uuencode translates all strings (including binary data) into
   * printable characters, making them safe for network
   * transmissions. Uuencoded data is about 35% larger than the
   * original.
   **/
}

/**
 * Return information about characters used in a string.
 **/

function count_chars( string $string,  int $mode = 0) {

  /**
   * Counts the number of occurrences of every byte-value (0..255)
   * in string and returns it in various ways.
   **/
}

/**
 * Calculates the crc32 polynomial of a string.
 **/

function crc32( string $string) {

  /**
   * Generates the cyclic redundancy checksum polynomial of 32-bit
   * lengths of the string. This is usually used to validate the
   * integrity of data being transmitted.
   **/
}

/**
 * One-way string hashing.
 **/

function crypt( string $string,  string $salt) {

  /**
   * crypt will return a hashed string using the standard Unix
   * DES-based algorithm or alternative algorithms. password_verify
   * is compatible with crypt. Therefore, password hashes created
   * by crypt can be used with password_verify.
   *
   * Prior to PHP 8.0.0, the salt parameter was optional. However,
   * crypt creates a weak hash without the salt, and raises an
   * E_NOTICE error without it. Make sure to specify a strong
   * enough salt for better security.
   *
   * password_hash uses a strong hash, generates a strong salt,
   * and applies proper rounds automatically. password_hash is a
   * simple crypt wrapper and compatible with existing password
   * hashes. Use of password_hash is encouraged.
   *
   * The hash type is triggered by the salt argument. If no salt
   * is provided, PHP will auto-generate either a standard two
   * character (DES) salt, or a twelve character (MD5), depending
   * on the availability of MD5 crypt(). PHP sets a constant named
   * CRYPT_SALT_LENGTH which indicates the longest valid salt
   * allowed by the available hashes.
   *
   * The standard DES-based crypt returns the salt as the first
   * two characters of the output. It also only uses the first
   * eight characters of string, so longer strings that start with
   * the same eight characters will generate the same result (when
   * the same salt is used).
   **/
}

/**
 * Output one or more strings.
 **/

function echo( string $expressions) {

  /**
   * echo is not a function but a language construct. Its
   * arguments are a list of expressions following the echo
   * keyword, separated by commas, and not delimited by
   * parentheses. Unlike some other language constructs, echo does
   * not have any return value, so it cannot be used in the context
   * of an expression.
   *
   * echo also has a shortcut syntax, where you can immediately
   * follow the opening tag with an equals sign. This syntax is
   * available even with the short_open_tag configuration setting
   * disabled. foo. ]]>
   *
   * The major differences to print are that echo accepts multiple
   * arguments and doesn't have a return value.
   **/
}

/**
 * Split a string by a string.
 **/

function explode(
     string $separator
  ,  string $string
  ,  int $limit = PHP_INT_MAX
  ) {

  /**
   * Returns an array of strings, each of which is a substring of
   * string formed by splitting it on boundaries formed by the
   * string separator.
   **/
}

/**
 * Write a formatted string to a stream.
 **/

function fprintf( resource $stream,  string $format,  mixed $values) {

  /**
   * Write a string produced according to format to the stream
   * resource specified by stream.
   **/
}

/**
 * Returns the translation table used by htmlspecialchars and.
 * htmlentities.
 **/

function get_html_translation_table(
     int $table = HTML_SPECIALCHARS
  ,  int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401
  ,  string $encoding = "UTF-8"
  ) {

  /**
   * get_html_translation_table will return the translation table
   * that is used internally for htmlspecialchars and htmlentities.
   *
   * Special characters can be encoded in several ways. E.g. " can
   * be encoded as &quot;, &#34; or &#x22.
   * get_html_translation_table returns only the form used by
   * htmlspecialchars and htmlentities.
   **/
}

/**
 * Convert logical Hebrew text to visual text.
 **/

function hebrev( string $string,  int $max_chars_per_line = 0) {

  /**
   * Converts logical Hebrew text to visual text.
   *
   * The function tries to avoid breaking words.
   **/
}

/**
 * Convert logical Hebrew text to visual text with newline.
 * conversion.
 **/

function hebrevc( string $hebrew_text,  int $max_chars_per_line = 0) {

  /**
   * This function is similar to hebrev with the difference that
   * it converts newlines (\n) to "<br>\n".
   *
   * The function tries to avoid breaking words.
   **/
}

/**
 * Decodes a hexadecimally encoded binary string.
 **/

function hex2bin( string $string) {

  /**
   * Decodes a hexadecimally encoded binary string.
   *
   * This function does NOT convert a hexadecimal number to a
   * binary number. This can be done using the base_convert
   * function.
   **/
}

/**
 * Convert HTML entities to their corresponding characters.
 **/

function html_entity_decode(
     string $string
  ,  int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401
  , $encoding = null
  ) {

  /**
   * html_entity_decode is the opposite of htmlentities in that it
   * converts HTML entities in the string to their corresponding
   * characters.
   *
   * More precisely, this function decodes all the entities
   * (including all numeric entities) that a) are necessarily valid
   * for the chosen document type — i.e., for XML, this function
   * does not decode named entities that might be defined in some
   * DTD — and b) whose character or characters are in the coded
   * character set associated with the chosen encoding and are
   * permitted in the chosen document type. All other entities are
   * left as is.
   **/
}

/**
 * Convert all applicable characters to HTML entities.
 **/

function htmlentities(
     string $string
  ,  int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401
  , $encoding = null
  ,  bool $double_encode = true
  ) {

  /**
   * This function is identical to htmlspecialchars in all ways,
   * except with htmlentities, all characters which have HTML
   * character entity equivalents are translated into these
   * entities. The get_html_translation_table function can be used
   * to return the translation table used dependent upon the
   * provided flags constants.
   *
   * If you want to decode instead (the reverse) you can use
   * html_entity_decode.
   **/
}

/**
 * Convert special HTML entities back to characters.
 **/

function htmlspecialchars_decode(
     string $string
  ,  int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401
  ) {

  /**
   * This function is the opposite of htmlspecialchars. It
   * converts special HTML entities back to characters.
   *
   * The converted entities are: &amp;, &quot; (when ENT_NOQUOTES
   * is not set), &#039; (when ENT_QUOTES is set), &lt; and &gt;.
   **/
}

/**
 * Convert special characters to HTML entities.
 **/

function htmlspecialchars(
     string $string
  ,  int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401
  , $encoding = null
  ,  bool $double_encode = true
  ) {

  /**
   * Certain characters have special significance in HTML, and
   * should be represented by HTML entities if they are to preserve
   * their meanings. This function returns a string with these
   * conversions made. If you require all input substrings that
   * have associated named entities to be translated, use
   * htmlentities instead.
   *
   * If the input string passed to this function and the final
   * document share the same character set, this function is
   * sufficient to prepare input for inclusion in most contexts of
   * an HTML document. If, however, the input can represent
   * characters that are not coded in the final document character
   * set and you wish to retain those characters (as numeric or
   * named entities), both this function and htmlentities (which
   * only encodes substrings that have named entity equivalents)
   * may be insufficient. You may have to use
   * mb_encode_numericentity instead.
   *
   * Performed translations Character Replacement & (ampersand)
   * &amp; " (double quote) &quot;, unless ENT_NOQUOTES is set '
   * (single quote) &#039; (for ENT_HTML401) or &apos; (for
   * ENT_XML1, ENT_XHTML or ENT_HTML5), but only when ENT_QUOTES is
   * set < (less than) &lt; > (greater than) &gt;
   **/
}

/**
 * Join array elements with a string.
 **/

function implode( string $separator,  array $array) {

  /**
   * Join array elements with a separator string.
   **/
}

/**
 * &Alias; implode.
 **/

function () {

  /**
   **/
}

/**
 * Make a string's first character lowercase.
 **/

function lcfirst( string $string) {

  /**
   * Returns a string with the first character of string
   * lowercased if that character is an ASCII character in the
   * range "A" (0x41) to "Z" (0x5a).
   **/
}

/**
 * Calculate Levenshtein distance between two strings.
 **/

function levenshtein(
     string $string1
  ,  string $string2
  ,  int $insertion_cost = 1
  ,  int $replacement_cost = 1
  ,  int $deletion_cost = 1
  ) {

  /**
   * The Levenshtein distance is defined as the minimal number of
   * characters you have to replace, insert or delete to transform
   * string1 into string2. The complexity of the algorithm is
   * O(m*n), where n and m are the length of string1 and string2
   * (rather good when compared to similar_text, which is
   * O(max(n,m)**3), but still expensive).
   *
   * If insertion_cost, replacement_cost and/or deletion_cost are
   * unequal to 1, the algorithm adapts to choose the cheapest
   * transforms. E.g. if $insertion_cost + $deletion_cost <
   * $replacement_cost, no replacements will be done, but rather
   * inserts and deletions instead.
   **/
}

/**
 * Get numeric formatting information.
 **/

function localeconv() {

  /**
   * Returns an associative array containing localized numeric and
   * monetary formatting information.
   **/
}

/**
 * Strip whitespace (or other characters) from the beginning of a.
 * string.
 **/

function ltrim(
     string $string
  ,  string $characters = " \n\r\t\v\x00"
  ) {

  /**
   * Strip whitespace (or other characters) from the beginning of
   * a string.
   **/
}

/**
 * Calculates the md5 hash of a given file.
 **/

function md5_file( string $filename,  bool $binary = false) {

  /**
   * Calculates the MD5 hash of the file specified by the filename
   * parameter using the RSA Data Security, Inc. MD5 Message-Digest
   * Algorithm, and returns that hash. The hash is a 32-character
   * hexadecimal number.
   **/
}

/**
 * Calculate the md5 hash of a string.
 **/

function md5( string $string,  bool $binary = false) {

  /**
   * Calculates the MD5 hash of string using the RSA Data
   * Security, Inc. MD5 Message-Digest Algorithm, and returns that
   * hash.
   **/
}

/**
 * Calculate the metaphone key of a string.
 **/

function metaphone( string $string,  int $max_phonemes = 0) {

  /**
   * Calculates the metaphone key of string.
   *
   * Similar to soundex metaphone creates the same key for similar
   * sounding words. It's more accurate than soundex as it knows
   * the basic rules of English pronunciation. The metaphone
   * generated keys are of variable length.
   *
   * Metaphone was developed by Lawrence Philips <lphilips at
   * verity dot com>. It is described in ["Practical Algorithms for
   * Programmers", Binstock & Rex, Addison Wesley, 1995].
   **/
}

/**
 * Formats a number as a currency string.
 **/

function money_format( string $format,  float $number) {

  /**
   * money_format returns a formatted version of number. This
   * function wraps the C library function strfmon, with the
   * difference that this implementation converts only one number
   * at a time.
   **/
}

/**
 * Query language and locale information.
 **/

function nl_langinfo( int $item) {

  /**
   * nl_langinfo is used to access individual elements of the
   * locale categories. Unlike localeconv, which returns all of the
   * elements, nl_langinfo allows you to select any specific
   * element.
   **/
}

/**
 * Inserts HTML line breaks before all newlines in a string.
 **/

function nl2br( string $string,  bool $use_xhtml = true) {

  /**
   * Returns string with <br /> or <br> inserted before all
   * newlines (\r\n, \n\r, \n and \r).
   **/
}

/**
 * Format a number with grouped thousands.
 **/

function number_format(
     float $num
  ,  int $decimals = 0
  , $decimal_separator = "."
  , $thousands_separator = ","
  ) {

  /**
   * Formats a number with grouped thousands and optionally
   * decimal digits using the rounding half up rule.
   **/
}

/**
 * Convert the first byte of a string to a value between 0 and.
 * 255.
 **/

function ord( string $character) {

  /**
   * Interprets the binary value of the first byte of character as
   * an unsigned integer between 0 and 255.
   *
   * If the string is in a single-byte encoding, such as ASCII,
   * ISO-8859, or Windows 1252, this is equivalent to returning the
   * position of a character in the character set's mapping table.
   * However, note that this function is not aware of any string
   * encoding, and in particular will never identify a Unicode code
   * point in a multi-byte encoding such as UTF-8 or UTF-16.
   *
   * This function complements chr.
   **/
}

/**
 * Parses the string into variables.
 **/

function parse_str( string $string,  array &$result) {

  /**
   * Parses string as if it were the query string passed via a URL
   * and sets variables in the current scope (or in the array if
   * result is provided).
   **/
}

/**
 * Output a string.
 **/

function print( string $expression) {

  /**
   * Outputs expression.
   *
   * print is not a function but a language construct. Its
   * argument is the expression following the print keyword, and is
   * not delimited by parentheses.
   *
   * The major differences to echo are that print only accepts a
   * single argument and always returns 1.
   **/
}

/**
 * Output a formatted string.
 **/

function printf( string $format,  mixed $values) {

  /**
   **/
}

/**
 * Convert a quoted-printable string to an 8 bit string.
 **/

function quoted_printable_decode( string $string) {

  /**
   * This function returns an 8-bit binary string corresponding to
   * the decoded quoted printable string (according to RFC2045,
   * section 6.7, not RFC2821, section 4.5.2, so additional periods
   * are not stripped from the beginning of line).
   *
   * This function is similar to imap_qprint, except this one does
   * not require the IMAP module to work.
   **/
}

/**
 * Convert a 8 bit string to a quoted-printable string.
 **/

function quoted_printable_encode( string $string) {

  /**
   * Returns a quoted printable string created according to
   * RFC2045, section 6.7.
   *
   * This function is similar to imap_8bit, except this one does
   * not require the IMAP module to work.
   **/
}

/**
 * Quote meta characters.
 **/

function quotemeta( string $string) {

  /**
   * Returns a version of str with a backslash character (\)
   * before every character that is among these: . \ + * ? [ ^ ] (
   * $ )
   **/
}

/**
 * Strip whitespace (or other characters) from the end of a.
 * string.
 **/

function rtrim(
     string $string
  ,  string $characters = " \n\r\t\v\x00"
  ) {

  /**
   * This function returns a string with whitespace (or other
   * characters) stripped from the end of string.
   *
   * Without the second parameter, rtrim will strip these
   * characters: " " (ASCII 32 (0x20)), an ordinary space. "\t"
   * (ASCII 9 (0x09)), a tab. "\n" (ASCII 10 (0x0A)), a new line
   * (line feed). "\r" (ASCII 13 (0x0D)), a carriage return. "\0"
   * (ASCII 0 (0x00)), the NULL-byte. "\v" (ASCII 11 (0x0B)), a
   * vertical tab.
   **/
}

/**
 * Set locale information.
 **/

function setlocale( int $category,  string $locales,  string $rest) {

  /**
   * Sets locale information.
   *
   * The locale information is maintained per process, not per
   * thread. If you are running PHP on a multithreaded server API ,
   * you may experience sudden changes in locale settings while a
   * script is running, though the script itself never called
   * setlocale. This happens due to other scripts running in
   * different threads of the same process at the same time,
   * changing the process-wide locale using setlocale. On Windows,
   * locale information is maintained per thread as of PHP 7.0.5.
   **/
}

/**
 * Calculate the sha1 hash of a file.
 **/

function sha1_file( string $filename,  bool $binary = false) {

  /**
   **/
}

/**
 * Calculate the sha1 hash of a string.
 **/

function sha1( string $string,  bool $binary = false) {

  /**
   **/
}

/**
 * Calculate the similarity between two strings.
 **/

function similar_text(
     string $string1
  ,  string $string2
  ,  float &$percent = null
  ) {

  /**
   * This calculates the similarity between two strings as
   * described in &book.programming.classics;. Note that this
   * implementation does not use a stack as in Oliver's pseudo
   * code, but recursive calls which may or may not speed up the
   * whole process. Note also that the complexity of this algorithm
   * is O(N**3) where N is the length of the longest string.
   **/
}

/**
 * Calculate the soundex key of a string.
 **/

function soundex( string $string) {

  /**
   * Calculates the soundex key of string.
   *
   * Soundex keys have the property that words pronounced
   * similarly produce the same soundex key, and can thus be used
   * to simplify searches in databases where you know the
   * pronunciation but not the spelling.
   *
   * This particular soundex function is one described by Donald
   * Knuth in "The Art Of Computer Programming, vol. 3: Sorting And
   * Searching", Addison-Wesley (1973), pp. 391-392.
   **/
}

/**
 * Return a formatted string.
 **/

function sprintf( string $format,  mixed $values) {

  /**
   * Returns a string produced according to the formatting string
   * format.
   **/
}

/**
 * Parses input from a string according to a format.
 **/

function sscanf( string $string,  string $format,  mixed &$vars) {

  /**
   * The function sscanf is the input analog of printf. sscanf
   * reads from the string string and interprets it according to
   * the specified format.
   *
   * Any whitespace in the format string matches any whitespace in
   * the input string. This means that even a tab (\t) in the
   * format string can match a single space character in the input
   * string.
   **/
}

/**
 * Determine if a string contains a given substring.
 **/

function str_contains( string $haystack,  string $needle) {

  /**
   * Performs a case-sensitive check indicating if needle is
   * contained in haystack.
   **/
}

/**
 * Decrement an alphanumeric string.
 **/

function str_decrement( string $string) {

  /**
   * Returns the decremented alphanumeric ASCII string.
   **/
}

/**
 * Checks if a string ends with a given substring.
 **/

function str_ends_with( string $haystack,  string $needle) {

  /**
   * Performs a case-sensitive check indicating if haystack ends
   * with needle.
   **/
}

/**
 * Parse a CSV string into an array.
 **/

function str_getcsv(
     string $string
  ,  string $separator = ","
  ,  string $enclosure = "\""
  ,  string $escape = "\\"
  ) {

  /**
   * Parses a string input for fields in CSV format and returns an
   * array containing the fields read.
   *
   * The locale settings are taken into account by this function.
   * If LC_CTYPE is e.g. en_US.UTF-8, strings in one-byte encodings
   * may be read wrongly by this function.
   **/
}

/**
 * Increment an alphanumeric string.
 **/

function str_increment( string $string) {

  /**
   * Returns the incremented alphanumeric ASCII string.
   **/
}

/**
 * Case-insensitive version of str_replace.
 **/

function str_ireplace(
    $search
  , $replace
  , $subject
  ,  int &$count = null
  ) {

  /**
   * This function returns a string or an array with all
   * occurrences of search in subject (ignoring case) replaced with
   * the given replace value.
   *
   * To replace text based on a pattern rather than a fixed
   * string, use preg_replace with the i pattern modifier.
   **/
}

/**
 * Pad a string to a certain length with another string.
 **/

function str_pad(
     string $string
  ,  int $length
  ,  string $pad_string = " "
  ,  int $pad_type = STR_PAD_RIGHT
  ) {

  /**
   * This function returns the string string padded on the left,
   * the right, or both sides to the specified padding length. If
   * the optional argument pad_string is not supplied, the string
   * is padded with spaces, otherwise it is padded with characters
   * from pad_string up to the limit.
   **/
}

/**
 * Repeat a string.
 **/

function str_repeat( string $string,  int $times) {

  /**
   * Returns string repeated times times.
   **/
}

/**
 * Replace all occurrences of the search string with the.
 * replacement string.
 **/

function str_replace(
    $search
  , $replace
  , $subject
  ,  int &$count = null
  ) {

  /**
   * This function returns a string or an array with all
   * occurrences of search in subject replaced with the given
   * replace value.
   *
   * To replace text based on a pattern rather than a fixed
   * string, use preg_replace.
   **/
}

/**
 * Perform the rot13 transform on a string.
 **/

function str_rot13( string $string) {

  /**
   * Performs the ROT13 encoding on the string argument and
   * returns the resulting string.
   *
   * The ROT13 encoding simply shifts every letter by 13 places in
   * the alphabet while leaving non-alpha characters untouched.
   * Encoding and decoding are done by the same function, passing
   * an encoded string as argument will return the original
   * version.
   **/
}

/**
 * Randomly shuffles a string.
 **/

function str_shuffle( string $string) {

  /**
   **/
}

/**
 * Convert a string to an array.
 **/

function str_split( string $string,  int $length = 1) {

  /**
   * Converts a string to an array.
   **/
}

/**
 * Checks if a string starts with a given substring.
 **/

function str_starts_with( string $haystack,  string $needle) {

  /**
   * Performs a case-sensitive check indicating if haystack begins
   * with needle.
   **/
}

/**
 * Return information about words used in a string.
 **/

function str_word_count(
     string $string
  ,  int $format = 0
  , $characters = null
  ) {

  /**
   * Counts the number of words inside string. If the optional
   * format is not specified, then the return value will be an
   * integer representing the number of words found. In the event
   * the format is specified, the return value will be an array,
   * content of which is dependent on the format. The possible
   * value for the format and the resultant outputs are listed
   * below.
   *
   * For the purpose of this function, 'word' is defined as a
   * locale dependent string containing alphabetic characters,
   * which also may contain, but not start with "'" and "-"
   * characters. Note that multibyte locales are not supported.
   **/
}

/**
 * Binary safe case-insensitive string comparison.
 **/

function strcasecmp( string $string1,  string $string2) {

  /**
   * Binary safe case-insensitive string comparison. The
   * comparison is not locale aware; only ASCII letters are
   * compared in a case-insensitive way.
   **/
}

/**
 * &Alias; strstr.
 **/

function () {

  /**
   **/
}

/**
 * Binary safe string comparison.
 **/

function strcmp( string $string1,  string $string2) {

  /**
   **/
}

/**
 * Locale based string comparison.
 **/

function strcoll( string $string1,  string $string2) {

  /**
   * Note that this comparison is case sensitive, and unlike
   * strcmp this function is not binary safe.
   *
   * strcoll uses the current locale for doing the comparisons. If
   * the current locale is C or POSIX, this function is equivalent
   * to strcmp.
   **/
}

/**
 * Find length of initial segment not matching mask.
 **/

function strcspn(
     string $string
  ,  string $characters
  ,  int $offset = 0
  , $length = null
  ) {

  /**
   * Returns the length of the initial segment of string which
   * does not contain any of the characters in characters.
   *
   * If offset and length are omitted, then all of string will be
   * examined. If they are included, then the effect will be the
   * same as calling strcspn(substr($string, $offset, $length),
   * $characters) (see for more information).
   **/
}

/**
 * Strip HTML and PHP tags from a string.
 **/

function strip_tags( string $string, $allowed_tags = null) {

  /**
   * This function tries to return a string with all NULL bytes,
   * HTML and PHP tags stripped from a given string. It uses the
   * same tag stripping state machine as the fgetss function.
   **/
}

/**
 * Un-quote string quoted with addcslashes.
 **/

function stripcslashes( string $string) {

  /**
   * Returns a string with backslashes stripped off. Recognizes
   * C-like \n, \r ..., octal and hexadecimal representation.
   **/
}

/**
 * Find the position of the first occurrence of a.
 * case-insensitive substring in a string.
 **/

function stripos(
     string $haystack
  ,  string $needle
  ,  int $offset = 0
  ) {

  /**
   * Find the numeric position of the first occurrence of needle
   * in the haystack string.
   *
   * Unlike the strpos, stripos is case-insensitive.
   **/
}

/**
 * Un-quotes a quoted string.
 **/

function stripslashes( string $string) {

  /**
   * Un-quotes a quoted string.
   *
   * stripslashes can be used if you aren't inserting this data
   * into a place (such as a database) that requires escaping. For
   * example, if you're simply outputting data straight from an
   * HTML form.
   **/
}

/**
 * Case-insensitive strstr.
 **/

function stristr(
     string $haystack
  ,  string $needle
  ,  bool $before_needle = false
  ) {

  /**
   * Returns all of haystack starting from and including the first
   * occurrence of needle to the end.
   **/
}

/**
 * Get string length.
 **/

function strlen( string $string) {

  /**
   * Returns the length of the given string.
   **/
}

/**
 * Case insensitive string comparisons using a "natural order".
 * algorithm.
 **/

function strnatcasecmp( string $string1,  string $string2) {

  /**
   * This function implements a comparison algorithm that orders
   * alphanumeric strings in the way a human being would. The
   * behaviour of this function is similar to strnatcmp, except
   * that the comparison is not case sensitive. For more
   * information see: Martin Pool's Natural Order String Comparison
   * page.
   **/
}

/**
 * String comparisons using a "natural order" algorithm.
 **/

function strnatcmp( string $string1,  string $string2) {

  /**
   * This function implements a comparison algorithm that orders
   * alphanumeric strings in the way a human being would, this is
   * described as a "natural ordering". Note that this comparison
   * is case sensitive.
   **/
}

/**
 * Binary safe case-insensitive string comparison of the first n.
 * characters.
 **/

function strncasecmp(
     string $string1
  ,  string $string2
  ,  int $length
  ) {

  /**
   * This function is similar to strcasecmp, with the difference
   * that you can specify the (upper limit of the) number of
   * characters from each string to be used in the comparison.
   **/
}

/**
 * Binary safe string comparison of the first n characters.
 **/

function strncmp( string $string1,  string $string2,  int $length) {

  /**
   * This function is similar to strcmp, with the difference that
   * you can specify the (upper limit of the) number of characters
   * from each string to be used in the comparison.
   *
   * Note that this comparison is case sensitive.
   **/
}

/**
 * Search a string for any of a set of characters.
 **/

function strpbrk( string $string,  string $characters) {

  /**
   * strpbrk searches the string string for a characters.
   **/
}

/**
 * Find the position of the first occurrence of a substring in a.
 * string.
 **/

function strpos( string $haystack,  string $needle,  int $offset = 0) {

  /**
   * Find the numeric position of the first occurrence of needle
   * in the haystack string.
   **/
}

/**
 * Find the last occurrence of a character in a string.
 **/

function strrchr(
     string $haystack
  ,  string $needle
  ,  bool $before_needle = false
  ) {

  /**
   * This function returns the portion of haystack which starts at
   * the last occurrence of needle and goes until the end of
   * haystack.
   **/
}

/**
 * Reverse a string.
 **/

function strrev( string $string) {

  /**
   * Returns string, reversed.
   **/
}

/**
 * Find the position of the last occurrence of a case-insensitive.
 * substring in a string.
 **/

function strripos(
     string $haystack
  ,  string $needle
  ,  int $offset = 0
  ) {

  /**
   * Find the numeric position of the last occurrence of needle in
   * the haystack string.
   *
   * Unlike the strrpos, strripos is case-insensitive.
   **/
}

/**
 * Find the position of the last occurrence of a substring in a.
 * string.
 **/

function strrpos(
     string $haystack
  ,  string $needle
  ,  int $offset = 0
  ) {

  /**
   * Find the numeric position of the last occurrence of needle in
   * the haystack string.
   **/
}

/**
 * Finds the length of the initial segment of a string.
 * consisting entirely of characters contained within a given.
 * mask.
 **/

function strspn(
     string $string
  ,  string $characters
  ,  int $offset = 0
  , $length = null
  ) {

  /**
   * Finds the length of the initial segment of string that
   * contains only characters from characters.
   *
   * If offset and length are omitted, then all of string will be
   * examined. If they are included, then the effect will be the
   * same as calling strspn(substr($string, $offset, $length),
   * $characters) (see for more information).
   *
   * The line of code: ]]> will assign 2 to $var, because the
   * string "42" is the initial segment of string that consists
   * only of characters contained within "1234567890".
   **/
}

/**
 * Find the first occurrence of a string.
 **/

function strstr(
     string $haystack
  ,  string $needle
  ,  bool $before_needle = false
  ) {

  /**
   * Returns part of haystack string starting from and including
   * the first occurrence of needle to the end of haystack.
   *
   * This function is case-sensitive. For case-insensitive
   * searches, use stristr.
   *
   * If it is only required to determine if a particular needle
   * occurs within haystack, the faster and less memory intensive
   * str_contains function should be used instead.
   **/
}

/**
 * Tokenize string.
 **/

function strtok( string $string,  string $token) {

  /**
   * strtok splits a string (string) into smaller strings
   * (tokens), with each token being delimited by any character
   * from token. That is, if you have a string like "This is an
   * example string" you could tokenize this string into its
   * individual words by using the space character as the token.
   *
   * Note that only the first call to strtok uses the string
   * argument. Every subsequent call to strtok only needs the token
   * to use, as it keeps track of where it is in the current
   * string. To start over, or to tokenize a new string you simply
   * call strtok with the string argument again to initialize it.
   * Note that you may put multiple tokens in the token parameter.
   * The string will be tokenized when any one of the characters in
   * the token argument is found.
   *
   * This function behaves slightly different from what one may
   * expect being familiar with explode. First, a sequence of two
   * or more contiguous token characters in the parsed string is
   * considered to be a single delimiter. Also, a token situated at
   * the start or end of the string is ignored. For example, if a
   * string ";aaa;;bbb;" is used, successive calls to strtok with
   * ";" as a token would return strings "aaa" and "bbb", and then
   * &false;. As a result, the string will be split into only two
   * elements, while explode(";", $string) would return an array of
   * 5 elements.
   **/
}

/**
 * Make a string lowercase.
 **/

function strtolower( string $string) {

  /**
   * Returns string with all ASCII alphabetic characters converted
   * to lowercase.
   *
   * Bytes in the range "A" (0x41) to "Z" (0x5a) will be converted
   * to the corresponding lowercase letter by adding 32 to each
   * byte value.
   *
   * This can be used to convert ASCII characters within strings
   * encoded with UTF-8, since multibyte UTF-8 characters will be
   * ignored. To convert multibyte non-ASCII characters, use
   * mb_strtolower.
   **/
}

/**
 * Make a string uppercase.
 **/

function strtoupper( string $string) {

  /**
   * Returns string with all ASCII alphabetic characters converted
   * to uppercase.
   *
   * Bytes in the range "a" (0x61) to "z" (0x7a) will be converted
   * to the corresponding uppercase letter by subtracting 32 from
   * each byte value.
   *
   * This can be used to convert ASCII characters within strings
   * encoded with UTF-8, since multibyte UTF-8 characters will be
   * ignored. To convert multibyte non-ASCII characters, use
   * mb_strtoupper.
   **/
}

/**
 * Translate characters or replace substrings.
 **/

function strtr( string $string,  string $from,  string $to) {

  /**
   * If given three arguments, this function returns a copy of
   * string where all occurrences of each (single-byte) character
   * in from have been translated to the corresponding character in
   * to, i.e., every occurrence of $from[$n] has been replaced with
   * $to[$n], where $n is a valid offset in both arguments.
   *
   * If from and to have different lengths, the extra characters
   * in the longer of the two are ignored. The length of string
   * will be the same as the return value's.
   *
   * If given two arguments, the second should be an array in the
   * form array('from' => 'to', ...). The return value is a string
   * where all the occurrences of the array keys have been replaced
   * by the corresponding values. The longest keys will be tried
   * first. Once a substring has been replaced, its new value will
   * not be searched again.
   *
   * In this case, the keys and the values may have any length,
   * provided that there is no empty key; additionally, the length
   * of the return value may differ from that of string. However,
   * this function will be the most efficient when all the keys
   * have the same size.
   **/
}

/**
 * Binary safe comparison of two strings from an offset, up to.
 * length characters.
 **/

function substr_compare(
     string $haystack
  ,  string $needle
  ,  int $offset
  , $length = null
  ,  bool $case_insensitive = false
  ) {

  /**
   * substr_compare compares haystack from position offset with
   * needle up to length characters.
   **/
}

/**
 * Count the number of substring occurrences.
 **/

function substr_count(
     string $haystack
  ,  string $needle
  ,  int $offset = 0
  , $length = null
  ) {

  /**
   * substr_count returns the number of times the needle substring
   * occurs in the haystack string. Please note that needle is case
   * sensitive.
   *
   * This function doesn't count overlapped substrings. See the
   * example below!
   **/
}

/**
 * Replace text within a portion of a string.
 **/

function substr_replace($string, $replace, $offset, $length = null) {

  /**
   * substr_replace replaces a copy of string delimited by the
   * offset and (optionally) length parameters with the string
   * given in replace.
   **/
}

/**
 * Return part of a string.
 **/

function substr( string $string,  int $offset, $length = null) {

  /**
   * Returns the portion of string specified by the offset and
   * length parameters.
   **/
}

/**
 * Strip whitespace (or other characters) from the beginning and.
 * end of a string.
 **/

function trim( string $string,  string $characters = " \n\r\t\v\x00") {

  /**
   * This function returns a string with whitespace stripped from
   * the beginning and end of string. Without the second parameter,
   * trim will strip these characters: " " (ASCII 32 (0x20)), an
   * ordinary space. "\t" (ASCII 9 (0x09)), a tab. "\n" (ASCII 10
   * (0x0A)), a new line (line feed). "\r" (ASCII 13 (0x0D)), a
   * carriage return. "\0" (ASCII 0 (0x00)), the NUL-byte. "\v"
   * (ASCII 11 (0x0B)), a vertical tab.
   **/
}

/**
 * Make a string's first character uppercase.
 **/

function ucfirst( string $string) {

  /**
   * Returns a string with the first character of string
   * capitalized, if that character is an ASCII character in the
   * range from "a" (0x61) to "z" (0x7a).
   **/
}

/**
 * Uppercase the first character of each word in a string.
 **/

function ucwords(
     string $string
  ,  string $separators = " \t\r\n\f\v"
  ) {

  /**
   * Returns a string with the first character of each word in
   * string capitalized, if that character is an ASCII character
   * between "a" (0x61) and "z" (0x7a).
   *
   * For this function, a word is a string of characters that are
   * not listed in the separators parameter. By default, these are:
   * space, horizontal tab, carriage return, newline, form-feed and
   * vertical tab.
   *
   * To do a similar conversion on multibyte strings, use
   * mb_convert_case with the MB_CASE_TITLE mode.
   **/
}

/**
 * Converts a string from UTF-8 to ISO-8859-1, replacing invalid.
 * or unrepresentable characters.
 **/

function utf8_decode( string $string) {

  /**
   * This function converts the string string from the UTF-8
   * encoding to ISO-8859-1. Bytes in the string which are not
   * valid UTF-8, and UTF-8 characters which do not exist in
   * ISO-8859-1 (that is, code points above U+00FF) are replaced
   * with ?.
   *
   * Many web pages marked as using the ISO-8859-1 character
   * encoding actually use the similar Windows-1252 encoding, and
   * web browsers will interpret ISO-8859-1 web pages as
   * Windows-1252. Windows-1252 features additional printable
   * characters, such as the Euro sign (€) and curly quotes (“
   * ”), instead of certain ISO-8859-1 control characters. This
   * function will not convert such Windows-1252 characters
   * correctly. Use a different function if Windows-1252 conversion
   * is required.
   **/
}

/**
 * Converts a string from ISO-8859-1 to UTF-8.
 **/

function utf8_encode( string $string) {

  /**
   * This function converts the string string from the ISO-8859-1
   * encoding to UTF-8.
   *
   * This function does not attempt to guess the current encoding
   * of the provided string, it assumes it is encoded as ISO-8859-1
   * (also known as "Latin 1") and converts to UTF-8. Since every
   * sequence of bytes is a valid ISO-8859-1 string, this never
   * results in an error, but will not result in a useful string if
   * a different encoding was intended.
   *
   * Many web pages marked as using the ISO-8859-1 character
   * encoding actually use the similar Windows-1252 encoding, and
   * web browsers will interpret ISO-8859-1 web pages as
   * Windows-1252. Windows-1252 features additional printable
   * characters, such as the Euro sign (€) and curly quotes (“
   * ”), instead of certain ISO-8859-1 control characters. This
   * function will not convert such Windows-1252 characters
   * correctly. Use a different function if Windows-1252 conversion
   * is required.
   **/
}

/**
 * Write a formatted string to a stream.
 **/

function vfprintf( resource $stream,  string $format,  array $values) {

  /**
   * Write a string produced according to format to the stream
   * resource specified by stream.
   *
   * Operates as fprintf but accepts an array of arguments, rather
   * than a variable number of arguments.
   **/
}

/**
 * Output a formatted string.
 **/

function vprintf( string $format,  array $values) {

  /**
   * Display array values as a formatted string according to
   * format (which is described in the documentation for sprintf).
   *
   * Operates as printf but accepts an array of arguments, rather
   * than a variable number of arguments.
   **/
}

/**
 * Return a formatted string.
 **/

function vsprintf( string $format,  array $values) {

  /**
   * Operates as sprintf but accepts an array of arguments, rather
   * than a variable number of arguments.
   **/
}

/**
 * Wraps a string to a given number of characters.
 **/

function wordwrap(
     string $string
  ,  int $width = 75
  ,  string $break = "\n"
  ,  bool $cut_long_words = false
  ) {

  /**
   * Wraps a string to a given number of characters using a string
   * break character.
   **/
}

/**
 * Schedules the addition of an item in a working directory.
 **/

function svn_add(
     string $path
  ,  bool $recursive = true
  ,  bool $force = false
  ) {

  /**
   * Adds the file, directory or symbolic link at path to the
   * working directory. The item will be added to the repository
   * the next time you call svn_commit on the working copy.
   **/
}

/**
 * Retrieves authentication parameter.
 **/

function svn_auth_get_parameter( string $key) {

  /**
   * Retrieves authentication parameter at key. For a list of
   * valid keys and their meanings, consult the authentication
   * constants list.
   **/
}

/**
 * Sets an authentication parameter.
 **/

function svn_auth_set_parameter( string $key,  string $value) {

  /**
   * Sets authentication parameter at key to value. For a list of
   * valid keys and their meanings, consult the authentication
   * constants list.
   **/
}

/**
 * Get the SVN blame for a file.
 **/

function svn_blame(
     string $repository_url
  ,  int $revision_no = SVN_REVISION_HEAD
  ) {

  /**
   * Get the SVN blame of a file from a repository URL.
   **/
}

/**
 * Returns the contents of a file in a repository.
 **/

function svn_cat( string $repos_url,  int $revision_no) {

  /**
   * Returns the contents of the URL repos_url to a file in the
   * repository, optionally at revision number revision_no.
   **/
}

/**
 * Checks out a working copy from the repository.
 **/

function svn_checkout(
     string $repos
  ,  string $targetpath
  ,  int $revision
  ,  int $flags = 0
  ) {

  /**
   * Checks out a working copy from the repository at repos to
   * targetpath at revision revision.
   **/
}

/**
 * Recursively cleanup a working copy directory, finishing.
 * incomplete operations and removing locks.
 **/

function svn_cleanup( string $workingdir) {

  /**
   * Recursively cleanup working copy directory workingdir,
   * finishing any incomplete operations and removing working copy
   * locks. Use when a working copy is in limbo and needs to be
   * usable again.
   **/
}

/**
 * Returns the version of the SVN client libraries.
 **/

function svn_client_version() {

  /**
   * Returns the version of the SVN client libraries
   **/
}

/**
 * Sends changes from the local working copy to the repository.
 **/

function svn_commit(
     string $log
  ,  array $targets
  ,  bool $recursive = true
  ) {

  /**
   * Commits changes made in the local working copy files
   * enumerated in the targets array to the repository, with the
   * log message log. Directories in the targets array will be
   * recursively committed unless recursive is set to &false;.
   **/
}

/**
 * Delete items from a working copy or repository.
 **/

function svn_delete( string $path,  bool $force = false) {

  /**
   * Deletes the file, directory or symbolic link at path from the
   * working directory. The item will be deleted from the
   * repository the next time you call svn_commit on the working
   * copy.
   **/
}

/**
 * Recursively diffs two paths.
 **/

function svn_diff(
     string $path1
  ,  int $rev1
  ,  string $path2
  ,  int $rev2
  ) {

  /**
   * Recursively diffs two paths, path1 and path2.
   *
   * This is not a general-purpose diff utility. Only local files
   * that are versioned may be diffed: other files will fail.
   **/
}

/**
 * Export the contents of a SVN directory.
 **/

function svn_export(
     string $frompath
  ,  string $topath
  ,  bool $working_copy = true
  ,  int $revision_no = -1
  ) {

  /**
   * Export the contents of either a working copy or repository
   * into a 'clean' directory.
   **/
}

/**
 * Aborts a transaction.
 **/

function svn_fs_abort_txn( resource $txn) {

  /**
   * Aborts a transaction.
   **/
}

/**
 * Creates and returns a stream that will be used to replace.
 **/

function svn_fs_apply_text( resource $root,  string $path) {

  /**
   * Creates and returns a stream that will be used to replace
   **/
}

/**
 * Create a new transaction.
 **/

function svn_fs_begin_txn2( resource $repos,  int $rev) {

  /**
   * Create a new transaction
   **/
}

/**
 * Return true if everything is ok, false otherwise.
 **/

function svn_fs_change_node_prop(
     resource $root
  ,  string $path
  ,  string $name
  ,  string $value
  ) {

  /**
   * Return true if everything is ok, false otherwise
   **/
}

/**
 * Determines what kind of item lives at path in a given.
 * repository fsroot.
 **/

function svn_fs_check_path( resource $fsroot,  string $path) {

  /**
   * Determines what kind of item lives at path in a given
   * repository fsroot
   **/
}

/**
 * Return true if content is different, false otherwise.
 **/

function svn_fs_contents_changed(
     resource $root1
  ,  string $path1
  ,  resource $root2
  ,  string $path2
  ) {

  /**
   * Return true if content is different, false otherwise
   **/
}

/**
 * Copies a file or a directory.
 **/

function svn_fs_copy(
     resource $from_root
  ,  string $from_path
  ,  resource $to_root
  ,  string $to_path
  ) {

  /**
   * Copies a file or a directory.
   **/
}

/**
 * Deletes a file or a directory.
 **/

function svn_fs_delete( resource $root,  string $path) {

  /**
   * Deletes a file or a directory.
   **/
}

/**
 * Enumerates the directory entries under path; returns a hash of.
 * dir names to file type.
 **/

function svn_fs_dir_entries( resource $fsroot,  string $path) {

  /**
   * Enumerates the directory entries under path; returns a hash
   * of dir names to file type
   **/
}

/**
 * Returns a stream to access the contents of a file from a given.
 * version of the fs.
 **/

function svn_fs_file_contents( resource $fsroot,  string $path) {

  /**
   * Returns a stream to access the contents of a file from a
   * given version of the fs
   **/
}

/**
 * Returns the length of a file from a given version of the fs.
 **/

function svn_fs_file_length( resource $fsroot,  string $path) {

  /**
   * Returns the length of a file from a given version of the fs
   **/
}

/**
 * Determines if a path points to a directory.
 **/

function svn_fs_is_dir( resource $root,  string $path) {

  /**
   * Determines if the given path points to a directory.
   **/
}

/**
 * Determines if a path points to a file.
 **/

function svn_fs_is_file( resource $root,  string $path) {

  /**
   * Determines if the given path points to a file.
   **/
}

/**
 * Creates a new empty directory.
 **/

function svn_fs_make_dir( resource $root,  string $path) {

  /**
   * Creates a new empty directory.
   **/
}

/**
 * Creates a new empty file.
 **/

function svn_fs_make_file( resource $root,  string $path) {

  /**
   * Creates a new empty file.
   **/
}

/**
 * Returns the revision in which path under fsroot was created.
 **/

function svn_fs_node_created_rev( resource $fsroot,  string $path) {

  /**
   * Returns the revision in which path under fsroot was created
   **/
}

/**
 * Returns the value of a property for a node.
 **/

function svn_fs_node_prop(
     resource $fsroot
  ,  string $path
  ,  string $propname
  ) {

  /**
   * Returns the value of a property for a node
   **/
}

/**
 * Return true if props are different, false otherwise.
 **/

function svn_fs_props_changed(
     resource $root1
  ,  string $path1
  ,  resource $root2
  ,  string $path2
  ) {

  /**
   * Return true if props are different, false otherwise
   **/
}

/**
 * Fetches the value of a named property.
 **/

function svn_fs_revision_prop(
     resource $fs
  ,  int $revnum
  ,  string $propname
  ) {

  /**
   * Fetches the value of a named property
   **/
}

/**
 * Get a handle on a specific version of the repository root.
 **/

function svn_fs_revision_root( resource $fs,  int $revnum) {

  /**
   * Get a handle on a specific version of the repository root
   **/
}

/**
 * Creates and returns a transaction root.
 **/

function svn_fs_txn_root( resource $txn) {

  /**
   * Creates and returns a transaction root
   **/
}

/**
 * Returns the number of the youngest revision in the filesystem.
 **/

function svn_fs_youngest_rev( resource $fs) {

  /**
   * Returns the number of the youngest revision in the filesystem
   **/
}

/**
 * Imports an unversioned path into a repository.
 **/

function svn_import( string $path,  string $url,  bool $nonrecursive) {

  /**
   * Commits unversioned path into repository at url. If path is a
   * directory and nonrecursive is &false;, the directory will be
   * imported recursively.
   **/
}

/**
 * Returns the commit log messages of a repository URL.
 **/

function svn_log(
     string $repos_url
  ,  int $start_revision
  ,  int $end_revision
  ,  int $limit = 0
  ,  int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY
  ) {

  /**
   * svn_log returns the complete history of the item at the
   * repository URL repos_url, or the history of a specific
   * revision if start_revision is set. This function is equivalent
   * to svn log --verbose -r $start_revision $repos_url.
   **/
}

/**
 * Returns list of directory contents in repository URL,.
 * optionally at revision number.
 **/

function svn_ls(
     string $repos_url
  ,  int $revision_no = SVN_REVISION_HEAD
  ,  bool $recurse = false
  ,  bool $peg = false
  ) {

  /**
   * This function queries the repository URL and returns a list
   * of files and directories, optionally from a specific revision.
   * This is equivalent to svn list $repos_url[@$revision_no]
   *
   * This function does not work with working copies. repos_url
   * must be a repository URL.
   **/
}

/**
 * Creates a directory in a working copy or repository.
 **/

function svn_mkdir( string $path,  string $log_message) {

  /**
   * Creates a directory in a working copy or repository.
   **/
}

/**
 * Create a new subversion repository at path.
 **/

function svn_repos_create(
     string $path
  ,  array $config
  ,  array $fsconfig
  ) {

  /**
   * Create a new subversion repository at path
   **/
}

/**
 * Create a new transaction.
 **/

function svn_repos_fs_begin_txn_for_commit(
     resource $repos
  ,  int $rev
  ,  string $author
  ,  string $log_msg
  ) {

  /**
   * Create a new transaction
   **/
}

/**
 * Commits a transaction and returns the new revision.
 **/

function svn_repos_fs_commit_txn( resource $txn) {

  /**
   * Commits a transaction and returns the new revision
   **/
}

/**
 * Gets a handle on the filesystem for a repository.
 **/

function svn_repos_fs( resource $repos) {

  /**
   * Gets a handle on the filesystem for a repository
   **/
}

/**
 * Make a hot-copy of the repos at repospath; copy it to destpath.
 **/

function svn_repos_hotcopy(
     string $repospath
  ,  string $destpath
  ,  bool $cleanlogs
  ) {

  /**
   * Make a hot-copy of the repos at repospath; copy it to
   * destpath
   **/
}

/**
 * Open a shared lock on a repository.
 **/

function svn_repos_open( string $path) {

  /**
   * Open a shared lock on a repository.
   **/
}

/**
 * Run recovery procedures on the repository located at path.
 **/

function svn_repos_recover( string $path) {

  /**
   * Run recovery procedures on the repository located at path.
   **/
}

/**
 * Revert changes to the working copy.
 **/

function svn_revert( string $path,  bool $recursive = false) {

  /**
   * Revert any local changes to the path in a working copy.
   **/
}

/**
 * Returns the status of working copy files and directories.
 **/

function svn_status( string $path,  int $flags = 0) {

  /**
   * Returns the status of working copy files and directories,
   * giving modifications, additions, deletions and other changes
   * to items in the working copy.
   **/
}

/**
 * Update working copy.
 **/

function svn_update(
     string $path
  ,  int $revno = SVN_REVISION_HEAD
  ,  bool $recurse = true
  ) {

  /**
   * Update working copy at path to revision revno. If recurse is
   * true, directories will be recursively updated.
   **/
}

/**
 * Async and non-blocking hostname to IP lookup.
 **/

function swoole_async_dns_lookup(
     string $hostname
  ,  callable $callback
  ) {

  /**
   **/
}

/**
 * Read file stream asynchronously.
 **/

function swoole_async_read(
     string $filename
  ,  callable $callback
  ,  int $chunk_size = 65536
  ,  int $offset = 0
  ) {

  /**
   **/
}

/**
 * Read a file asynchronously.
 **/

function swoole_async_readfile(
     string $filename
  ,  callable $callback
  ) {

  /**
   **/
}

/**
 * Update the async I/O options.
 **/

function swoole_async_set( array $settings) {

  /**
   **/
}

/**
 * Write data to a file stream asynchronously.
 **/

function swoole_async_write(
     string $filename
  ,  string $content
  ,  int $offset
  ,  callable $callback
  ) {

  /**
   **/
}

/**
 * Write data to a file asynchronously.
 **/

function swoole_async_writefile(
     string $filename
  ,  string $content
  ,  callable $callback
  ,  int $flags = 0
  ) {

  /**
   **/
}

/**
 * Clear errors in the socket or on the last error code.
 **/

function swoole_clear_error() {

  /**
   * Clear errors in the socket or on the last error code.
   **/
}

/**
 * Get the file description which are ready to read/write or.
 * error.
 **/

function swoole_client_select(
     array &$read_array
  ,  array &$write_array
  ,  array &$error_array
  ,  float $timeout = 0.5
  ) {

  /**
   **/
}

/**
 * Get the number of CPU.
 **/

function swoole_cpu_num() {

  /**
   **/
}

/**
 * Get the error code of the latest system call.
 **/

function swoole_errno() {

  /**
   **/
}

/**
 * Output error messages to the log.
 **/

function swoole_error_log( int $level,  string $msg) {

  /**
   * Output error messages to the log.
   **/
}

/**
 * Add new callback functions of a socket into the EventLoop.
 **/

function swoole_event_add(
     int $fd
  ,  callable $read_callback
  ,  callable $write_callback
  ,  int $events = 0
  ) {

  /**
   **/
}

/**
 * Add callback function to the next event loop.
 **/

function swoole_event_defer( callable $callback) {

  /**
   **/
}

/**
 * Remove all event callback functions of a socket.
 **/

function swoole_event_del( int $fd) {

  /**
   **/
}

/**
 * Exit the eventloop, only available at the client side.
 **/

function swoole_event_exit() {

  /**
   **/
}

/**
 * Update the event callback functions of a socket.
 **/

function swoole_event_set(
     int $fd
  ,  callable $read_callback
  ,  callable $write_callback
  ,  int $events = 0
  ) {

  /**
   **/
}

/**
 * Start the event loop.
 **/

function swoole_event_wait() {

  /**
   **/
}

/**
 * Write data to a socket.
 **/

function swoole_event_write( int $fd,  string $data) {

  /**
   **/
}

/**
 * Get the IPv4 IP addresses of each NIC on the machine.
 **/

function swoole_get_local_ip() {

  /**
   **/
}

/**
 * Get the lastest error message.
 **/

function swoole_last_error() {

  /**
   **/
}

/**
 * Load a swoole extension.
 **/

function swoole_load_module( string $filename) {

  /**
   **/
}

/**
 * Select the file descriptions which are ready to read/write or.
 * error in the eventloop.
 **/

function swoole_select(
     array &$read_array
  ,  array &$write_array
  ,  array &$error_array
  ,  float $timeout
  ) {

  /**
   **/
}

/**
 * Set the process name.
 **/

function swoole_set_process_name(
     string $process_name
  ,  int $size = 128
  ) {

  /**
   **/
}

/**
 * Convert the Errno into error messages.
 **/

function swoole_strerror( int $errno,  int $error_type = 0) {

  /**
   **/
}

/**
 * Trigger a one time callback function in the future.
 **/

function swoole_timer_after(
     int $ms
  ,  callable $callback
  ,  mixed $param
  ) {

  /**
   **/
}

/**
 * Check if a timer callback function is existed.
 **/

function swoole_timer_exists( int $timer_id) {

  /**
   **/
}

/**
 * Trigger a timer tick callback function by time interval.
 **/

function swoole_timer_tick(
     int $ms
  ,  callable $callback
  ,  mixed $param
  ) {

  /**
   **/
}

/**
 * Get the version of Swoole.
 **/

function swoole_version() {

  /**
   **/
}

/**
 * Checks whether a string is tainted.
 **/

function is_tainted( string $string) {

  /**
   * Checks whether a string is tainted
   **/
}

/**
 * Taint a string.
 **/

function taint( string &$string,  string $strings) {

  /**
   * Make a string tainted. This is used for testing purpose only.
   **/
}

/**
 * Untaint strings.
 **/

function untaint( string &$string,  string $strings) {

  /**
   * Untaint strings
   **/
}

/**
 * Performs a tcpwrap check.
 **/

function tcpwrap_check(
     string $daemon
  ,  string $address
  ,  string $user
  ,  bool $nodns = false
  ) {

  /**
   * This function consults the /etc/hosts.allow and
   * /etc/hosts.deny files to check if access to service daemon
   * should be granted or denied for a client.
   **/
}

/**
 * ob_start callback function to repair the buffer.
 **/

function ob_tidyhandler( string $input,  int $mode) {

  /**
   * Callback function for ob_start to repair the buffer.
   **/
}

/**
 * Returns the Number of Tidy accessibility warnings encountered.
 * for specified document.
 **/

function tidy_access_count( tidy $tidy) {

  /**
   * tidy_access_count returns the number of accessibility
   * warnings found for the specified document.
   **/
}

/**
 * Returns the Number of Tidy configuration errors encountered.
 * for specified document.
 **/

function tidy_config_count( tidy $tidy) {

  /**
   * Returns the number of errors encountered in the configuration
   * of the specified tidy tidy.
   **/
}

/**
 * Returns the Number of Tidy errors encountered for specified.
 * document.
 **/

function tidy_error_count( tidy $tidy) {

  /**
   * Returns the number of Tidy errors encountered for the
   * specified document.
   **/
}

/**
 * Return a string representing the parsed tidy markup.
 **/

function tidy_get_output( tidy $tidy) {

  /**
   * Gets a string with the repaired html.
   **/
}

/**
 * Returns the Number of Tidy warnings encountered for specified.
 * document.
 **/

function tidy_warning_count( tidy $tidy) {

  /**
   * Returns the number of Tidy warnings encountered for the
   * specified document.
   **/
}

/**
 * Split given source into PHP tokens.
 **/

function token_get_all( string $code,  int $flags = 0) {

  /**
   * token_get_all parses the given code string into PHP language
   * tokens using the Zend engine's lexical scanner.
   *
   * For a list of parser tokens, see , or use token_name to
   * translate a token value into its string representation.
   **/
}

/**
 * Get the symbolic name of a given PHP token.
 **/

function token_name( int $id) {

  /**
   * token_name gets the symbolic name for a PHP id value.
   **/
}

/**
 * Vector Trigonometric ACos.
 **/

function trader_acos( array $real) {

  /**
   * Calculates the arc cosine for each value in real and returns
   * the resulting array.
   **/
}

/**
 * Chaikin A/D Line.
 **/

function trader_ad(
     array $high
  ,  array $low
  ,  array $close
  ,  array $volume
  ) {

  /**
   **/
}

/**
 * Vector Arithmetic Add.
 **/

function trader_add( array $real0,  array $real1) {

  /**
   * Calculates the vector addition of real0 to real1 and returns
   * the resulting vector.
   **/
}

/**
 * Chaikin A/D Oscillator.
 **/

function trader_adosc(
     array $high
  ,  array $low
  ,  array $close
  ,  array $volume
  ,  int $fastPeriod
  ,  int $slowPeriod
  ) {

  /**
   **/
}

/**
 * Average Directional Movement Index.
 **/

function trader_adx(
     array $high
  ,  array $low
  ,  array $close
  ,  int $timePeriod
  ) {

  /**
   **/
}

/**
 * Average Directional Movement Index Rating.
 **/

function trader_adxr(
     array $high
  ,  array $low
  ,  array $close
  ,  int $timePeriod
  ) {

  /**
   **/
}

/**
 * Absolute Price Oscillator.
 **/

function trader_apo(
     array $real
  ,  int $fastPeriod
  ,  int $slowPeriod
  ,  int $mAType
  ) {

  /**
   **/
}

/**
 * Aroon.
 **/

function trader_aroon( array $high,  array $low,  int $timePeriod) {

  /**
   **/
}

/**
 * Aroon Oscillator.
 **/

function trader_aroonosc( array $high,  array $low,  int $timePeriod) {

  /**
   **/
}

/**
 * Vector Trigonometric ASin.
 **/

function trader_asin( array $real) {

  /**
   * Calculates the arc sine for each value in real and returns
   * the resulting array.
   **/
}

/**
 * Vector Trigonometric ATan.
 **/

function trader_atan( array $real) {

  /**
   * Calculates the arc tangent for each value in real and returns
   * the resulting array.
   **/
}

/**
 * Average True Range.
 **/

function trader_atr(
     array $high
  ,  array $low
  ,  array $close
  ,  int $timePeriod
  ) {

  /**
   **/
}

/**
 * Average Price.
 **/

function trader_avgprice(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Bollinger Bands.
 **/

function trader_bbands(
     array $real
  ,  int $timePeriod
  ,  float $nbDevUp
  ,  float $nbDevDn
  ,  int $mAType
  ) {

  /**
   **/
}

/**
 * Beta.
 **/

function trader_beta( array $real0,  array $real1,  int $timePeriod) {

  /**
   **/
}

/**
 * Balance Of Power.
 **/

function trader_bop(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Commodity Channel Index.
 **/

function trader_cci(
     array $high
  ,  array $low
  ,  array $close
  ,  int $timePeriod
  ) {

  /**
   **/
}

/**
 * Two Crows.
 **/

function trader_cdl2crows(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Three Black Crows.
 **/

function trader_cdl3blackcrows(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Three Inside Up/Down.
 **/

function trader_cdl3inside(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Three-Line Strike.
 **/

function trader_cdl3linestrike(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Three Outside Up/Down.
 **/

function trader_cdl3outside(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Three Stars In The South.
 **/

function trader_cdl3starsinsouth(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Three Advancing White Soldiers.
 **/

function trader_cdl3whitesoldiers(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Abandoned Baby.
 **/

function trader_cdlabandonedbaby(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ,  float $penetration
  ) {

  /**
   **/
}

/**
 * Advance Block.
 **/

function trader_cdladvanceblock(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Belt-hold.
 **/

function trader_cdlbelthold(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Breakaway.
 **/

function trader_cdlbreakaway(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Closing Marubozu.
 **/

function trader_cdlclosingmarubozu(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Concealing Baby Swallow.
 **/

function trader_cdlconcealbabyswall(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Counterattack.
 **/

function trader_cdlcounterattack(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Dark Cloud Cover.
 **/

function trader_cdldarkcloudcover(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ,  float $penetration
  ) {

  /**
   **/
}

/**
 * Doji.
 **/

function trader_cdldoji(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Doji Star.
 **/

function trader_cdldojistar(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Dragonfly Doji.
 **/

function trader_cdldragonflydoji(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Engulfing Pattern.
 **/

function trader_cdlengulfing(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Evening Doji Star.
 **/

function trader_cdleveningdojistar(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ,  float $penetration
  ) {

  /**
   **/
}

/**
 * Evening Star.
 **/

function trader_cdleveningstar(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ,  float $penetration
  ) {

  /**
   **/
}

/**
 * Up/Down-gap side-by-side white lines.
 **/

function trader_cdlgapsidesidewhite(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Gravestone Doji.
 **/

function trader_cdlgravestonedoji(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Hammer.
 **/

function trader_cdlhammer(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Hanging Man.
 **/

function trader_cdlhangingman(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Harami Pattern.
 **/

function trader_cdlharami(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Harami Cross Pattern.
 **/

function trader_cdlharamicross(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * High-Wave Candle.
 **/

function trader_cdlhighwave(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Hikkake Pattern.
 **/

function trader_cdlhikkake(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Modified Hikkake Pattern.
 **/

function trader_cdlhikkakemod(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Homing Pigeon.
 **/

function trader_cdlhomingpigeon(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Identical Three Crows.
 **/

function trader_cdlidentical3crows(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * In-Neck Pattern.
 **/

function trader_cdlinneck(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Inverted Hammer.
 **/

function trader_cdlinvertedhammer(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Kicking.
 **/

function trader_cdlkicking(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Kicking - bull/bear determined by the longer marubozu.
 **/

function trader_cdlkickingbylength(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Ladder Bottom.
 **/

function trader_cdlladderbottom(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Long Legged Doji.
 **/

function trader_cdllongleggeddoji(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Long Line Candle.
 **/

function trader_cdllongline(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Marubozu.
 **/

function trader_cdlmarubozu(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Matching Low.
 **/

function trader_cdlmatchinglow(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Mat Hold.
 **/

function trader_cdlmathold(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ,  float $penetration
  ) {

  /**
   **/
}

/**
 * Morning Doji Star.
 **/

function trader_cdlmorningdojistar(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ,  float $penetration
  ) {

  /**
   **/
}

/**
 * Morning Star.
 **/

function trader_cdlmorningstar(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ,  float $penetration
  ) {

  /**
   **/
}

/**
 * On-Neck Pattern.
 **/

function trader_cdlonneck(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Piercing Pattern.
 **/

function trader_cdlpiercing(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Rickshaw Man.
 **/

function trader_cdlrickshawman(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Rising/Falling Three Methods.
 **/

function trader_cdlrisefall3methods(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Separating Lines.
 **/

function trader_cdlseparatinglines(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Shooting Star.
 **/

function trader_cdlshootingstar(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Short Line Candle.
 **/

function trader_cdlshortline(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Spinning Top.
 **/

function trader_cdlspinningtop(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Stalled Pattern.
 **/

function trader_cdlstalledpattern(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Stick Sandwich.
 **/

function trader_cdlsticksandwich(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Takuri (Dragonfly Doji with very long lower shadow).
 **/

function trader_cdltakuri(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Tasuki Gap.
 **/

function trader_cdltasukigap(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Thrusting Pattern.
 **/

function trader_cdlthrusting(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Tristar Pattern.
 **/

function trader_cdltristar(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Unique 3 River.
 **/

function trader_cdlunique3river(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Upside Gap Two Crows.
 **/

function trader_cdlupsidegap2crows(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Upside/Downside Gap Three Methods.
 **/

function trader_cdlxsidegap3methods(
     array $open
  ,  array $high
  ,  array $low
  ,  array $close
  ) {

  /**
   **/
}

/**
 * Vector Ceil.
 **/

function trader_ceil( array $real) {

  /**
   * Calculates the next highest integer for each value in real
   * and returns the resulting array.
   **/
}

/**
 * Chande Momentum Oscillator.
 **/

function trader_cmo( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Pearson's Correlation Coefficient (r).
 **/

function trader_correl(
     array $real0
  ,  array $real1
  ,  int $timePeriod
  ) {

  /**
   **/
}

/**
 * Vector Trigonometric Cos.
 **/

function trader_cos( array $real) {

  /**
   * Calculates the cosine for each value in real and returns the
   * resulting array.
   **/
}

/**
 * Vector Trigonometric Cosh.
 **/

function trader_cosh( array $real) {

  /**
   * Calculates the hyperbolic cosine for each value in real and
   * returns the resulting array.
   **/
}

/**
 * Double Exponential Moving Average.
 **/

function trader_dema( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Vector Arithmetic Div.
 **/

function trader_div( array $real0,  array $real1) {

  /**
   * Divides each value from real0 by the corresponding value from
   * real1 and returns the resulting array.
   **/
}

/**
 * Directional Movement Index.
 **/

function trader_dx(
     array $high
  ,  array $low
  ,  array $close
  ,  int $timePeriod
  ) {

  /**
   **/
}

/**
 * Exponential Moving Average.
 **/

function trader_ema( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Get error code.
 **/

function trader_errno() {

  /**
   * Get error code of the last operation.
   **/
}

/**
 * Vector Arithmetic Exp.
 **/

function trader_exp( array $real) {

  /**
   * Calculates e raised to the power of each value in real.
   * Returns an array with the calculated data.
   **/
}

/**
 * Vector Floor.
 **/

function trader_floor( array $real) {

  /**
   * Calculates the next lowest integer for each value in real and
   * returns the resulting array.
   **/
}

/**
 * Get compatibility mode.
 **/

function trader_get_compat() {

  /**
   * Get compatibility mode which affects the way calculations are
   * done by all the extension functions.
   **/
}

/**
 * Get unstable period.
 **/

function trader_get_unstable_period( int $functionId) {

  /**
   * Get unstable period factor for a particular function.
   **/
}

/**
 * Hilbert Transform - Dominant Cycle Period.
 **/

function trader_ht_dcperiod( array $real) {

  /**
   **/
}

/**
 * Hilbert Transform - Dominant Cycle Phase.
 **/

function trader_ht_dcphase( array $real) {

  /**
   **/
}

/**
 * Hilbert Transform - Phasor Components.
 **/

function trader_ht_phasor( array $real) {

  /**
   **/
}

/**
 * Hilbert Transform - SineWave.
 **/

function trader_ht_sine( array $real) {

  /**
   **/
}

/**
 * Hilbert Transform - Instantaneous Trendline.
 **/

function trader_ht_trendline( array $real) {

  /**
   **/
}

/**
 * Hilbert Transform - Trend vs Cycle Mode.
 **/

function trader_ht_trendmode( array $real) {

  /**
   **/
}

/**
 * Kaufman Adaptive Moving Average.
 **/

function trader_kama( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Linear Regression Angle.
 **/

function trader_linearreg_angle( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Linear Regression Intercept.
 **/

function trader_linearreg_intercept( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Linear Regression Slope.
 **/

function trader_linearreg_slope( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Linear Regression.
 **/

function trader_linearreg( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Vector Log Natural.
 **/

function trader_ln( array $real) {

  /**
   * Calculates the natural logarithm for each value in real and
   * returns the resulting array.
   **/
}

/**
 * Vector Log10.
 **/

function trader_log10( array $real) {

  /**
   * Calculates the base-10 logarithm for each value in real and
   * returns the resulting array.
   **/
}

/**
 * Moving average.
 **/

function trader_ma( array $real,  int $timePeriod,  int $mAType) {

  /**
   **/
}

/**
 * Moving Average Convergence/Divergence.
 **/

function trader_macd(
     array $real
  ,  int $fastPeriod
  ,  int $slowPeriod
  ,  int $signalPeriod
  ) {

  /**
   **/
}

/**
 * MACD with controllable MA type.
 **/

function trader_macdext(
     array $real
  ,  int $fastPeriod
  ,  int $fastMAType
  ,  int $slowPeriod
  ,  int $slowMAType
  ,  int $signalPeriod
  ,  int $signalMAType
  ) {

  /**
   **/
}

/**
 * Moving Average Convergence/Divergence Fix 12/26.
 **/

function trader_macdfix( array $real,  int $signalPeriod) {

  /**
   **/
}

/**
 * MESA Adaptive Moving Average.
 **/

function trader_mama(
     array $real
  ,  float $fastLimit
  ,  float $slowLimit
  ) {

  /**
   **/
}

/**
 * Moving average with variable period.
 **/

function trader_mavp(
     array $real
  ,  array $periods
  ,  int $minPeriod
  ,  int $maxPeriod
  ,  int $mAType
  ) {

  /**
   **/
}

/**
 * Highest value over a specified period.
 **/

function trader_max( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Index of highest value over a specified period.
 **/

function trader_maxindex( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Median Price.
 **/

function trader_medprice( array $high,  array $low) {

  /**
   **/
}

/**
 * Money Flow Index.
 **/

function trader_mfi(
     array $high
  ,  array $low
  ,  array $close
  ,  array $volume
  ,  int $timePeriod
  ) {

  /**
   **/
}

/**
 * MidPoint over period.
 **/

function trader_midpoint( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Midpoint Price over period.
 **/

function trader_midprice( array $high,  array $low,  int $timePeriod) {

  /**
   **/
}

/**
 * Lowest value over a specified period.
 **/

function trader_min( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Index of lowest value over a specified period.
 **/

function trader_minindex( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Lowest and highest values over a specified period.
 **/

function trader_minmax( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Indexes of lowest and highest values over a specified period.
 **/

function trader_minmaxindex( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Minus Directional Indicator.
 **/

function trader_minus_di(
     array $high
  ,  array $low
  ,  array $close
  ,  int $timePeriod
  ) {

  /**
   **/
}

/**
 * Minus Directional Movement.
 **/

function trader_minus_dm( array $high,  array $low,  int $timePeriod) {

  /**
   **/
}

/**
 * Momentum.
 **/

function trader_mom( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Vector Arithmetic Mult.
 **/

function trader_mult( array $real0,  array $real1) {

  /**
   * Calculates the vector dot product of real0 with real1 and
   * returns the resulting vector.
   **/
}

/**
 * Normalized Average True Range.
 **/

function trader_natr(
     array $high
  ,  array $low
  ,  array $close
  ,  int $timePeriod
  ) {

  /**
   **/
}

/**
 * On Balance Volume.
 **/

function trader_obv( array $real,  array $volume) {

  /**
   **/
}

/**
 * Plus Directional Indicator.
 **/

function trader_plus_di(
     array $high
  ,  array $low
  ,  array $close
  ,  int $timePeriod
  ) {

  /**
   **/
}

/**
 * Plus Directional Movement.
 **/

function trader_plus_dm( array $high,  array $low,  int $timePeriod) {

  /**
   **/
}

/**
 * Percentage Price Oscillator.
 **/

function trader_ppo(
     array $real
  ,  int $fastPeriod
  ,  int $slowPeriod
  ,  int $mAType
  ) {

  /**
   **/
}

/**
 * Rate of change : ((price/prevPrice)-1)*100.
 **/

function trader_roc( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Rate of change Percentage: (price-prevPrice)/prevPrice.
 **/

function trader_rocp( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Rate of change ratio: (price/prevPrice).
 **/

function trader_rocr( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Rate of change ratio 100 scale: (price/prevPrice)*100.
 **/

function trader_rocr100( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Relative Strength Index.
 **/

function trader_rsi( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Parabolic SAR.
 **/

function trader_sar(
     array $high
  ,  array $low
  ,  float $acceleration
  ,  float $maximum
  ) {

  /**
   **/
}

/**
 * Parabolic SAR - Extended.
 **/

function trader_sarext(
     array $high
  ,  array $low
  ,  float $startValue
  ,  float $offsetOnReverse
  ,  float $accelerationInitLong
  ,  float $accelerationLong
  ,  float $accelerationMaxLong
  ,  float $accelerationInitShort
  ,  float $accelerationShort
  ,  float $accelerationMaxShort
  ) {

  /**
   **/
}

/**
 * Set compatibility mode.
 **/

function trader_set_compat( int $compatId) {

  /**
   * Set compatibility mode which will affect the way calculations
   * are done by all the extension functions.
   **/
}

/**
 * Set unstable period.
 **/

function trader_set_unstable_period(
     int $functionId
  ,  int $timePeriod
  ) {

  /**
   * Influences unstable period factor for functions, which are
   * sensible to it. More information about unstable periods can be
   * found on the TA-Lib API documentation page.
   **/
}

/**
 * Vector Trigonometric Sin.
 **/

function trader_sin( array $real) {

  /**
   * Calculates the sine for each value in real and returns the
   * resulting array.
   **/
}

/**
 * Vector Trigonometric Sinh.
 **/

function trader_sinh( array $real) {

  /**
   * Calculates the hyperbolic sine for each value in real and
   * returns the resulting array.
   **/
}

/**
 * Simple Moving Average.
 **/

function trader_sma( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Vector Square Root.
 **/

function trader_sqrt( array $real) {

  /**
   * Calculates the square root of each value in real and returns
   * the resulting array.
   **/
}

/**
 * Standard Deviation.
 **/

function trader_stddev( array $real,  int $timePeriod,  float $nbDev) {

  /**
   **/
}

/**
 * Stochastic.
 **/

function trader_stoch(
     array $high
  ,  array $low
  ,  array $close
  ,  int $fastK_Period
  ,  int $slowK_Period
  ,  int $slowK_MAType
  ,  int $slowD_Period
  ,  int $slowD_MAType
  ) {

  /**
   **/
}

/**
 * Stochastic Fast.
 **/

function trader_stochf(
     array $high
  ,  array $low
  ,  array $close
  ,  int $fastK_Period
  ,  int $fastD_Period
  ,  int $fastD_MAType
  ) {

  /**
   **/
}

/**
 * Stochastic Relative Strength Index.
 **/

function trader_stochrsi(
     array $real
  ,  int $timePeriod
  ,  int $fastK_Period
  ,  int $fastD_Period
  ,  int $fastD_MAType
  ) {

  /**
   **/
}

/**
 * Vector Arithmetic Subtraction.
 **/

function trader_sub( array $real0,  array $real1) {

  /**
   * Calculates the vector subtraction of real1 from real0 and
   * returns the resulting vector.
   **/
}

/**
 * Summation.
 **/

function trader_sum( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Triple Exponential Moving Average (T3).
 **/

function trader_t3( array $real,  int $timePeriod,  float $vFactor) {

  /**
   **/
}

/**
 * Vector Trigonometric Tan.
 **/

function trader_tan( array $real) {

  /**
   * Calculates the tangent for each value in real and returns the
   * resulting array.
   **/
}

/**
 * Vector Trigonometric Tanh.
 **/

function trader_tanh( array $real) {

  /**
   * Calculates the hyperbolic tangent for each value in real and
   * returns the resulting array.
   **/
}

/**
 * Triple Exponential Moving Average.
 **/

function trader_tema( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * True Range.
 **/

function trader_trange( array $high,  array $low,  array $close) {

  /**
   **/
}

/**
 * Triangular Moving Average.
 **/

function trader_trima( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA.
 **/

function trader_trix( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Time Series Forecast.
 **/

function trader_tsf( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Typical Price.
 **/

function trader_typprice( array $high,  array $low,  array $close) {

  /**
   **/
}

/**
 * Ultimate Oscillator.
 **/

function trader_ultosc(
     array $high
  ,  array $low
  ,  array $close
  ,  int $timePeriod1
  ,  int $timePeriod2
  ,  int $timePeriod3
  ) {

  /**
   **/
}

/**
 * Variance.
 **/

function trader_var( array $real,  int $timePeriod,  float $nbDev) {

  /**
   **/
}

/**
 * Weighted Close Price.
 **/

function trader_wclprice( array $high,  array $low,  array $close) {

  /**
   **/
}

/**
 * Williams' %R.
 **/

function trader_willr(
     array $high
  ,  array $low
  ,  array $close
  ,  int $timePeriod
  ) {

  /**
   **/
}

/**
 * Weighted Moving Average.
 **/

function trader_wma( array $real,  int $timePeriod) {

  /**
   **/
}

/**
 * Retrieve Font Families.
 **/

function UI\Draw\Text\Font\fontFamilies() {

  /**
   * Returns an array of valid font families for the current
   * system
   **/
}

/**
 * Quit UI Loop.
 **/

function UI\quit() {

  /**
   * Shall cause the main loop to be exited
   **/
}

/**
 * Enter UI Loop.
 **/

function UI\run( int $flags) {

  /**
   * Shall cause PHP to enter into the main loop, by default
   * control will not be returned to the caller
   **/
}

/**
 * Toggle autocommit behaviour.
 **/

function odbc_autocommit( resource $odbc, $enable = null) {

  /**
   * Toggles autocommit behaviour.
   *
   * By default, auto-commit is on for a connection. Disabling
   * auto-commit is equivalent with starting a transaction.
   **/
}

/**
 * Handling of binary column data.
 **/

function odbc_binmode( resource $statement,  int $mode) {

  /**
   * Controls handling of binary column data. ODBC SQL types
   * affected are BINARY, VARBINARY, and LONGVARBINARY. The default
   * mode can be set using the uodbc.defaultbinmode &php.ini;
   * directive.
   *
   * When binary SQL data is converted to character C data
   * (ODBC_BINMODE_CONVERT), each byte (8 bits) of source data is
   * represented as two ASCII characters. These characters are the
   * ASCII character representation of the number in its
   * hexadecimal form. For example, a binary 00000001 is converted
   * to "01" and a binary 11111111 is converted to "FF".
   *
   * While the handling of BINARY and VARBINARY columns only
   * depend on the binmode, the handling of LONGVARBINARY columns
   * also depends on the longreadlen as well: LONGVARBINARY
   * handling binmode longreadlen result ODBC_BINMODE_PASSTHRU 0
   * passthru ODBC_BINMODE_RETURN 0 passthru ODBC_BINMODE_CONVERT 0
   * passthru ODBC_BINMODE_PASSTHRU >0 passthru ODBC_BINMODE_RETURN
   * >0 return as is ODBC_BINMODE_CONVERT >0 return as char
   *
   * If odbc_fetch_into is used, passthru means that an empty
   * string is returned for these columns. If odbc_result is used,
   * passthru means that the data are sent directly to the client
   * (i.e. printed).
   **/
}

/**
 * Close all ODBC connections.
 **/

function odbc_close_all() {

  /**
   * odbc_close_all will close down all connections to database
   * server(s).
   **/
}

/**
 * Close an ODBC connection.
 **/

function odbc_close( resource $odbc) {

  /**
   * Closes down the connection to the database server.
   **/
}

/**
 * Lists columns and associated privileges for the given table.
 **/

function odbc_columnprivileges(
     resource $odbc
  , $catalog
  ,  string $schema
  ,  string $table
  ,  string $column
  ) {

  /**
   * Lists columns and associated privileges for the given table.
   **/
}

/**
 * Lists the column names in specified tables.
 **/

function odbc_columns(
     resource $odbc
  , $catalog = null
  , $schema = null
  , $table = null
  , $column = null
  ) {

  /**
   * Lists all columns in the requested range.
   **/
}

/**
 * Commit an ODBC transaction.
 **/

function odbc_commit( resource $odbc) {

  /**
   * Commits all pending transactions on the connection.
   **/
}

/**
 * Connect to a datasource.
 **/

function odbc_connect(
     string $dsn
  ,  string $user
  ,  string $password
  ,  int $cursor_option = SQL_CUR_USE_DRIVER
  ) {

  /**
   **/
}

/**
 * Determines if an ODBC connection string value is quoted.
 **/

function odbc_connection_string_is_quoted( string $str) {

  /**
   * Determines if a string is properly quoted for an ODBC
   * connection string value. ODBC connection string quoting is
   * performed using curly braces, and ending braces within a
   * string must be escaped through repeating them twice, similar
   * to SQL quoting.
   **/
}

/**
 * Quotes an ODBC connection string value.
 **/

function odbc_connection_string_quote( string $str) {

  /**
   * Quotes a value for a connection string, according to ODBC
   * rules. That is, it will be surrounded by quotes, and any
   * ending curly braces will be escaped. This should be done for
   * any connection string values that come from user input. Not
   * doing so can lead to issues with parsing the connection
   * string, or values being injected into the connection string.
   *
   * Note that this function does not check if the string is
   * already quoted, nor if the string needs quoting. For that,
   * call odbc_connection_string_is_quoted and
   * odbc_connection_string_should_quote.
   **/
}

/**
 * Determines if an ODBC connection string value should be quoted.
 **/

function odbc_connection_string_should_quote( string $str) {

  /**
   * Determines if a string needs to be quoted for an ODBC
   * connection string value; that is, if it contains special
   * characters.
   *
   * Note that this does not check if the string is already
   * quoted; an already quoted string will contain characters that
   * will make this function return true. You should call
   * odbc_connection_string_is_quoted to check.
   **/
}

/**
 * Get cursorname.
 **/

function odbc_cursor( resource $statement) {

  /**
   * Gets the cursorname for the given result_id.
   **/
}

/**
 * Returns information about available DSNs.
 **/

function odbc_data_source( resource $odbc,  int $fetch_type) {

  /**
   * This function will return the list of available DSN (after
   * calling it several times).
   **/
}

/**
 * &Alias; odbc_exec.
 **/

function () {

  /**
   * &info.function.alias; odbc_exec.
   **/
}

/**
 * Get the last error code.
 **/

function odbc_error($odbc = null) {

  /**
   **/
}

/**
 * Get the last error message.
 **/

function odbc_errormsg($odbc = null) {

  /**
   **/
}

/**
 * Directly execute an SQL statement.
 **/

function odbc_exec( resource $odbc,  string $query) {

  /**
   * Sends an SQL statement to the database server.
   **/
}

/**
 * Execute a prepared statement.
 **/

function odbc_execute( resource $statement,  array $params = []) {

  /**
   * Executes a statement prepared with odbc_prepare.
   **/
}

/**
 * Fetch a result row as an associative array.
 **/

function odbc_fetch_array( resource $statement,  int $row = -1) {

  /**
   * Fetch an associative array from an ODBC query.
   **/
}

/**
 * Fetch one result row into array.
 **/

function odbc_fetch_into(
     resource $statement
  ,  array &$array
  ,  int $row = 0
  ) {

  /**
   * Fetch one result row into array.
   **/
}

/**
 * Fetch a result row as an object.
 **/

function odbc_fetch_object( resource $statement,  int $row = -1) {

  /**
   * Fetch an object from an ODBC query.
   **/
}

/**
 * Fetch a row.
 **/

function odbc_fetch_row( resource $statement, $row = null) {

  /**
   * Fetches a row of the data that was returned by odbc_do or
   * odbc_exec. After odbc_fetch_row is called, the fields of that
   * row can be accessed with odbc_result.
   **/
}

/**
 * Get the length (precision) of a field.
 **/

function odbc_field_len( resource $statement,  int $field) {

  /**
   * Gets the length of the field referenced by number in the
   * given result identifier.
   **/
}

/**
 * Get the columnname.
 **/

function odbc_field_name( resource $statement,  int $field) {

  /**
   * Gets the name of the field occupying the given column number
   * in the given result identifier.
   **/
}

/**
 * Return column number.
 **/

function odbc_field_num( resource $statement,  string $field) {

  /**
   * Gets the number of the column slot that corresponds to the
   * named field in the given result identifier.
   **/
}

/**
 * &Alias; odbc_field_len.
 **/

function () {

  /**
   * &info.function.alias; odbc_field_len.
   **/
}

/**
 * Get the scale of a field.
 **/

function odbc_field_scale( resource $statement,  int $field) {

  /**
   * Gets the scale of the field referenced by number in the given
   * result identifier.
   **/
}

/**
 * Datatype of a field.
 **/

function odbc_field_type( resource $statement,  int $field) {

  /**
   * Gets the SQL type of the field referenced by number in the
   * given result identifier.
   **/
}

/**
 * Retrieves a list of foreign keys.
 **/

function odbc_foreignkeys(
     resource $odbc
  , $pk_catalog
  ,  string $pk_schema
  ,  string $pk_table
  ,  string $fk_catalog
  ,  string $fk_schema
  ,  string $fk_table
  ) {

  /**
   * Retrieves a list of foreign keys in the specified table or a
   * list of foreign keys in other tables that refer to the primary
   * key in the specified table
   **/
}

/**
 * Free resources associated with a result.
 **/

function odbc_free_result( resource $statement) {

  /**
   * Free resources associated with a result.
   *
   * odbc_free_result only needs to be called if you are worried
   * about using too much memory while your script is running. All
   * result memory will automatically be freed when the script is
   * finished.
   **/
}

/**
 * Retrieves information about data types supported by the data.
 * source.
 **/

function odbc_gettypeinfo( resource $odbc,  int $data_type = 0) {

  /**
   * Retrieves information about data types supported by the data
   * source.
   **/
}

/**
 * Handling of LONG columns.
 **/

function odbc_longreadlen( resource $statement,  int $length) {

  /**
   * Controls handling of LONG, LONGVARCHAR and LONGVARBINARY
   * columns. The default length can be set using the
   * uodbc.defaultlrl &php.ini; directive.
   **/
}

/**
 * Checks if multiple results are available.
 **/

function odbc_next_result( resource $statement) {

  /**
   * Checks if there are more result sets available as well as
   * allowing access to the next result set via odbc_fetch_array,
   * odbc_fetch_row, odbc_result, etc.
   **/
}

/**
 * Number of columns in a result.
 **/

function odbc_num_fields( resource $statement) {

  /**
   * Gets the number of fields (columns) in an ODBC result.
   **/
}

/**
 * Number of rows in a result.
 **/

function odbc_num_rows( resource $statement) {

  /**
   * Gets the number of rows in a result. For INSERT, UPDATE and
   * DELETE statements odbc_num_rows returns the number of rows
   * affected. For a SELECT clause this can be the number of rows
   * available.
   **/
}

/**
 * Open a persistent database connection.
 **/

function odbc_pconnect(
     string $dsn
  ,  string $user
  ,  string $password
  ,  int $cursor_option = SQL_CUR_USE_DRIVER
  ) {

  /**
   * Opens a persistent database connection.
   *
   * This function is much like odbc_connect, except that the
   * connection is not really closed when the script has finished.
   * Future requests for a connection with the same dsn, user,
   * password combination (via odbc_connect and odbc_pconnect) can
   * reuse the persistent connection.
   **/
}

/**
 * Prepares a statement for execution.
 **/

function odbc_prepare( resource $odbc,  string $query) {

  /**
   * Prepares a statement for execution. The result identifier can
   * be used later to execute the statement with odbc_execute.
   *
   * Some databases (such as IBM DB2, MS SQL Server, and Oracle)
   * support stored procedures that accept parameters of type IN,
   * INOUT, and OUT as defined by the ODBC specification. However,
   * the Unified ODBC driver currently only supports parameters of
   * type IN to stored procedures.
   **/
}

/**
 * Gets the primary keys for a table.
 **/

function odbc_primarykeys(
     resource $odbc
  , $catalog
  ,  string $schema
  ,  string $table
  ) {

  /**
   * Returns a result identifier that can be used to fetch the
   * column names that comprise the primary key for a table.
   **/
}

/**
 * Retrieve information about parameters to procedures.
 **/

function odbc_procedurecolumns(
     resource $odbc
  , $catalog = null
  , $schema = null
  , $procedure = null
  , $column = null
  ) {

  /**
   * Retrieve information about parameters to procedures.
   **/
}

/**
 * Get the list of procedures stored in a specific data source.
 **/

function odbc_procedures(
     resource $odbc
  , $catalog = null
  , $schema = null
  , $procedure = null
  ) {

  /**
   * Lists all procedures in the requested range.
   **/
}

/**
 * Print result as HTML table.
 **/

function odbc_result_all( resource $statement,  string $format = "") {

  /**
   * Prints all rows from a result identifier produced by
   * odbc_exec. The result is printed in HTML table format. The
   * data is not escaped.
   *
   * This function is not supposed to be used in production
   * environments; it is merely meant for development purposes, to
   * get a result set quickly rendered.
   **/
}

/**
 * Get result data.
 **/

function odbc_result( resource $statement, $field) {

  /**
   * Get result data
   **/
}

/**
 * Rollback a transaction.
 **/

function odbc_rollback( resource $odbc) {

  /**
   * Rolls back all pending statements on the connection.
   **/
}

/**
 * Adjust ODBC settings.
 **/

function odbc_setoption(
     resource $odbc
  ,  int $which
  ,  int $option
  ,  int $value
  ) {

  /**
   * This function allows fiddling with the ODBC options for a
   * particular connection or query result. It was written to help
   * find work around to problems in quirky ODBC drivers. You
   * should probably only use this function if you are an ODBC
   * programmer and understand the effects the various options will
   * have. You will certainly need a good ODBC reference to explain
   * all the different options and values that can be used.
   * Different driver versions support different options.
   *
   * Because the effects may vary depending on the ODBC driver,
   * use of this function in scripts to be made publicly available
   * is strongly discouraged. Also, some ODBC options are not
   * available to this function because they must be set before the
   * connection is established or the query is prepared. However,
   * if on a particular job it can make PHP work so your boss
   * doesn't tell you to use a commercial product, that's all that
   * really matters.
   **/
}

/**
 * Retrieves special columns.
 **/

function odbc_specialcolumns(
     resource $odbc
  ,  int $type
  , $catalog
  ,  string $schema
  ,  string $table
  ,  int $scope
  ,  int $nullable
  ) {

  /**
   * Retrieves either the optimal set of columns that uniquely
   * identifies a row in the table, or columns that are
   * automatically updated when any value in the row is updated by
   * a transaction.
   **/
}

/**
 * Retrieve statistics about a table.
 **/

function odbc_statistics(
     resource $odbc
  , $catalog
  ,  string $schema
  ,  string $table
  ,  int $unique
  ,  int $accuracy
  ) {

  /**
   * Get statistics about a table and its indexes.
   **/
}

/**
 * Lists tables and the privileges associated with each table.
 **/

function odbc_tableprivileges(
     resource $odbc
  , $catalog
  ,  string $schema
  ,  string $table
  ) {

  /**
   * Lists tables in the requested range and the privileges
   * associated with each table.
   **/
}

/**
 * Get the list of table names stored in a specific data source.
 **/

function odbc_tables(
     resource $odbc
  , $catalog = null
  , $schema = null
  , $table = null
  , $types = null
  ) {

  /**
   * Lists all tables in the requested range.
   *
   * To support enumeration of qualifiers, owners, and table
   * types, the following special semantics for the catalog,
   * schema, table, and table_type are available: If catalog is a
   * single percent character (%) and schema and table are empty
   * strings, then the result set contains a list of valid
   * qualifiers for the data source. (All columns except the
   * TABLE_QUALIFIER column contain NULLs.) If schema is a single
   * percent character (%) and catalog and table are empty strings,
   * then the result set contains a list of valid owners for the
   * data source. (All columns except the TABLE_OWNER column
   * contain NULLs.) If table_type is a single percent character
   * (%) and catalog, schema and table are empty strings, then the
   * result set contains a list of valid table types for the data
   * source. (All columns except the TABLE_TYPE column contain
   * NULLs.)
   **/
}

/**
 * Adds non-existent function or method.
 **/

function uopz_add_function(
     string $function
  ,  Closure $handler
  ,  int &$flags = ZEND_ACC_PUBLIC
  ) {

  /**
   * Adds a non-existent function or method.
   **/
}

/**
 * Allows control over disabled exit opcode.
 **/

function uopz_allow_exit() {

  /**
   * By default uopz disables the exit opcode, so exit calls are
   * practically ignored. uopz_allow_exit allows to control this
   * behavior.
   **/
}

/**
 * Backup a function.
 **/

function uopz_backup( string $function) {

  /**
   * Backup a function at runtime, to be restored on shutdown
   **/
}

/**
 * Compose a class.
 **/

function uopz_compose(
     string $name
  ,  array $classes
  ,  array $methods
  ,  array $properties
  ,  int $flags
  ) {

  /**
   * Creates a new class of the given name that implements,
   * extends, or uses all of the provided classes
   **/
}

/**
 * Copy a function.
 **/

function uopz_copy( string $function) {

  /**
   * Copy a function by name
   **/
}

/**
 * Deletes previously added function or method.
 **/

function uopz_del_function( string $function) {

  /**
   * Deletes a previously added function or method.
   **/
}

/**
 * Delete a function.
 **/

function uopz_delete( string $function) {

  /**
   * Deletes a function or method
   **/
}

/**
 * Extend a class at runtime.
 **/

function uopz_extend( string $class,  string $parent) {

  /**
   * Makes class extend parent
   **/
}

/**
 * Get or set flags on function or class.
 **/

function uopz_flags( string $function,  int $flags = PHP_INT_MAX) {

  /**
   * Get or set the flags on a class or function entry at runtime
   **/
}

/**
 * Creates a function at runtime.
 **/

function uopz_function(
     string $function
  ,  Closure $handler
  ,  int $modifiers
  ) {

  /**
   * Creates a function at runtime
   **/
}

/**
 * Retrieve the last set exit status.
 **/

function uopz_get_exit_status() {

  /**
   * Retrieves the last set exit status, i.e. the value passed to
   * exit.
   **/
}

/**
 * Gets previously set hook on function or method.
 **/

function uopz_get_hook( string $function) {

  /**
   * Gets the previously set hook on a function or method.
   **/
}

/**
 * Get the current mock for a class.
 **/

function uopz_get_mock( string $class) {

  /**
   * Returns the current mock for class.
   **/
}

/**
 * Gets value of class or instance property.
 **/

function uopz_get_property( string $class,  string $property) {

  /**
   * Gets the value of a static class property, if class is given,
   * or the value of an instance property, if instance is given.
   **/
}

/**
 * Gets a previous set return value for a function.
 **/

function uopz_get_return( string $function) {

  /**
   * Gets the return value of the function previously set by
   * uopz_set_return.
   **/
}

/**
 * Gets the static variables from function or method scope.
 **/

function uopz_get_static( string $class,  string $function) {

  /**
   * Gets the static variables from function or method scope.
   **/
}

/**
 * Implements an interface at runtime.
 **/

function uopz_implement( string $class,  string $interface) {

  /**
   * Makes class implement interface
   **/
}

/**
 * Overload a VM opcode.
 **/

function uopz_overload( int $opcode,  Callable $callable) {

  /**
   * Overloads the specified opcode with the user defined function
   **/
}

/**
 * Redefine a constant.
 **/

function uopz_redefine( string $constant,  mixed $value) {

  /**
   * Redefines the given constant as value
   **/
}

/**
 * Rename a function at runtime.
 **/

function uopz_rename( string $function,  string $rename) {

  /**
   * Renames function to rename
   *
   * If both functions exist, this effectively swaps their names
   **/
}

/**
 * Restore a previously backed up function.
 **/

function uopz_restore( string $function) {

  /**
   * Restore a previously backed up function
   **/
}

/**
 * Sets hook to execute when entering a function or method.
 **/

function uopz_set_hook( string $function,  Closure $hook) {

  /**
   * Sets a hook to execute when entering a function or method.
   **/
}

/**
 * Use mock instead of class for new objects.
 **/

function uopz_set_mock( string $class,  mixed $mock) {

  /**
   * If mock is a string containing the name of a class then it
   * will be instantiated instead of class. mock can also be an
   * object.
   *
   * Only dynamic access to properties and methods will use the
   * mock object. Static access still uses the original class. See
   * example below.
   **/
}

/**
 * Sets value of existing class or instance property.
 **/

function uopz_set_property(
     string $class
  ,  string $property
  ,  mixed $value
  ) {

  /**
   * Sets the value of an existing static class property, if class
   * is given, or the value of an instance property (regardless
   * whether the instance property already exists), if instance is
   * given.
   **/
}

/**
 * Provide a return value for an existing function.
 **/

function uopz_set_return(
     string $function
  ,  mixed $value
  ,  bool $execute = false
  ) {

  /**
   * Sets the return value of the function to value. If value is a
   * Closure and execute is set, the Closure will be executed in
   * place of the original function. It is possible to call the
   * original function from the Closure.
   *
   * This function replaces uopz_rename.
   **/
}

/**
 * Undefine a constant.
 **/

function uopz_undefine( string $constant) {

  /**
   * Removes the constant at runtime
   **/
}

/**
 * Removes previously set hook on function or method.
 **/

function uopz_unset_hook( string $function) {

  /**
   * Removes the previously set hook on a function or method.
   **/
}

/**
 * Unset previously set mock.
 **/

function uopz_unset_mock( string $class) {

  /**
   * Unsets the previously set mock for class.
   **/
}

/**
 * Unsets a previously set return value for a function.
 **/

function uopz_unset_return( string $function) {

  /**
   * Unsets the return value of the function previously set by
   * uopz_set_return.
   **/
}

/**
 * Sets the static variables in function or method scope.
 **/

function uopz_set_static() {

  /**
   * Sets the static variables in function or method scope.
   **/
}

/**
 * Decodes data encoded with MIME base64.
 **/

function base64_decode( string $string,  bool $strict = false) {

  /**
   * Decodes a base64 encoded string.
   **/
}

/**
 * Encodes data with MIME base64.
 **/

function base64_encode( string $string) {

  /**
   * Encodes the given string with base64.
   *
   * This encoding is designed to make binary data survive
   * transport through transport layers that are not 8-bit clean,
   * such as mail bodies.
   *
   * Base64-encoded data takes about 33% more space than the
   * original data.
   **/
}

/**
 * Fetches all the headers sent by the server in response to an.
 * HTTP request.
 **/

function get_headers(
     string $url
  ,  bool $associative = false
  , $context = null
  ) {

  /**
   * get_headers returns an array with the headers sent by the
   * server in response to a HTTP request.
   **/
}

/**
 * Extracts all meta tag content attributes from a file and.
 * returns an array.
 **/

function get_meta_tags(
     string $filename
  ,  bool $use_include_path = false
  ) {

  /**
   * Opens filename and parses it line by line for <meta> tags in
   * the file. The parsing stops at </head>.
   **/
}

/**
 * Generate URL-encoded query string.
 **/

function http_build_query(
    $data
  ,  string $numeric_prefix = ""
  , $arg_separator = null
  ,  int $encoding_type = PHP_QUERY_RFC1738
  ) {

  /**
   * Generates a URL-encoded query string from the associative (or
   * indexed) array provided.
   **/
}

/**
 * Parse a URL and return its components.
 **/

function parse_url( string $url,  int $component = -1) {

  /**
   * This function parses a URL and returns an associative array
   * containing any of the various components of the URL that are
   * present. The values of the array elements are not URL decoded.
   *
   * This function is not meant to validate the given URL, it only
   * breaks it up into the parts listed below. Partial and invalid
   * URLs are also accepted, parse_url tries its best to parse them
   * correctly.
   **/
}

/**
 * Decode URL-encoded strings.
 **/

function rawurldecode( string $string) {

  /**
   * Returns a string in which the sequences with percent (%)
   * signs followed by two hex digits have been replaced with
   * literal characters.
   **/
}

/**
 * URL-encode according to RFC 3986.
 **/

function rawurlencode( string $string) {

  /**
   * Encodes the given string according to RFC 3986.
   **/
}

/**
 * Decodes URL-encoded string.
 **/

function urldecode( string $string) {

  /**
   * Decodes any %## encoding in the given string. Plus symbols
   * ('+') are decoded to a space character.
   **/
}

/**
 * URL-encodes string.
 **/

function urlencode( string $string) {

  /**
   * This function is convenient when encoding a string to be used
   * in a query part of a URL, as a convenient way to pass
   * variables to the next page.
   **/
}

/**
 * Get the boolean value of a variable.
 **/

function boolval( mixed $value) {

  /**
   * Returns the bool value of value.
   **/
}

/**
 * Dumps a string representation of an internal zval structure to.
 * output.
 **/

function debug_zval_dump( mixed $value,  mixed $values) {

  /**
   * Dumps a string representation of an internal zval (Zend
   * value) structure to output. This is mostly useful for
   * understanding or debugging implementation details of the Zend
   * Engine or PHP extensions.
   **/
}

/**
 * &Alias; floatval.
 **/

function () {

  /**
   **/
}

/**
 * Determine whether a variable is empty.
 **/

function empty( mixed $var) {

  /**
   * Determine whether a variable is considered to be empty. A
   * variable is considered empty if it does not exist or if its
   * value equals &false;. empty does not generate a warning if the
   * variable does not exist.
   **/
}

/**
 * Get float value of a variable.
 **/

function floatval( mixed $value) {

  /**
   * Gets the float value of value.
   **/
}

/**
 * Gets the type name of a variable in a way that is suitable for.
 * debugging.
 **/

function get_debug_type( mixed $value) {

  /**
   * Returns the resolved name of the PHP variable value. This
   * function will resolve objects to their class name, resources
   * to their resource type name, and scalar values to their common
   * name as would be used in type declarations.
   *
   * This function differs from gettype in that it returns type
   * names that are more consistent with actual usage, rather than
   * those present for historical reasons.
   **/
}

/**
 * Returns an array of all defined variables.
 **/

function get_defined_vars() {

  /**
   * This function returns a multidimensional array containing a
   * list of all defined variables, be them environment, server or
   * user-defined variables, within the scope that get_defined_vars
   * is called.
   **/
}

/**
 * Returns an integer identifier for the given resource.
 **/

function get_resource_id( resource $resource) {

  /**
   * This function provides a type-safe way for generating the
   * integer identifier for a resource.
   **/
}

/**
 * Returns the resource type.
 **/

function get_resource_type( resource $resource) {

  /**
   * This function gets the type of the given resource.
   **/
}

/**
 * Get the type of a variable.
 **/

function gettype( mixed $value) {

  /**
   * Returns the type of the PHP variable value. For type
   * checking, use is_* functions.
   **/
}

/**
 * Get the integer value of a variable.
 **/

function intval( mixed $value,  int $base = 10) {

  /**
   * Returns the int value of value, using the specified base for
   * the conversion (the default is base 10). intval should not be
   * used on objects, as doing so will emit an E_WARNING level
   * error and return 1.
   **/
}

/**
 * Finds whether a variable is an array.
 **/

function is_array( mixed $value) {

  /**
   * Finds whether the given variable is an array.
   **/
}

/**
 * Finds out whether a variable is a boolean.
 **/

function is_bool( mixed $value) {

  /**
   * Finds whether the given variable is a boolean.
   **/
}

/**
 * Verify that a value can be called as a function from the.
 * current scope..
 **/

function is_callable(
     mixed $value
  ,  bool $syntax_only = false
  ,  string &$callable_name = null
  ) {

  /**
   * Verify that a value is a callable.
   **/
}

/**
 * Verify that the contents of a variable is a countable value.
 **/

function is_countable( mixed $value) {

  /**
   * Verify that the contents of a variable is an array or an
   * object implementing Countable
   **/
}

/**
 * &Alias; is_float.
 **/

function () {

  /**
   **/
}

/**
 * Finds whether the type of a variable is float.
 **/

function is_float( mixed $value) {

  /**
   * Finds whether the type of the given variable is float.
   *
   * To test if a variable is a number or a numeric string (such
   * as form input, which is always a string), you must use
   * is_numeric.
   **/
}

/**
 * Find whether the type of a variable is integer.
 **/

function is_int( mixed $value) {

  /**
   * Finds whether the type of the given variable is integer.
   *
   * To test if a variable is a number or a numeric string (such
   * as form input, which is always a string), you must use
   * is_numeric.
   **/
}

/**
 * &Alias; is_int.
 **/

function () {

  /**
   **/
}

/**
 * Verify that the contents of a variable is an iterable value.
 **/

function is_iterable( mixed $value) {

  /**
   * Verify that the contents of a variable is accepted by the
   * iterable pseudo-type, i.e. that it is either an array or an
   * object implementing Traversable
   **/
}

/**
 * &Alias; is_int.
 **/

function () {

  /**
   **/
}

/**
 * Finds whether a variable is &null;.
 **/

function is_null( mixed $value) {

  /**
   * Finds whether the given variable is &null;.
   **/
}

/**
 * Finds whether a variable is a number or a numeric string.
 **/

function is_numeric( mixed $value) {

  /**
   * Determines if the given variable is a number or a numeric
   * string.
   **/
}

/**
 * Finds whether a variable is an object.
 **/

function is_object( mixed $value) {

  /**
   * Finds whether the given variable is an object.
   **/
}

/**
 * &Alias; is_float.
 **/

function () {

  /**
   **/
}

/**
 * Finds whether a variable is a resource.
 **/

function is_resource( mixed $value) {

  /**
   * Finds whether the given variable is a resource.
   **/
}

/**
 * Finds whether a variable is a scalar.
 **/

function is_scalar( mixed $value) {

  /**
   * Finds whether the given variable is a scalar.
   *
   * Scalar variables are those containing an int, float, string
   * or bool. Types array, object, resource and null are not
   * scalar.
   *
   * is_scalar does not consider resource type values to be scalar
   * as resources are abstract datatypes which are currently based
   * on integers. This implementation detail should not be relied
   * upon, as it may change.
   *
   * is_scalar does not consider NULL to be scalar.
   **/
}

/**
 * Find whether the type of a variable is string.
 **/

function is_string( mixed $value) {

  /**
   * Finds whether the type of the given variable is string.
   **/
}

/**
 * Determine if a variable is declared and is different than.
 * &null;.
 **/

function isset( mixed $var,  mixed $vars) {

  /**
   * Determine if a variable is considered set, this means if a
   * variable is declared and is different than &null;.
   *
   * If a variable has been unset with the unset function, it is
   * no longer considered to be set.
   *
   * isset will return &false; when checking a variable that has
   * been assigned to &null;. Also note that a null character
   * ("\0") is not equivalent to the PHP &null; constant.
   *
   * If multiple parameters are supplied then isset will return
   * &true; only if all of the parameters are considered set.
   * Evaluation goes from left to right and stops as soon as an
   * unset variable is encountered.
   **/
}

/**
 * Prints human-readable information about a variable.
 **/

function print_r( mixed $value,  bool $return = false) {

  /**
   * print_r displays information about a variable in a way that's
   * readable by humans.
   *
   * print_r, var_dump and var_export will also show protected and
   * private properties of objects. Static class members will not
   * be shown.
   **/
}

/**
 * Generates a storable representation of a value.
 **/

function serialize( mixed $value) {

  /**
   * Generates a storable representation of a value.
   *
   * This is useful for storing or passing PHP values around
   * without losing their type and structure.
   *
   * To make the serialized string into a PHP value again, use
   * unserialize.
   **/
}

/**
 * Set the type of a variable.
 **/

function settype( mixed &$var,  string $type) {

  /**
   * Set the type of variable var to type.
   **/
}

/**
 * Get string value of a variable.
 **/

function strval( mixed $value) {

  /**
   **/
}

/**
 * Creates a PHP value from a stored representation.
 **/

function unserialize( string $data,  array $options = []) {

  /**
   * Do not pass untrusted user input to unserialize regardless of
   * the options value of allowed_classes. Unserialization can
   * result in code being loaded and executed due to object
   * instantiation and autoloading, and a malicious user may be
   * able to exploit this. Use a safe, standard data interchange
   * format such as JSON (via json_decode and json_encode) if you
   * need to pass serialized data to the user.
   *
   * If you need to unserialize externally-stored serialized data,
   * consider using hash_hmac for data validation. Make sure data
   * is not modified by anyone but you.
   **/
}

/**
 * Unset a given variable.
 **/

function unset( mixed $var,  mixed $vars) {

  /**
   * unset destroys the specified variables.
   *
   * The behavior of unset inside of a function can vary depending
   * on what type of variable you are attempting to destroy.
   *
   * If a globalized variable is unset inside of a function, only
   * the local variable is destroyed. The variable in the calling
   * environment will retain the same value as before unset was
   * called. ]]>
   *
   *
   * To unset a global variable inside of a function, then use the
   * $GLOBALS array to do so: ]]>
   *
   * If a variable that is PASSED BY REFERENCE is unset inside of
   * a function, only the local variable is destroyed. The variable
   * in the calling environment will retain the same value as
   * before unset was called. ]]>
   *
   *
   * If a static variable is unset inside of a function, unset
   * destroys the variable only in the context of the rest of a
   * function. Following calls will restore the previous value of a
   * variable. ]]>
   *
   **/
}

/**
 * Dumps information about a variable.
 **/

function var_dump( mixed $value,  mixed $values) {

  /**
   **/
}

/**
 * Outputs or returns a parsable string representation of a.
 * variable.
 **/

function var_export( mixed $value,  bool $return = false) {

  /**
   **/
}

/**
 * Returns a short, readable, parsable string representation of a.
 * variable.
 **/

function var_representation( mixed $value,  int $flags = 0) {

  /**
   **/
}

/**
 * Add variables to a WDDX packet with the specified ID.
 **/

function wddx_add_vars(
     resource $packet_id
  ,  mixed $var_name
  ,  mixed $var_names
  ) {

  /**
   * Serializes the passed variables and add the result to the
   * given packet.
   **/
}

/**
 * Unserializes a WDDX packet.
 **/

function wddx_deserialize( string $packet) {

  /**
   * Unserializes a WDDX packet.
   *
   * Do not pass untrusted user input to wddx_deserialize.
   * Unserialization can result in code being loaded and executed
   * due to object instantiation and autoloading, and a malicious
   * user may be able to exploit this. Use a safe, standard data
   * interchange format such as JSON (via json_decode and
   * json_encode) if you need to pass serialized data to the user.
   **/
}

/**
 * Ends a WDDX packet with the specified ID.
 **/

function wddx_packet_end( resource $packet_id) {

  /**
   * Ends and returns the given WDDX packet.
   **/
}

/**
 * Starts a new WDDX packet with structure inside it.
 **/

function wddx_packet_start( string $comment) {

  /**
   * Start a new WDDX packet for incremental addition of
   * variables. It automatically creates a structure definition
   * inside the packet to contain the variables.
   **/
}

/**
 * Serialize a single value into a WDDX packet.
 **/

function wddx_serialize_value( mixed $var,  string $comment) {

  /**
   * Creates a WDDX packet from a single given value.
   **/
}

/**
 * Serialize variables into a WDDX packet.
 **/

function wddx_serialize_vars( mixed $var_name,  mixed $var_names) {

  /**
   * Creates a WDDX packet with a structure that contains the
   * serialized representation of the passed variables.
   **/
}

/**
 * Resumes a paused service.
 **/

function win32_continue_service(
     string $servicename
  ,  string $machine
  ) {

  /**
   * Resumes a paused, named service. Requires administrative
   * privileges or an account with appropriate rights set in the
   * service's ACL.
   **/
}

/**
 * Creates a new service entry in the SCM database.
 **/

function win32_create_service( array $details,  string $machine) {

  /**
   * Attempts to add a service into the SCM database.
   * Administrative privileges are required for this to succeed.
   **/
}

/**
 * Deletes a service entry from the SCM database.
 **/

function win32_delete_service( string $servicename,  string $machine) {

  /**
   * Attempts to delete a service from the SCM database.
   * Administrative privileges are required for this to succeed.
   *
   * This function really just marks the service for deletion. If
   * other processes (such as the Services Applet) are open, then
   * the deletion will be deferred until those applications are
   * closed. If a service is marked for deletion, further attempts
   * to delete it will fail, and attempts to create a new service
   * with that name will also fail.
   **/
}

/**
 * Returns the last control message that was sent to this service.
 **/

function win32_get_last_control_message() {

  /**
   * Returns the control code that was last sent to this service
   * process. When running as a service you should periodically
   * check this to determine if your service needs to stop running.
   *
   * Since version 0.2.0, this function work only in "cli" SAPI.
   * On other SAPI this function is disabled.
   **/
}

/**
 * Pauses a service.
 **/

function win32_pause_service( string $servicename,  string $machine) {

  /**
   * Pauses a named service. Requires administrative privileges or
   * an account with appropriate rights set in the service's ACL.
   **/
}

/**
 * Queries the status of a service.
 **/

function win32_query_service_status(
     string $servicename
  ,  string $machine
  ) {

  /**
   * Queries the current status for a service, returning an array
   * of information.
   **/
}

/**
 * Send a custom control to the service.
 **/

function win32_send_custom_control() {

  /**
   * See Microsoft ControlService function for more details
   **/
}

/**
 * Define or return the exit code for the current running service.
 **/

function win32_set_service_exit_code() {

  /**
   * Change or return the exit code. The exit code is used only if
   * the exit mode is not graceful. If the value is not zero, the
   * recovery configuration can be used after service fail. See
   * Microsoft system error codes for more details
   *
   * This function work only in "cli" SAPI. On other SAPI this
   * function is disabled.
   **/
}

/**
 * Define or return the exit mode for the current running service.
 **/

function win32_set_service_exit_mode() {

  /**
   * If gracefulMode parameter is provided, the exit mode is
   * changed. When the exit mode is not gracefuly, the exit code
   * used can be set with the win32_set_service_exit_code function.
   *
   * This function work only in "cli" SAPI. On other SAPI this
   * function is disabled.
   **/
}

/**
 * Update the service status.
 **/

function win32_set_service_status( int $status,  int $checkpoint = 0) {

  /**
   * Informs the SCM of the current status of a running service.
   * This call is only valid for a running service process.
   *
   * Since version 0.2.0, this function work only in "cli" SAPI.
   * On other SAPI this function is disabled.
   **/
}

/**
 * Registers the script with the SCM, so that it can act as the.
 * service with the given name.
 **/

function win32_start_service_ctrl_dispatcher(
     string $name
  ,  bool $gracefulMode = true
  ) {

  /**
   * When launched via the Service Control Manager, a service
   * process is required to "check-in" with it to establish service
   * monitoring and communication facilities. This function
   * performs the check-in by spawning a thread to handle the
   * lower-level communication with the service control manager.
   *
   * Once started, the service process should do 2 things. The
   * first is to tell the Service Control Manager that the service
   * is running. This is achieved by calling
   * win32_set_service_status with the WIN32_SERVICE_RUNNING
   * constant. If you need to perform some lengthy process before
   * the service is actually running, then you can use the
   * WIN32_SERVICE_START_PENDING constant. The second is to
   * continue to check-in with the service control manager so that
   * it can determine if it should terminate. This is achieved by
   * periodically calling win32_get_last_control_message and
   * handling the return code appropriately.
   *
   * Since version 0.2.0, this function work only in "cli" SAPI.
   * On other SAPI this function is disabled.
   **/
}

/**
 * Starts a service.
 **/

function win32_start_service( string $servicename,  string $machine) {

  /**
   * Attempts to start the named service. Requires administrative
   * privileges or an account with appropriate rights set in the
   * service's ACL.
   **/
}

/**
 * Stops a service.
 **/

function win32_stop_service( string $servicename,  string $machine) {

  /**
   * Stops a named service. Requires administrative privileges or
   * an account with appropriate rights set in the service's ACL.
   **/
}

/**
 * Retrieves information about files cached in the file cache.
 **/

function wincache_fcache_fileinfo( bool $summaryonly = false) {

  /**
   * Retrieves information about file cache content and its usage.
   **/
}

/**
 * Retrieves information about file cache memory usage.
 **/

function wincache_fcache_meminfo() {

  /**
   * Retrieves information about memory usage by file cache.
   **/
}

/**
 * Acquires an exclusive lock on a given key.
 **/

function wincache_lock( string $key,  bool $isglobal = false) {

  /**
   * Obtains an exclusive lock on a given key. The execution of
   * the current script will be blocked until the lock can be
   * obtained. Once the lock is obtained, the other scripts that
   * try to request the lock by using the same key will be blocked,
   * until the current script releases the lock by using
   * wincache_unlock.
   **/
}

/**
 * Retrieves information about files cached in the opcode cache.
 **/

function wincache_ocache_fileinfo( bool $summaryonly = false) {

  /**
   * Retrieves information about opcode cache content and its
   * usage.
   **/
}

/**
 * Retrieves information about opcode cache memory usage.
 **/

function wincache_ocache_meminfo() {

  /**
   * Retrieves information about memory usage by opcode cache.
   **/
}

/**
 * Refreshes the cache entries for the cached files.
 **/

function wincache_refresh_if_changed( array $files = NULL) {

  /**
   * Refreshes the cache entries for the files, whose names were
   * passed in the input argument. If no argument is specified then
   * refreshes all the entries in the cache.
   **/
}

/**
 * Retrieves information about resolve file path cache.
 **/

function wincache_rplist_fileinfo( bool $summaryonly = false) {

  /**
   * Retrieves information about cached mappings between relative
   * file paths and corresponding absolute file paths.
   **/
}

/**
 * Retrieves information about memory usage by the resolve file.
 * path cache.
 **/

function wincache_rplist_meminfo() {

  /**
   * Retrieves information about memory usage by resolve file path
   * cache.
   **/
}

/**
 * Retrieves information about files cached in the session cache.
 **/

function wincache_scache_info( bool $summaryonly = false) {

  /**
   * Retrieves information about session cache content and its
   * usage.
   **/
}

/**
 * Retrieves information about session cache memory usage.
 **/

function wincache_scache_meminfo() {

  /**
   * Retrieves information about memory usage by session cache.
   **/
}

/**
 * Adds a variable in user cache only if variable does not.
 * already exist in the cache.
 **/

function wincache_ucache_add(
     string $key
  ,  mixed $value
  ,  int $ttl = 0
  ) {

  /**
   * Adds a variable in user cache, only if this variable doesn't
   * already exist in the cache. The added variable remains in the
   * user cache unless its time to live expires or it is deleted by
   * using wincache_ucache_delete or wincache_ucache_clear
   * functions.
   **/
}

/**
 * Compares the variable with old value and assigns new value to.
 * it.
 **/

function wincache_ucache_cas(
     string $key
  ,  int $old_value
  ,  int $new_value
  ) {

  /**
   * Compares the variable associated with the key with old_value
   * and if it matches then assigns the new_value to it.
   **/
}

/**
 * Deletes entire content of the user cache.
 **/

function wincache_ucache_clear() {

  /**
   * Clears/deletes all the values stored in the user cache.
   **/
}

/**
 * Decrements the value associated with the key.
 **/

function wincache_ucache_dec(
     string $key
  ,  int $dec_by = 1
  ,  bool &$success
  ) {

  /**
   * Decrements the value associated with the key by 1 or as
   * specified by dec_by.
   **/
}

/**
 * Deletes variables from the user cache.
 **/

function wincache_ucache_delete( mixed $key) {

  /**
   * Deletes the elements in the user cache pointed by key.
   **/
}

/**
 * Checks if a variable exists in the user cache.
 **/

function wincache_ucache_exists( string $key) {

  /**
   * Checks if a variable with the key exists in the user cache or
   * not.
   **/
}

/**
 * Gets a variable stored in the user cache.
 **/

function wincache_ucache_get( mixed $key,  bool &$success) {

  /**
   * Gets a variable stored in the user cache.
   **/
}

/**
 * Increments the value associated with the key.
 **/

function wincache_ucache_inc(
     string $key
  ,  int $inc_by = 1
  ,  bool &$success
  ) {

  /**
   * Increments the value associated with the key by 1 or as
   * specified by inc_by.
   **/
}

/**
 * Retrieves information about data stored in the user cache.
 **/

function wincache_ucache_info(
     bool $summaryonly = false
  ,  string $key = NULL
  ) {

  /**
   * Retrieves information about data stored in the user cache.
   **/
}

/**
 * Retrieves information about user cache memory usage.
 **/

function wincache_ucache_meminfo() {

  /**
   * Retrieves information about memory usage by user cache.
   **/
}

/**
 * Adds a variable in user cache and overwrites a variable if it.
 * already exists in the cache.
 **/

function wincache_ucache_set(
     mixed $key
  ,  mixed $value
  ,  int $ttl = 0
  ) {

  /**
   * Adds a variable in user cache. Overwrites a variable if it
   * already exists in the cache. The added or updated variable
   * remains in the user cache unless its time to live expires or
   * it is deleted by using wincache_ucache_delete or
   * wincache_ucache_clear functions.
   **/
}

/**
 * Releases an exclusive lock on a given key.
 **/

function wincache_unlock( string $key) {

  /**
   * Releases an exclusive lock that was obtained on a given key
   * by using wincache_lock. If any other process was blocked
   * waiting for the lock on this key, that process will be able to
   * obtain the lock.
   **/
}

/**
 * Get an extended attribute.
 **/

function xattr_get( string $filename,  string $name,  int $flags = 0) {

  /**
   * This function gets the value of an extended attribute of a
   * file.
   **/
}

/**
 * Get a list of extended attributes.
 **/

function xattr_list( string $filename,  int $flags = 0) {

  /**
   * This functions gets a list of names of extended attributes of
   * a file.
   **/
}

/**
 * Remove an extended attribute.
 **/

function xattr_remove(
     string $filename
  ,  string $name
  ,  int $flags = 0
  ) {

  /**
   * This function removes an extended attribute of a file.
   **/
}

/**
 * Set an extended attribute.
 **/

function xattr_set(
     string $filename
  ,  string $name
  ,  string $value
  ,  int $flags = 0
  ) {

  /**
   * This function sets the value of an extended attribute of a
   * file.
   **/
}

/**
 * Check if filesystem supports extended attributes.
 **/

function xattr_supported( string $filename,  int $flags = 0) {

  /**
   * This functions checks if the filesystem holding the given
   * file supports extended attributes. Read access to the file is
   * required.
   **/
}

/**
 * Read a size of file created by applying a binary diff.
 **/

function xdiff_file_bdiff_size( string $file) {

  /**
   * Returns a size of a result file that would be created after
   * applying binary patch from file file to the original file.
   **/
}

/**
 * Make binary diff of two files.
 **/

function xdiff_file_bdiff(
     string $old_file
  ,  string $new_file
  ,  string $dest
  ) {

  /**
   * Makes a binary diff of two files and stores the result in a
   * patch file. This function works with both text and binary
   * files. Resulting patch file can be later applied using
   * xdiff_file_bpatch/xdiff_string_bpatch.
   **/
}

/**
 * Patch a file with a binary diff.
 **/

function xdiff_file_bpatch(
     string $file
  ,  string $patch
  ,  string $dest
  ) {

  /**
   * Patches a file with a binary patch and stores the result in a
   * file dest. This function accepts patches created both via
   * xdiff_file_bdiff and xdiff_file_rabdiff functions or their
   * string counterparts.
   **/
}

/**
 * &Alias; xdiff_file_bdiff.
 **/

function xdiff_file_diff_binary(
     string $old_file
  ,  string $new_file
  ,  string $dest
  ) {

  /**
   * Makes a binary diff of two files and stores the result in a
   * patch file. This function works with both text and binary
   * files. Resulting patch file can be later applied using
   * xdiff_file_bpatch.
   *
   * Starting with version 1.5.0 this function is an alias of
   * xdiff_file_bdiff.
   **/
}

/**
 * Make unified diff of two files.
 **/

function xdiff_file_diff(
     string $old_file
  ,  string $new_file
  ,  string $dest
  ,  int $context = 3
  ,  bool $minimal = false
  ) {

  /**
   * Makes an unified diff containing differences between old_file
   * and new_file and stores it in dest file. The resulting file is
   * human-readable. An optional context parameter specifies how
   * many lines of context should be added around each change.
   * Setting minimal parameter to true will result in outputting
   * the shortest patch file possible (can take a long time).
   **/
}

/**
 * Merge 3 files into one.
 **/

function xdiff_file_merge3(
     string $old_file
  ,  string $new_file1
  ,  string $new_file2
  ,  string $dest
  ) {

  /**
   * Merges three files into one and stores the result in a file
   * dest. The old_file is an original version while new_file1 and
   * new_file2 are modified versions of an original.
   **/
}

/**
 * &Alias; xdiff_file_bpatch.
 **/

function xdiff_file_patch_binary(
     string $file
  ,  string $patch
  ,  string $dest
  ) {

  /**
   * Patches a file with a binary patch and stores the result in a
   * file dest. This function accepts patches created both via
   * xdiff_file_bdiff or xdiff_file_rabdiff functions or their
   * string counterparts.
   *
   * Starting with version 1.5.0 this function is an alias of
   * xdiff_file_bpatch.
   **/
}

/**
 * Patch a file with an unified diff.
 **/

function xdiff_file_patch(
     string $file
  ,  string $patch
  ,  string $dest
  ,  int $flags = DIFF_PATCH_NORMAL
  ) {

  /**
   * Patches a file with a patch and stores the result in a file.
   * patch has to be an unified diff created by
   * xdiff_file_diff/xdiff_string_diff function. An optional flags
   * parameter specifies mode of operation.
   **/
}

/**
 * Make binary diff of two files using the Rabin's polynomial.
 * fingerprinting algorithm.
 **/

function xdiff_file_rabdiff(
     string $old_file
  ,  string $new_file
  ,  string $dest
  ) {

  /**
   * Makes a binary diff of two files and stores the result in a
   * patch file. The difference between this function and
   * xdiff_file_bdiff is different algorithm used which should
   * result in faster execution and smaller diff produced. This
   * function works with both text and binary files. Resulting
   * patch file can be later applied using
   * xdiff_file_bpatch/xdiff_string_bpatch.
   *
   * For more details about differences between algorithm used
   * please check libxdiff website.
   **/
}

/**
 * Read a size of file created by applying a binary diff.
 **/

function xdiff_string_bdiff_size( string $patch) {

  /**
   * Returns a size of a result file that would be created after
   * applying binary patch to the original file.
   **/
}

/**
 * Make binary diff of two strings.
 **/

function xdiff_string_bdiff( string $old_data,  string $new_data) {

  /**
   * Makes a binary diff of two strings and returns the result.
   * This function works with both text and binary data. Resulting
   * patch can be later applied using
   * xdiff_string_bpatch/xdiff_file_bpatch.
   **/
}

/**
 * Patch a string with a binary diff.
 **/

function xdiff_string_bpatch( string $str,  string $patch) {

  /**
   * Patches a string str with a binary patch. This function
   * accepts patches created both via xdiff_string_bdiff and
   * xdiff_string_rabdiff functions or their file counterparts.
   **/
}

/**
 * &Alias; xdiff_string_bdiff.
 **/

function xdiff_string_bdiff( string $old_data,  string $new_data) {

  /**
   * Makes a binary diff of two strings and returns the result.
   * This function works with both text and binary data. Resulting
   * patch can be later applied using
   * xdiff_string_bpatch/xdiff_file_bpatch.
   *
   * Starting with version 1.5.0 this function is an alias of
   * xdiff_string_bdiff.
   **/
}

/**
 * Make unified diff of two strings.
 **/

function xdiff_string_diff(
     string $old_data
  ,  string $new_data
  ,  int $context = 3
  ,  bool $minimal = false
  ) {

  /**
   * Makes an unified diff containing differences between old_data
   * string and new_data string and returns it. The resulting diff
   * is human-readable. An optional context parameter specifies how
   * many lines of context should be added around each change.
   * Setting minimal parameter to true will result in outputting
   * the shortest patch file possible (can take a long time).
   **/
}

/**
 * Merge 3 strings into one.
 **/

function xdiff_string_merge3(
     string $old_data
  ,  string $new_data1
  ,  string $new_data2
  ,  string &$error
  ) {

  /**
   * Merges three strings into one and returns the result. The
   * old_data is an original version of data while new_data1 and
   * new_data2 are modified versions of an original. An optional
   * error is used to pass any rejected parts during merging
   * process.
   **/
}

/**
 * &Alias; xdiff_string_bpatch.
 **/

function xdiff_string_patch_binary( string $str,  string $patch) {

  /**
   * Patches a string str with a binary patch. This function
   * accepts patches created both via xdiff_string_bdiff and
   * xdiff_string_rabdiff functions or their file counterparts.
   *
   * Starting with version 1.5.0 this function is an alias of
   * xdiff_string_bpatch.
   **/
}

/**
 * Patch a string with an unified diff.
 **/

function xdiff_string_patch(
     string $str
  ,  string $patch
  ,  int $flags
  ,  string &$error
  ) {

  /**
   * Patches a str string with an unified patch in patch parameter
   * and returns the result. patch has to be an unified diff
   * created by xdiff_file_diff/xdiff_string_diff function. An
   * optional flags parameter specifies mode of operation. Any
   * rejected parts of the patch will be stored inside error
   * variable if it is provided.
   **/
}

/**
 * Make binary diff of two strings using the Rabin's polynomial.
 * fingerprinting algorithm.
 **/

function xdiff_string_bdiff( string $old_data,  string $new_data) {

  /**
   * Makes a binary diff of two strings and returns the result.
   * The difference between this function and xdiff_string_bdiff is
   * different algorithm used which should result in faster
   * execution and smaller diff produced. This function works with
   * both text and binary data. Resulting patch can be later
   * applied using xdiff_string_bpatch/xdiff_file_bpatch.
   *
   * For more details about differences between algorithm used
   * please check libxdiff website.
   **/
}

/**
 * Stops xhprof profiler.
 **/

function xhprof_disable() {

  /**
   * Stops the profiler, and returns xhprof data from the run.
   **/
}

/**
 * Start xhprof profiler.
 **/

function xhprof_enable( int $flags = 0,  array $options) {

  /**
   * Start xhprof profiling.
   **/
}

/**
 * Stops xhprof sample profiler.
 **/

function xhprof_sample_disable() {

  /**
   * Stops the sample mode xhprof profiler, and
   **/
}

/**
 * Start XHProf profiling in sampling mode.
 **/

function xhprof_sample_enable() {

  /**
   * Starts profiling in sample mode, which is a lighter weight
   * version of xhprof_enable. The sampling interval is 0.1
   * seconds, and samples record the full function call stack. The
   * main use case is when lower overhead is required when doing
   * performance monitoring and diagnostics.
   **/
}

/**
 * Get XML parser error string.
 **/

function xml_error_string( int $error_code) {

  /**
   * Gets the XML parser error string associated with the given
   * error_code.
   **/
}

/**
 * Get current byte index for an XML parser.
 **/

function xml_get_current_byte_index( XMLParser $parser) {

  /**
   * Gets the current byte index of the given XML parser.
   **/
}

/**
 * Get current column number for an XML parser.
 **/

function xml_get_current_column_number( XMLParser $parser) {

  /**
   * Gets the current column number of the given XML parser.
   **/
}

/**
 * Get current line number for an XML parser.
 **/

function xml_get_current_line_number( XMLParser $parser) {

  /**
   * Gets the current line number for the given XML parser.
   **/
}

/**
 * Get XML parser error code.
 **/

function xml_get_error_code( XMLParser $parser) {

  /**
   * Gets the XML parser error code.
   **/
}

/**
 * Parse XML data into an array structure.
 **/

function xml_parse_into_struct(
     XMLParser $parser
  ,  string $data
  ,  array &$values
  ,  array &$index = null
  ) {

  /**
   * This function parses an XML string into 2 parallel array
   * structures, one (index) containing pointers to the location of
   * the appropriate values in the values array. These last two
   * parameters must be passed by reference.
   **/
}

/**
 * Start parsing an XML document.
 **/

function xml_parse(
     XMLParser $parser
  ,  string $data
  ,  bool $is_final = false
  ) {

  /**
   * xml_parse parses an XML document. The handlers for the
   * configured events are called as many times as necessary.
   **/
}

/**
 * Create an XML parser with namespace support.
 **/

function xml_parser_create_ns(
    $encoding = null
  ,  string $separator = ":"
  ) {

  /**
   * xml_parser_create_ns creates a new XML parser with XML
   * namespace support and returns a XMLParser instance to be used
   * by the other XML functions.
   **/
}

/**
 * Create an XML parser.
 **/

function xml_parser_create($encoding = null) {

  /**
   * xml_parser_create creates a new XML parser and returns a
   * XMLParser instance to be used by the other XML functions.
   **/
}

/**
 * Free an XML parser.
 **/

function xml_parser_free( XMLParser $parser) {

  /**
   * Frees the given XML parser.
   *
   * In addition to calling xml_parser_free when the parsing is
   * finished, prior to PHP 8.0.0, it was necessary to also
   * explicitly unset the reference to parser to avoid memory
   * leaks, if the parser resource is referenced from an object,
   * and this object references that parser resource.
   **/
}

/**
 * Get options from an XML parser.
 **/

function xml_parser_get_option( XMLParser $parser,  int $option) {

  /**
   * Gets an option value from an XML parser.
   **/
}

/**
 * Set options in an XML parser.
 **/

function xml_parser_set_option(
     XMLParser $parser
  ,  int $option
  , $value
  ) {

  /**
   * Sets an option in an XML parser.
   **/
}

/**
 * Set up character data handler.
 **/

function xml_set_character_data_handler(
     XMLParser $parser
  ,  callable $handler
  ) {

  /**
   * Sets the character data handler function for the XML parser
   * parser.
   **/
}

/**
 * Set up default handler.
 **/

function xml_set_default_handler(
     XMLParser $parser
  ,  callable $handler
  ) {

  /**
   * Sets the default handler function for the XML parser parser.
   **/
}

/**
 * Set up start and end element handlers.
 **/

function xml_set_element_handler(
     XMLParser $parser
  ,  callable $start_handler
  ,  callable $end_handler
  ) {

  /**
   * Sets the element handler functions for the XML parser.
   *
   * start_handler is called when a new XML element is opened.
   * end_handler is called when an XML element is closed.
   **/
}

/**
 * Set up end namespace declaration handler.
 **/

function xml_set_end_namespace_decl_handler(
     XMLParser $parser
  ,  callable $handler
  ) {

  /**
   * Set a handler to be called when leaving the scope of a
   * namespace declaration. This will be called, for each namespace
   * declaration, after the handler for the end tag of the element
   * in which the namespace was declared.
   *
   * This event is not supported under libXML, so a registered
   * handler wouldn't be called.
   **/
}

/**
 * Set up external entity reference handler.
 **/

function xml_set_external_entity_ref_handler(
     XMLParser $parser
  ,  callable $handler
  ) {

  /**
   * Sets the external entity reference handler function for the
   * XML parser parser.
   **/
}

/**
 * Set up notation declaration handler.
 **/

function xml_set_notation_decl_handler(
     XMLParser $parser
  ,  callable $handler
  ) {

  /**
   * Sets the notation declaration handler function for the XML
   * parser parser.
   *
   * A notation declaration is part of the document's DTD and has
   * the following format: name { systemId | publicId?> ]]> See
   * section 4.7 of the XML 1.0 spec for the definition of notation
   * declarations.
   **/
}

/**
 * Use XML Parser within an object.
 **/

function xml_set_object( XMLParser $parser,  object $object) {

  /**
   * This function allows to use parser inside object. All
   * callback functions could be set with xml_set_element_handler
   * etc and assumed to be methods of object.
   **/
}

/**
 * Set up processing instruction (PI) handler.
 **/

function xml_set_processing_instruction_handler(
     XMLParser $parser
  ,  callable $handler
  ) {

  /**
   * Sets the processing instruction (PI) handler function for the
   * XML parser parser.
   *
   * A processing instruction has the following format: ]]>
   *
   * PHP code is delimited by the <?php processing instruction. As
   * such it is possible to have PHP code within an XML document.
   * However, the PI end tag (?>) must not be part of the data. If
   * a PI end tag exists as part of the embedded PHP code, the rest
   * of the PHP code and the "real" PI end tag, will be treated as
   * character data.
   **/
}

/**
 * Set up start namespace declaration handler.
 **/

function xml_set_start_namespace_decl_handler(
     XMLParser $parser
  ,  callable $handler
  ) {

  /**
   * Set a handler to be called when a namespace is declared.
   * Namespace declarations occur inside start tags. But the
   * namespace declaration start handler is called before the start
   * tag handler for each namespace declared in that start tag.
   **/
}

/**
 * Set up unparsed entity declaration handler.
 **/

function xml_set_unparsed_entity_decl_handler(
     XMLParser $parser
  ,  callable $handler
  ) {

  /**
   * Sets the unparsed entity declaration handler function for the
   * XML parser parser.
   *
   * The handler will be called if the XML parser encounters an
   * external entity declaration with an NDATA declaration, like
   * the following: name {publicId | systemId} NDATA notationName
   * ]]>
   *
   * See section 4.2.2 of the XML 1.0 spec for the definition of
   * notation declared external entities.
   **/
}

/**
 * Decodes XML into native PHP types.
 **/

function xmlrpc_decode_request(
     string $xml
  ,  string &$method
  ,  string $encoding
  ) {

  /**
   **/
}

/**
 * Decodes XML into native PHP types.
 **/

function xmlrpc_decode(
     string $xml
  ,  string $encoding = "iso-8859-1"
  ) {

  /**
   **/
}

/**
 * Generates XML for a method request.
 **/

function xmlrpc_encode_request(
     string $method
  ,  mixed $params
  ,  array $output_options
  ) {

  /**
   **/
}

/**
 * Generates XML for a PHP value.
 **/

function xmlrpc_encode( mixed $value) {

  /**
   **/
}

/**
 * Gets xmlrpc type for a PHP value.
 **/

function xmlrpc_get_type( mixed $value) {

  /**
   * This function is especially useful for base64 and datetime
   * strings.
   **/
}

/**
 * Determines if an array value represents an XMLRPC fault.
 **/

function xmlrpc_is_fault( array $arg) {

  /**
   **/
}

/**
 * Decodes XML into a list of method descriptions.
 **/

function xmlrpc_parse_method_descriptions( string $xml) {

  /**
   **/
}

/**
 * Adds introspection documentation.
 **/

function xmlrpc_server_add_introspection_data(
     resource $server
  ,  array $desc
  ) {

  /**
   **/
}

/**
 * Parses XML requests and call methods.
 **/

function xmlrpc_server_call_method(
     resource $server
  ,  string $xml
  ,  mixed $user_data
  ,  array $output_options
  ) {

  /**
   **/
}

/**
 * Creates an xmlrpc server.
 **/

function xmlrpc_server_create() {

  /**
   **/
}

/**
 * Destroys server resources.
 **/

function xmlrpc_server_destroy( resource $server) {

  /**
   **/
}

/**
 * Register a PHP function to generate documentation.
 **/

function xmlrpc_server_register_introspection_callback(
     resource $server
  ,  string $function
  ) {

  /**
   **/
}

/**
 * Register a PHP function to resource method matching.
 * method_name.
 **/

function xmlrpc_server_register_method(
     resource $server
  ,  string $method_name
  ,  string $function
  ) {

  /**
   **/
}

/**
 * Sets xmlrpc type, base64 or datetime, for a PHP string value.
 **/

function xmlrpc_set_type( string &$value,  string $type) {

  /**
   * Sets xmlrpc type, base64 or datetime, for a PHP string value.
   **/
}

/**
 * Send the YAML representation of a value to a file.
 **/

function yaml_emit_file(
     string $filename
  ,  mixed $data
  ,  int $encoding = YAML_ANY_ENCODING
  ,  int $linebreak = YAML_ANY_BREAK
  ,  array $callbacks = null
  ) {

  /**
   * Generate a YAML representation of the provided data in the
   * filename.
   **/
}

/**
 * Returns the YAML representation of a value.
 **/

function yaml_emit(
     mixed $data
  ,  int $encoding = YAML_ANY_ENCODING
  ,  int $linebreak = YAML_ANY_BREAK
  ,  array $callbacks = null
  ) {

  /**
   * Generate a YAML representation of the provided data.
   **/
}

/**
 * Parse a YAML stream from a file.
 **/

function yaml_parse_file(
     string $filename
  ,  int $pos = 0
  ,  int &$ndocs
  ,  array $callbacks = null
  ) {

  /**
   * Convert all or part of a YAML document stream read from a
   * file to a PHP variable.
   **/
}

/**
 * Parse a Yaml stream from a URL.
 **/

function yaml_parse_url(
     string $url
  ,  int $pos = 0
  ,  int &$ndocs
  ,  array $callbacks = null
  ) {

  /**
   * Convert all or part of a YAML document stream read from a URL
   * to a PHP variable.
   **/
}

/**
 * Parse a YAML stream.
 **/

function yaml_parse(
     string $input
  ,  int $pos = 0
  ,  int &$ndocs
  ,  array $callbacks = null
  ) {

  /**
   * Convert all or part of a YAML document stream to a PHP
   * variable.
   **/
}

/**
 * Returns additional error information.
 **/

function yaz_addinfo( resource $id) {

  /**
   * Returns additional error information for the last request on
   * the server.
   *
   * With some servers, this function may return the same string
   * as yaz_error.
   **/
}

/**
 * Configure CCL parser.
 **/

function yaz_ccl_conf( resource $id,  array $config) {

  /**
   * This function configures the CCL query parser for a server
   * with definitions of access points (CCL qualifiers) and their
   * mapping to RPN.
   *
   * To map a specific CCL query to RPN afterwards call the
   * yaz_ccl_parse function.
   **/
}

/**
 * Invoke CCL Parser.
 **/

function yaz_ccl_parse(
     resource $id
  ,  string $query
  ,  array &$result
  ) {

  /**
   * This function invokes a CCL parser. It converts a given CCL
   * FIND query to an RPN query which may be passed to the
   * yaz_search function to perform a search.
   *
   * To define a set of valid CCL fields call yaz_ccl_conf prior
   * to this function.
   **/
}

/**
 * Close YAZ connection.
 **/

function yaz_close( resource $id) {

  /**
   * Closes the connection given by parameter id.
   *
   * This function will only close a non-persistent connection
   * opened by setting the persistent option to &false; with
   * yaz_connect.
   **/
}

/**
 * Prepares for a connection to a Z39.50 server.
 **/

function yaz_connect( string $zurl,  mixed $options) {

  /**
   * This function returns a connection resource on success, zero
   * on failure.
   *
   * yaz_connect prepares for a connection to a Z39.50 server.
   * This function is non-blocking and does not attempt to
   * establish a connection - it merely prepares a connect to be
   * performed later when yaz_wait is called.
   *
   * The YAZ proxy is a freely available Z39.50 proxy.
   **/
}

/**
 * Specifies the databases within a session.
 **/

function yaz_database( resource $id,  string $databases) {

  /**
   * This function allows you to change databases within a session
   * by specifying one or more databases to be used in search,
   * retrieval, etc. - overriding databases specified in call to
   * yaz_connect.
   **/
}

/**
 * Specifies Element-Set Name for retrieval.
 **/

function yaz_element( resource $id,  string $elementset) {

  /**
   * This function sets the element set name for retrieval.
   *
   * Call this function before yaz_search or yaz_present to
   * specify the element set name for records to be retrieved.
   *
   * If this function appears to have no effect, see the
   * description of the piggybacking option in yaz_connect.
   **/
}

/**
 * Returns error number.
 **/

function yaz_errno( resource $id) {

  /**
   * Returns an error number for the server (last request)
   * identified by id.
   *
   * yaz_errno should be called after network activity for each
   * server - (after yaz_wait returns) to determine the success or
   * failure of the last operation (e.g. search).
   **/
}

/**
 * Returns error description.
 **/

function yaz_error( resource $id) {

  /**
   * yaz_error returns an English text message corresponding to
   * the last error number as returned by yaz_errno.
   **/
}

/**
 * Inspects Extended Services Result.
 **/

function yaz_es_result( resource $id) {

  /**
   * This function inspects the last returned Extended Service
   * result from a server. An Extended Service is initiated by
   * either yaz_item_order or yaz_es.
   **/
}

/**
 * Prepares for an Extended Service Request.
 **/

function yaz_es( resource $id,  string $type,  array $args) {

  /**
   * This function prepares for an Extended Service Request.
   * Extended Services is family of various Z39.50 facilities, such
   * as Record Update, Item Order, Database administration etc.
   *
   * Many Z39.50 Servers do not support Extended Services.
   *
   * The yaz_es creates an Extended Service Request packages and
   * puts it into a queue of operations. Use yaz_wait to send the
   * request(s) to the server. After completion of yaz_wait the
   * result of the Extended Service operation should be expected
   * with a call to yaz_es_result.
   **/
}

/**
 * Returns value of option for connection.
 **/

function yaz_get_option( resource $id,  string $name) {

  /**
   * Returns the value of the option specified with name.
   **/
}

/**
 * Returns number of hits for last search.
 **/

function yaz_hits( resource $id,  array &$searchresult) {

  /**
   * yaz_hits returns the number of hits for the last search.
   **/
}

/**
 * Prepares for Z39.50 Item Order with an ILL-Request package.
 **/

function yaz_itemorder( resource $id,  array $args) {

  /**
   * This function prepares for an Extended Services request using
   * the Profile for the Use of Z39.50 Item Order Extended Service
   * to Transport ILL (Profile/1). See this and the specification.
   **/
}

/**
 * Prepares for retrieval (Z39.50 present).
 **/

function yaz_present( resource $id) {

  /**
   * This function prepares for retrieval of records after a
   * successful search.
   *
   * The yaz_range function should be called prior to this
   * function to specify the range of records to be retrieved.
   **/
}

/**
 * Specifies a range of records to retrieve.
 **/

function yaz_range( resource $id,  int $start,  int $number) {

  /**
   * Specifies a range of records to retrieve.
   *
   * This function should be called before yaz_search or
   * yaz_present.
   **/
}

/**
 * Returns a record.
 **/

function yaz_record( resource $id,  int $pos,  string $type) {

  /**
   * The yaz_record function inspects a record in the current
   * result set at the position specified by parameter pos.
   **/
}

/**
 * Returns Scan Response result.
 **/

function yaz_scan_result( resource $id,  array &$result) {

  /**
   * yaz_scan_result returns terms and associated information as
   * received from the server in the last performed yaz_scan.
   **/
}

/**
 * Prepares for a scan.
 **/

function yaz_scan(
     resource $id
  ,  string $type
  ,  string $startterm
  ,  array $flags
  ) {

  /**
   * This function prepares for a Z39.50 Scan Request on the
   * specified connection.
   *
   * To actually transfer the Scan Request to the server and
   * receive the Scan Response, yaz_wait must be called. Upon
   * completion of yaz_wait call yaz_error and yaz_scan_result to
   * handle the response.
   **/
}

/**
 * Specifies schema for retrieval.
 **/

function yaz_schema( resource $id,  string $schema) {

  /**
   * yaz_schema specifies the schema for retrieval.
   *
   * This function should be called before yaz_search or
   * yaz_present.
   **/
}

/**
 * Prepares for a search.
 **/

function yaz_search( resource $id,  string $type,  string $query) {

  /**
   * yaz_search prepares for a search on the given connection.
   *
   * Like yaz_connect this function is non-blocking and only
   * prepares for a search to be executed later when yaz_wait is
   * called.
   **/
}

/**
 * Sets one or more options for connection.
 **/

function yaz_set_option( resource $id,  string $name,  string $value) {

  /**
   * Sets one or more options on the given connection.
   **/
}

/**
 * Sets sorting criteria.
 **/

function yaz_sort( resource $id,  string $criteria) {

  /**
   * This function sets sorting criteria and enables Z39.50 Sort.
   *
   * Call this function before yaz_search. Using this function
   * alone does not have any effect. When used in conjunction with
   * yaz_search, a Z39.50 Sort will be sent after a search response
   * has been received and before any records are retrieved with
   * Z39.50 Present (yaz_present.
   **/
}

/**
 * Specifies the preferred record syntax for retrieval.
 **/

function yaz_syntax( resource $id,  string $syntax) {

  /**
   * yaz_syntax specifies the preferred record syntax for
   * retrieval
   *
   * This function should be called before yaz_search or
   * yaz_present.
   **/
}

/**
 * Wait for Z39.50 requests to complete.
 **/

function yaz_wait( array &$options) {

  /**
   * This function carries out networked (blocked) activity for
   * outstanding requests which have been prepared by the functions
   * yaz_connect, yaz_search, yaz_present, yaz_scan and
   * yaz_itemorder.
   *
   * yaz_wait returns when all servers have either completed all
   * requests or aborted (in case of errors).
   **/
}

/**
 * Close a ZIP file archive.
 **/

function zip_close( resource $zip) {

  /**
   * Closes the given ZIP file archive.
   **/
}

/**
 * Close a directory entry.
 **/

function zip_entry_close( resource $zip_entry) {

  /**
   * Closes the specified directory entry.
   **/
}

/**
 * Retrieve the compressed size of a directory entry.
 **/

function zip_entry_compressedsize( resource $zip_entry) {

  /**
   * Returns the compressed size of the specified directory entry.
   **/
}

/**
 * Retrieve the compression method of a directory entry.
 **/

function zip_entry_compressionmethod( resource $zip_entry) {

  /**
   * Returns the compression method of the directory entry
   * specified by zip_entry.
   **/
}

/**
 * Retrieve the actual file size of a directory entry.
 **/

function zip_entry_filesize( resource $zip_entry) {

  /**
   * Returns the actual size of the specified directory entry.
   **/
}

/**
 * Retrieve the name of a directory entry.
 **/

function zip_entry_name( resource $zip_entry) {

  /**
   * Returns the name of the specified directory entry.
   **/
}

/**
 * Open a directory entry for reading.
 **/

function zip_entry_open(
     resource $zip_dp
  ,  resource $zip_entry
  ,  string $mode = "rb"
  ) {

  /**
   * Opens a directory entry in a zip file for reading.
   **/
}

/**
 * Read from an open directory entry.
 **/

function zip_entry_read( resource $zip_entry,  int $len = 1024) {

  /**
   * Reads from an open directory entry.
   **/
}

/**
 * Open a ZIP file archive.
 **/

function zip_open( string $filename) {

  /**
   * Opens a new zip archive for reading.
   **/
}

/**
 * Read next entry in a ZIP file archive.
 **/

function zip_read( resource $zip) {

  /**
   * Reads the next entry in a zip file archive.
   **/
}

/**
 * Incrementally deflate data.
 **/

function deflate_add() {

  /**
   * Incrementally deflates data in the specified context.
   **/
}

/**
 * Initialize an incremental deflate context.
 **/

function deflate_init() {

  /**
   * Initializes an incremental deflate context using the
   * specified encoding.
   *
   * Note that the window option here only sets the window size of
   * the algorithm, differently from the zlib filters where the
   * same parameter also sets the encoding to use; the encoding
   * must be set with the encoding parameter.
   *
   * Limitation: there is currently no way to set the header
   * information on a GZIP compressed stream, which are set as
   * follows: GZIP signature (\x1f\x8B); compression method (\x08
   * == DEFLATE); 6 zero bytes; the operating system set to the
   * current system (\x00 = Windows, \x03 = Unix, etc.)
   **/
}

/**
 * Close an open gz-file pointer.
 **/

function gzclose( resource $stream) {

  /**
   * Closes the given gz-file pointer.
   **/
}

/**
 * Compress a string.
 **/

function gzcompress(
     string $data
  ,  int $level = -1
  ,  int $encoding = ZLIB_ENCODING_DEFLATE
  ) {

  /**
   * This function compresses the given string using the ZLIB data
   * format.
   *
   * For details on the ZLIB compression algorithm see the
   * document "ZLIB Compressed Data Format Specification version
   * 3.3" (RFC 1950).
   *
   * This is not the same as gzip compression, which includes some
   * header data. See gzencode for gzip compression.
   **/
}

/**
 * Decodes a gzip compressed string.
 **/

function gzdecode( string $data,  int $max_length = 0) {

  /**
   * This function returns a decoded version of the input data.
   **/
}

/**
 * Deflate a string.
 **/

function gzdeflate(
     string $data
  ,  int $level = -1
  ,  int $encoding = ZLIB_ENCODING_RAW
  ) {

  /**
   * This function compresses the given string using the DEFLATE
   * data format.
   *
   * For details on the DEFLATE compression algorithm see the
   * document "DEFLATE Compressed Data Format Specification version
   * 1.3" (RFC 1951).
   **/
}

/**
 * Create a gzip compressed string.
 **/

function gzencode(
     string $data
  ,  int $level = -1
  ,  int $encoding = ZLIB_ENCODING_GZIP
  ) {

  /**
   * This function returns a compressed version of the input data
   * compatible with the output of the gzip program.
   *
   * For more information on the GZIP file format, see the
   * document: GZIP file format specification version 4.3 (RFC
   * 1952).
   **/
}

/**
 * Test for EOF on a gz-file pointer.
 **/

function gzeof( resource $stream) {

  /**
   * Tests the given GZ file pointer for EOF.
   **/
}

/**
 * Read entire gz-file into an array.
 **/

function gzfile( string $filename,  int $use_include_path = 0) {

  /**
   * This function is identical to readgzfile, except that it
   * returns the file in an array.
   **/
}

/**
 * Get character from gz-file pointer.
 **/

function gzgetc( resource $stream) {

  /**
   * Returns a string containing a single (uncompressed) character
   * read from the given gz-file pointer.
   **/
}

/**
 * Get line from file pointer.
 **/

function gzgets( resource $stream, $length = null) {

  /**
   * Gets a (uncompressed) string of up to length - 1 bytes read
   * from the given file pointer. Reading ends when length - 1
   * bytes have been read, on a newline, or on EOF (whichever comes
   * first).
   **/
}

/**
 * Get line from gz-file pointer and strip HTML tags.
 **/

function gzgetss(
     resource $zp
  ,  int $length
  ,  string $allowable_tags
  ) {

  /**
   * Identical to gzgets, except that gzgetss attempts to strip
   * any HTML and PHP tags from the text it reads.
   **/
}

/**
 * Inflate a deflated string.
 **/

function gzinflate( string $data,  int $max_length = 0) {

  /**
   * This function inflates a deflated string.
   **/
}

/**
 * Open gz-file.
 **/

function gzopen(
     string $filename
  ,  string $mode
  ,  int $use_include_path = 0
  ) {

  /**
   * Opens a gzip (.gz) file for reading or writing.
   *
   * gzopen can be used to read a file which is not in gzip
   * format; in this case gzread will directly read from the file
   * without decompression.
   **/
}

/**
 * Output all remaining data on a gz-file pointer.
 **/

function gzpassthru( resource $stream) {

  /**
   * Reads to EOF on the given gz-file pointer from the current
   * position and writes the (uncompressed) results to standard
   * output.
   *
   * You may need to call gzrewind to reset the file pointer to
   * the beginning of the file if you have already written data to
   * it.
   *
   * If you just want to dump the contents of a file to the output
   * buffer, without first modifying it or seeking to a particular
   * offset, you may want to use the readgzfile function, which
   * saves you the gzopen call.
   **/
}

/**
 * &Alias; gzwrite.
 **/

function () {

  /**
   **/
}

/**
 * Binary-safe gz-file read.
 **/

function gzread( resource $stream,  int $length) {

  /**
   * gzread reads up to length bytes from the given gz-file
   * pointer. Reading stops when length (uncompressed) bytes have
   * been read or EOF is reached, whichever comes first.
   **/
}

/**
 * Rewind the position of a gz-file pointer.
 **/

function gzrewind( resource $stream) {

  /**
   * Sets the file position indicator of the given gz-file pointer
   * to the beginning of the file stream.
   **/
}

/**
 * Seek on a gz-file pointer.
 **/

function gzseek(
     resource $stream
  ,  int $offset
  ,  int $whence = SEEK_SET
  ) {

  /**
   * Sets the file position indicator for the given file pointer
   * to the given offset byte into the file stream. Equivalent to
   * calling (in C) gzseek(zp, offset, SEEK_SET).
   *
   * If the file is opened for reading, this function is emulated
   * but can be extremely slow. If the file is opened for writing,
   * only forward seeks are supported; gzseek then compresses a
   * sequence of zeroes up to the new starting position.
   **/
}

/**
 * Tell gz-file pointer read/write position.
 **/

function gztell( resource $stream) {

  /**
   * Gets the position of the given file pointer; i.e., its offset
   * into the uncompressed file stream.
   **/
}

/**
 * Uncompress a compressed string.
 **/

function gzuncompress( string $data,  int $max_length = 0) {

  /**
   * This function uncompress a compressed string.
   **/
}

/**
 * Binary-safe gz-file write.
 **/

function gzwrite( resource $stream,  string $data, $length = null) {

  /**
   * gzwrite writes the contents of data to the given gz-file.
   **/
}

/**
 * Get number of bytes read so far.
 **/

function inflate_get_read_len( InflateContext $context) {

  /**
   **/
}

/**
 * Get decompression status.
 **/

function inflate_get_status( InflateContext $context) {

  /**
   * Usually returns either ZLIB_OK or ZLIB_STREAM_END.
   **/
}

/**
 * Incrementally inflate encoded data.
 **/

function inflate_add() {

  /**
   * Incrementally inflates encoded data in the specified context.
   *
   * Limitation: header information from GZIP compressed data are
   * not made available.
   **/
}

/**
 * Initialize an incremental inflate context.
 **/

function inflate_init() {

  /**
   * Initialize an incremental inflate context with the specified
   * encoding.
   **/
}

/**
 * ob_start callback function to gzip output buffer.
 **/

function ob_gzhandler( string $data,  int $flags) {

  /**
   * ob_gzhandler is intended to be used as a callback function
   * for ob_start to help facilitate sending gz-encoded data to web
   * browsers that support compressed web pages. Before
   * ob_gzhandler actually sends compressed data, it determines
   * what type of content encoding the browser will accept ("gzip",
   * "deflate" or none at all) and will return its output
   * accordingly. All browsers are supported since it's up to the
   * browser to send the correct header saying that it accepts
   * compressed web pages. If a browser doesn't support compressed
   * pages this function returns &false;.
   **/
}

/**
 * Output a gz-file.
 **/

function readgzfile( string $filename,  int $use_include_path = 0) {

  /**
   * Reads a file, decompresses it and writes it to standard
   * output.
   *
   * readgzfile can be used to read a file which is not in gzip
   * format; in this case readgzfile will directly read from the
   * file without decompression.
   **/
}

/**
 * Uncompress any raw/gzip/zlib encoded data.
 **/

function zlib_decode( string $data,  int $max_length = 0) {

  /**
   * Uncompress any raw/gzip/zlib encoded data.
   **/
}

/**
 * Compress data with the specified encoding.
 **/

function zlib_encode( string $data,  int $encoding,  int $level = -1) {

  /**
   * Compress data with the specified encoding.
   **/
}

/**
 * Returns the coding type used for output compression.
 **/

function zlib_get_coding_type() {

  /**
   * Returns the coding type used for output compression.
   **/
}

/**
 * Calls callbacks for pending operations.
 **/

function zookeeper_dispatch() {

  /**
   * The zookeeper_dispatch function calls the callbacks passed by
   * operations like Zookeeper::get or Zookeeper::exists.
   *
   * Since version 0.4.0, this function must be called manually to
   * achieve asynchronous operations. If you want that to be done
   * automatically, you also can declare ticks at the beginning of
   * your program.
   *
   * After PHP 7.1, you can ignore this function. This extension
   * uses EG(vm_interrupt) to implement async dispatch.
   **/
}

